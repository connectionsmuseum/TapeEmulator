
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004638  00004000  00004000  00004000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00008638  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0001000c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0001000c  2**0
                  CONTENTS
  4 .bss          00000e4c  20000010  00008648  0001000c  2**3
                  ALLOC
  5 .stack        00010004  20000e5c  00009494  0001000c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  7 .comment      0000002b  00000000  00000000  0001003a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00038b59  00000000  00000000  00010065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000060d4  00000000  00000000  00048bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013be2  00000000  00000000  0004ec92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001618  00000000  00000000  00062878  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002460  00000000  00000000  00063e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00016e52  00000000  00000000  000662f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001caea  00000000  00000000  0007d142  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011d424  00000000  00000000  00099c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bf8  00000000  00000000  001b7050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	60 0e 01 20 f5 63 00 00 f1 63 00 00 f1 63 00 00     `.. .c...c...c..
    4010:	f1 63 00 00 f1 63 00 00 f1 63 00 00 00 00 00 00     .c...c...c......
	...
    402c:	b1 44 00 00 f1 63 00 00 00 00 00 00 41 45 00 00     .D...c......AE..
    403c:	a5 45 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .E...c...c...c..
    404c:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    405c:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    406c:	61 6f 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     ao...c...c...c..
    407c:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    408c:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    409c:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    40ac:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    40bc:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    40cc:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    40dc:	f1 63 00 00 f1 63 00 00 f1 63 00 00 00 00 00 00     .c...c...c......
	...
    40f4:	b5 64 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .d...c...c...c..
    4104:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4114:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4124:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4134:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4144:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4154:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4164:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4174:	f1 63 00 00 00 00 00 00 00 00 00 00 1d 60 00 00     .c...........`..
    4184:	25 60 00 00 2d 60 00 00 35 60 00 00 00 00 00 00     %`..-`..5`......
    4194:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41a4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41b4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41c4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41d4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41e4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    41f4:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4204:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4214:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4224:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4234:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4244:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..
    4254:	f1 63 00 00 f1 63 00 00 f1 63 00 00 f1 63 00 00     .c...c...c...c..

00004264 <deregister_tm_clones>:
    4264:	4b04      	ldr	r3, [pc, #16]	; (4278 <deregister_tm_clones+0x14>)
    4266:	4805      	ldr	r0, [pc, #20]	; (427c <deregister_tm_clones+0x18>)
    4268:	1a1b      	subs	r3, r3, r0
    426a:	2b06      	cmp	r3, #6
    426c:	d902      	bls.n	4274 <deregister_tm_clones+0x10>
    426e:	4b04      	ldr	r3, [pc, #16]	; (4280 <deregister_tm_clones+0x1c>)
    4270:	b103      	cbz	r3, 4274 <deregister_tm_clones+0x10>
    4272:	4718      	bx	r3
    4274:	4770      	bx	lr
    4276:	bf00      	nop
    4278:	0000863b 	.word	0x0000863b
    427c:	00008638 	.word	0x00008638
    4280:	00000000 	.word	0x00000000

00004284 <register_tm_clones>:
    4284:	4905      	ldr	r1, [pc, #20]	; (429c <register_tm_clones+0x18>)
    4286:	4806      	ldr	r0, [pc, #24]	; (42a0 <register_tm_clones+0x1c>)
    4288:	1a09      	subs	r1, r1, r0
    428a:	1089      	asrs	r1, r1, #2
    428c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    4290:	1049      	asrs	r1, r1, #1
    4292:	d002      	beq.n	429a <register_tm_clones+0x16>
    4294:	4b03      	ldr	r3, [pc, #12]	; (42a4 <register_tm_clones+0x20>)
    4296:	b103      	cbz	r3, 429a <register_tm_clones+0x16>
    4298:	4718      	bx	r3
    429a:	4770      	bx	lr
    429c:	00008638 	.word	0x00008638
    42a0:	00008638 	.word	0x00008638
    42a4:	00000000 	.word	0x00000000

000042a8 <__do_global_dtors_aux>:
    42a8:	b510      	push	{r4, lr}
    42aa:	4c06      	ldr	r4, [pc, #24]	; (42c4 <__do_global_dtors_aux+0x1c>)
    42ac:	7823      	ldrb	r3, [r4, #0]
    42ae:	b943      	cbnz	r3, 42c2 <__do_global_dtors_aux+0x1a>
    42b0:	f7ff ffd8 	bl	4264 <deregister_tm_clones>
    42b4:	4b04      	ldr	r3, [pc, #16]	; (42c8 <__do_global_dtors_aux+0x20>)
    42b6:	b113      	cbz	r3, 42be <__do_global_dtors_aux+0x16>
    42b8:	4804      	ldr	r0, [pc, #16]	; (42cc <__do_global_dtors_aux+0x24>)
    42ba:	f3af 8000 	nop.w
    42be:	2301      	movs	r3, #1
    42c0:	7023      	strb	r3, [r4, #0]
    42c2:	bd10      	pop	{r4, pc}
    42c4:	20000010 	.word	0x20000010
    42c8:	00000000 	.word	0x00000000
    42cc:	00008638 	.word	0x00008638

000042d0 <frame_dummy>:
    42d0:	b508      	push	{r3, lr}
    42d2:	4b08      	ldr	r3, [pc, #32]	; (42f4 <frame_dummy+0x24>)
    42d4:	b11b      	cbz	r3, 42de <frame_dummy+0xe>
    42d6:	4908      	ldr	r1, [pc, #32]	; (42f8 <frame_dummy+0x28>)
    42d8:	4808      	ldr	r0, [pc, #32]	; (42fc <frame_dummy+0x2c>)
    42da:	f3af 8000 	nop.w
    42de:	4808      	ldr	r0, [pc, #32]	; (4300 <frame_dummy+0x30>)
    42e0:	6803      	ldr	r3, [r0, #0]
    42e2:	b913      	cbnz	r3, 42ea <frame_dummy+0x1a>
    42e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42e8:	e7cc      	b.n	4284 <register_tm_clones>
    42ea:	4b06      	ldr	r3, [pc, #24]	; (4304 <frame_dummy+0x34>)
    42ec:	2b00      	cmp	r3, #0
    42ee:	d0f9      	beq.n	42e4 <frame_dummy+0x14>
    42f0:	4798      	blx	r3
    42f2:	e7f7      	b.n	42e4 <frame_dummy+0x14>
    42f4:	00000000 	.word	0x00000000
    42f8:	20000014 	.word	0x20000014
    42fc:	00008638 	.word	0x00008638
    4300:	00008638 	.word	0x00008638
    4304:	00000000 	.word	0x00000000

00004308 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4308:	f100 0308 	add.w	r3, r0, #8
    430c:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    430e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4312:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4314:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4316:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4318:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = (UBaseType_t)0U;
    431a:	6003      	str	r3, [r0, #0]
    431c:	4770      	bx	lr

0000431e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    431e:	2300      	movs	r3, #0
    4320:	6103      	str	r3, [r0, #16]
    4322:	4770      	bx	lr

00004324 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4324:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4326:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4328:	689a      	ldr	r2, [r3, #8]
    432a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    432c:	689a      	ldr	r2, [r3, #8]
    432e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    4330:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;

	(pxList->uxNumberOfItems)++;
    4332:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = (void *)pxList;
    4334:	6108      	str	r0, [r1, #16]
	(pxList->uxNumberOfItems)++;
    4336:	3301      	adds	r3, #1
    4338:	6003      	str	r3, [r0, #0]
    433a:	4770      	bx	lr

0000433c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    433c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    433e:	1c53      	adds	r3, r2, #1
{
    4340:	b530      	push	{r4, r5, lr}
	if (xValueOfInsertion == portMAX_DELAY) {
    4342:	d101      	bne.n	4348 <vListInsert+0xc>
		pxIterator = pxList->xListEnd.pxPrevious;
    4344:	6903      	ldr	r3, [r0, #16]
    4346:	e007      	b.n	4358 <vListInsert+0x1c>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4348:	f100 0308 	add.w	r3, r0, #8
    434c:	685c      	ldr	r4, [r3, #4]
    434e:	6825      	ldr	r5, [r4, #0]
    4350:	42aa      	cmp	r2, r5
    4352:	d301      	bcc.n	4358 <vListInsert+0x1c>
    4354:	4623      	mov	r3, r4
    4356:	e7f9      	b.n	434c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4358:	685a      	ldr	r2, [r3, #4]
    435a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    435c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    435e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    4360:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;

	(pxList->uxNumberOfItems)++;
    4362:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = (void *)pxList;
    4364:	6108      	str	r0, [r1, #16]
	(pxList->uxNumberOfItems)++;
    4366:	3301      	adds	r3, #1
    4368:	6003      	str	r3, [r0, #0]
    436a:	bd30      	pop	{r4, r5, pc}

0000436c <uxListRemove>:
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    436c:	6841      	ldr	r1, [r0, #4]
    436e:	6882      	ldr	r2, [r0, #8]
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    4370:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4372:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4374:	6882      	ldr	r2, [r0, #8]
    4376:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    4378:	6859      	ldr	r1, [r3, #4]
    437a:	4288      	cmp	r0, r1
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    437c:	bf08      	it	eq
    437e:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4380:	2200      	movs	r2, #0
    4382:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4384:	681a      	ldr	r2, [r3, #0]
    4386:	3a01      	subs	r2, #1
    4388:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    438a:	6818      	ldr	r0, [r3, #0]
}
    438c:	4770      	bx	lr
	...

00004390 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    4390:	b538      	push	{r3, r4, r5, lr}
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    4392:	0743      	lsls	r3, r0, #29
{
    4394:	4604      	mov	r4, r0
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
		}
	}
#endif

	vTaskSuspendAll();
    4396:	4b11      	ldr	r3, [pc, #68]	; (43dc <pvPortMalloc+0x4c>)
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    4398:	bf1c      	itt	ne
    439a:	f020 0407 	bicne.w	r4, r0, #7
    439e:	3408      	addne	r4, #8
	vTaskSuspendAll();
    43a0:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    43a2:	4b0f      	ldr	r3, [pc, #60]	; (43e0 <pvPortMalloc+0x50>)
    43a4:	681a      	ldr	r2, [r3, #0]
    43a6:	b922      	cbnz	r2, 43b2 <pvPortMalloc+0x22>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    43a8:	f103 020c 	add.w	r2, r3, #12
    43ac:	f022 0207 	bic.w	r2, r2, #7
    43b0:	601a      	str	r2, [r3, #0]
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    43b2:	f8d3 3964 	ldr.w	r3, [r3, #2404]	; 0x964
    43b6:	4a0a      	ldr	r2, [pc, #40]	; (43e0 <pvPortMalloc+0x50>)
    43b8:	441c      	add	r4, r3
    43ba:	f640 1157 	movw	r1, #2391	; 0x957
    43be:	428c      	cmp	r4, r1
    43c0:	d806      	bhi.n	43d0 <pvPortMalloc+0x40>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    43c2:	42a3      	cmp	r3, r4
    43c4:	d204      	bcs.n	43d0 <pvPortMalloc+0x40>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    43c6:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
    43c8:	f8c2 4964 	str.w	r4, [r2, #2404]	; 0x964
			pvReturn = pucAlignedHeap + xNextFreeByte;
    43cc:	441d      	add	r5, r3
    43ce:	e000      	b.n	43d2 <pvPortMalloc+0x42>
	void *          pvReturn       = NULL;
    43d0:	2500      	movs	r5, #0
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    43d2:	4b04      	ldr	r3, [pc, #16]	; (43e4 <pvPortMalloc+0x54>)
    43d4:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    43d6:	4628      	mov	r0, r5
    43d8:	bd38      	pop	{r3, r4, r5, pc}
    43da:	bf00      	nop
    43dc:	00007cb5 	.word	0x00007cb5
    43e0:	2000002c 	.word	0x2000002c
    43e4:	00007dcd 	.word	0x00007dcd

000043e8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    43e8:	b140      	cbz	r0, 43fc <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    43ea:	f04f 0380 	mov.w	r3, #128	; 0x80
    43ee:	f383 8811 	msr	BASEPRI, r3
    43f2:	f3bf 8f6f 	isb	sy
    43f6:	f3bf 8f4f 	dsb	sy
    43fa:	e7fe      	b.n	43fa <vPortFree+0x12>
    43fc:	4770      	bx	lr
	...

00004400 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4400:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4402:	2300      	movs	r3, #0
    4404:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4406:	4b0d      	ldr	r3, [pc, #52]	; (443c <prvTaskExitError+0x3c>)
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	3301      	adds	r3, #1
    440c:	d008      	beq.n	4420 <prvTaskExitError+0x20>
    440e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4412:	f383 8811 	msr	BASEPRI, r3
    4416:	f3bf 8f6f 	isb	sy
    441a:	f3bf 8f4f 	dsb	sy
    441e:	e7fe      	b.n	441e <prvTaskExitError+0x1e>
    4420:	f04f 0380 	mov.w	r3, #128	; 0x80
    4424:	f383 8811 	msr	BASEPRI, r3
    4428:	f3bf 8f6f 	isb	sy
    442c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	2b00      	cmp	r3, #0
    4434:	d0fc      	beq.n	4430 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4436:	b002      	add	sp, #8
    4438:	4770      	bx	lr
    443a:	bf00      	nop
    443c:	20000000 	.word	0x20000000

00004440 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    4440:	4808      	ldr	r0, [pc, #32]	; (4464 <prvPortStartFirstTask+0x24>)
    4442:	6800      	ldr	r0, [r0, #0]
    4444:	6800      	ldr	r0, [r0, #0]
    4446:	f380 8808 	msr	MSP, r0
    444a:	f04f 0000 	mov.w	r0, #0
    444e:	f380 8814 	msr	CONTROL, r0
    4452:	b662      	cpsie	i
    4454:	b661      	cpsie	f
    4456:	f3bf 8f4f 	dsb	sy
    445a:	f3bf 8f6f 	isb	sy
    445e:	df00      	svc	0
    4460:	bf00      	nop
    4462:	0000      	.short	0x0000
    4464:	e000ed08 	.word	0xe000ed08

00004468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4478 <vPortEnableVFP+0x10>
    446c:	6801      	ldr	r1, [r0, #0]
    446e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4472:	6001      	str	r1, [r0, #0]
    4474:	4770      	bx	lr
    4476:	0000      	.short	0x0000
    4478:	e000ed88 	.word	0xe000ed88

0000447c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    447c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4480:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4484:	4b07      	ldr	r3, [pc, #28]	; (44a4 <pxPortInitialiseStack+0x28>)
    4486:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    448a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    448e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4492:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4496:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    449a:	f840 3c24 	str.w	r3, [r0, #-36]
}
    449e:	3844      	subs	r0, #68	; 0x44
    44a0:	4770      	bx	lr
    44a2:	bf00      	nop
    44a4:	00004401 	.word	0x00004401
	...

000044b0 <SVCall_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    44b0:	4b07      	ldr	r3, [pc, #28]	; (44d0 <pxCurrentTCBConst2>)
    44b2:	6819      	ldr	r1, [r3, #0]
    44b4:	6808      	ldr	r0, [r1, #0]
    44b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44ba:	f380 8809 	msr	PSP, r0
    44be:	f3bf 8f6f 	isb	sy
    44c2:	f04f 0000 	mov.w	r0, #0
    44c6:	f380 8811 	msr	BASEPRI, r0
    44ca:	4770      	bx	lr
    44cc:	f3af 8000 	nop.w

000044d0 <pxCurrentTCBConst2>:
    44d0:	20000d80 	.word	0x20000d80

000044d4 <vPortEnterCritical>:
    44d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    44d8:	f383 8811 	msr	BASEPRI, r3
    44dc:	f3bf 8f6f 	isb	sy
    44e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    44e4:	4a0a      	ldr	r2, [pc, #40]	; (4510 <vPortEnterCritical+0x3c>)
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	3301      	adds	r3, #1
	if (uxCriticalNesting == 1) {
    44ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
    44ec:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    44ee:	d10d      	bne.n	450c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    44f0:	4b08      	ldr	r3, [pc, #32]	; (4514 <vPortEnterCritical+0x40>)
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	f013 0fff 	tst.w	r3, #255	; 0xff
    44f8:	d008      	beq.n	450c <vPortEnterCritical+0x38>
    44fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    44fe:	f383 8811 	msr	BASEPRI, r3
    4502:	f3bf 8f6f 	isb	sy
    4506:	f3bf 8f4f 	dsb	sy
    450a:	e7fe      	b.n	450a <vPortEnterCritical+0x36>
    450c:	4770      	bx	lr
    450e:	bf00      	nop
    4510:	20000000 	.word	0x20000000
    4514:	e000ed04 	.word	0xe000ed04

00004518 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4518:	4a08      	ldr	r2, [pc, #32]	; (453c <vPortExitCritical+0x24>)
    451a:	6813      	ldr	r3, [r2, #0]
    451c:	b943      	cbnz	r3, 4530 <vPortExitCritical+0x18>
    451e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4522:	f383 8811 	msr	BASEPRI, r3
    4526:	f3bf 8f6f 	isb	sy
    452a:	f3bf 8f4f 	dsb	sy
    452e:	e7fe      	b.n	452e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4530:	3b01      	subs	r3, #1
    4532:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4534:	b90b      	cbnz	r3, 453a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4536:	f383 8811 	msr	BASEPRI, r3
    453a:	4770      	bx	lr
    453c:	20000000 	.word	0x20000000

00004540 <PendSV_Handler>:
	__asm volatile(
    4540:	f3ef 8009 	mrs	r0, PSP
    4544:	f3bf 8f6f 	isb	sy
    4548:	4b15      	ldr	r3, [pc, #84]	; (45a0 <pxCurrentTCBConst>)
    454a:	681a      	ldr	r2, [r3, #0]
    454c:	f01e 0f10 	tst.w	lr, #16
    4550:	bf08      	it	eq
    4552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    455a:	6010      	str	r0, [r2, #0]
    455c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4560:	f04f 0080 	mov.w	r0, #128	; 0x80
    4564:	f380 8811 	msr	BASEPRI, r0
    4568:	f3bf 8f4f 	dsb	sy
    456c:	f3bf 8f6f 	isb	sy
    4570:	f003 fca4 	bl	7ebc <vTaskSwitchContext>
    4574:	f04f 0000 	mov.w	r0, #0
    4578:	f380 8811 	msr	BASEPRI, r0
    457c:	bc09      	pop	{r0, r3}
    457e:	6819      	ldr	r1, [r3, #0]
    4580:	6808      	ldr	r0, [r1, #0]
    4582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4586:	f01e 0f10 	tst.w	lr, #16
    458a:	bf08      	it	eq
    458c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4590:	f380 8809 	msr	PSP, r0
    4594:	f3bf 8f6f 	isb	sy
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	f3af 8000 	nop.w

000045a0 <pxCurrentTCBConst>:
    45a0:	20000d80 	.word	0x20000d80

000045a4 <SysTick_Handler>:
{
    45a4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    45a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    45aa:	f383 8811 	msr	BASEPRI, r3
    45ae:	f3bf 8f6f 	isb	sy
    45b2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <SysTick_Handler+0x28>)
    45b8:	4798      	blx	r3
    45ba:	b118      	cbz	r0, 45c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    45bc:	4b04      	ldr	r3, [pc, #16]	; (45d0 <SysTick_Handler+0x2c>)
    45be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    45c2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    45c4:	2300      	movs	r3, #0
    45c6:	f383 8811 	msr	BASEPRI, r3
    45ca:	bd08      	pop	{r3, pc}
    45cc:	00007cd5 	.word	0x00007cd5
    45d0:	e000ed04 	.word	0xe000ed04

000045d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    45d4:	4b05      	ldr	r3, [pc, #20]	; (45ec <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    45d6:	4906      	ldr	r1, [pc, #24]	; (45f0 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    45d8:	2200      	movs	r2, #0
    45da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    45dc:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    45de:	4a05      	ldr	r2, [pc, #20]	; (45f4 <vPortSetupTimerInterrupt+0x20>)
    45e0:	4905      	ldr	r1, [pc, #20]	; (45f8 <vPortSetupTimerInterrupt+0x24>)
    45e2:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    45e4:	2207      	movs	r2, #7
    45e6:	601a      	str	r2, [r3, #0]
    45e8:	4770      	bx	lr
    45ea:	bf00      	nop
    45ec:	e000e010 	.word	0xe000e010
    45f0:	e000e018 	.word	0xe000e018
    45f4:	e000e014 	.word	0xe000e014
    45f8:	0001d4bf 	.word	0x0001d4bf

000045fc <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    45fc:	4b39      	ldr	r3, [pc, #228]	; (46e4 <xPortStartScheduler+0xe8>)
    45fe:	4a3a      	ldr	r2, [pc, #232]	; (46e8 <xPortStartScheduler+0xec>)
{
    4600:	b513      	push	{r0, r1, r4, lr}
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4602:	6819      	ldr	r1, [r3, #0]
    4604:	4291      	cmp	r1, r2
    4606:	d108      	bne.n	461a <xPortStartScheduler+0x1e>
	__asm volatile("	mov %0, %1												\n"
    4608:	f04f 0380 	mov.w	r3, #128	; 0x80
    460c:	f383 8811 	msr	BASEPRI, r3
    4610:	f3bf 8f6f 	isb	sy
    4614:	f3bf 8f4f 	dsb	sy
    4618:	e7fe      	b.n	4618 <xPortStartScheduler+0x1c>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    461a:	681a      	ldr	r2, [r3, #0]
    461c:	4b33      	ldr	r3, [pc, #204]	; (46ec <xPortStartScheduler+0xf0>)
    461e:	429a      	cmp	r2, r3
    4620:	d108      	bne.n	4634 <xPortStartScheduler+0x38>
    4622:	f04f 0380 	mov.w	r3, #128	; 0x80
    4626:	f383 8811 	msr	BASEPRI, r3
    462a:	f3bf 8f6f 	isb	sy
    462e:	f3bf 8f4f 	dsb	sy
    4632:	e7fe      	b.n	4632 <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4634:	4b2e      	ldr	r3, [pc, #184]	; (46f0 <xPortStartScheduler+0xf4>)
    4636:	781a      	ldrb	r2, [r3, #0]
    4638:	b2d2      	uxtb	r2, r2
    463a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    463c:	22ff      	movs	r2, #255	; 0xff
    463e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4640:	781b      	ldrb	r3, [r3, #0]
    4642:	b2db      	uxtb	r3, r3
    4644:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4648:	f89d 2003 	ldrb.w	r2, [sp, #3]
    464c:	4b29      	ldr	r3, [pc, #164]	; (46f4 <xPortStartScheduler+0xf8>)
    464e:	f002 0280 	and.w	r2, r2, #128	; 0x80
    4652:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4654:	2207      	movs	r2, #7
    4656:	605a      	str	r2, [r3, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4658:	2100      	movs	r1, #0
    465a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    465e:	0600      	lsls	r0, r0, #24
    4660:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    4664:	d508      	bpl.n	4678 <xPortStartScheduler+0x7c>
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4666:	f89d 2003 	ldrb.w	r2, [sp, #3]
    466a:	0052      	lsls	r2, r2, #1
    466c:	b2d2      	uxtb	r2, r2
    466e:	f88d 2003 	strb.w	r2, [sp, #3]
    4672:	2101      	movs	r1, #1
    4674:	4622      	mov	r2, r4
    4676:	e7f0      	b.n	465a <xPortStartScheduler+0x5e>
    4678:	b101      	cbz	r1, 467c <xPortStartScheduler+0x80>
    467a:	605a      	str	r2, [r3, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    467c:	685b      	ldr	r3, [r3, #4]
    467e:	2b04      	cmp	r3, #4
    4680:	d008      	beq.n	4694 <xPortStartScheduler+0x98>
    4682:	f04f 0380 	mov.w	r3, #128	; 0x80
    4686:	f383 8811 	msr	BASEPRI, r3
    468a:	f3bf 8f6f 	isb	sy
    468e:	f3bf 8f4f 	dsb	sy
    4692:	e7fe      	b.n	4692 <xPortStartScheduler+0x96>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    4694:	4a17      	ldr	r2, [pc, #92]	; (46f4 <xPortStartScheduler+0xf8>)
    4696:	021b      	lsls	r3, r3, #8
    4698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    469c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    469e:	9b01      	ldr	r3, [sp, #4]
    46a0:	4a13      	ldr	r2, [pc, #76]	; (46f0 <xPortStartScheduler+0xf4>)
    46a2:	b2db      	uxtb	r3, r3
    46a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    46a6:	4b14      	ldr	r3, [pc, #80]	; (46f8 <xPortStartScheduler+0xfc>)
    46a8:	681a      	ldr	r2, [r3, #0]
    46aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    46ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    46b0:	681a      	ldr	r2, [r3, #0]
    46b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    46b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    46b8:	4b10      	ldr	r3, [pc, #64]	; (46fc <xPortStartScheduler+0x100>)
    46ba:	4798      	blx	r3
	uxCriticalNesting = 0;
    46bc:	4b10      	ldr	r3, [pc, #64]	; (4700 <xPortStartScheduler+0x104>)
    46be:	2400      	movs	r4, #0
    46c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    46c2:	4b10      	ldr	r3, [pc, #64]	; (4704 <xPortStartScheduler+0x108>)
    46c4:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    46c6:	4a10      	ldr	r2, [pc, #64]	; (4708 <xPortStartScheduler+0x10c>)
    46c8:	6813      	ldr	r3, [r2, #0]
    46ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    46ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    46d0:	4b0e      	ldr	r3, [pc, #56]	; (470c <xPortStartScheduler+0x110>)
    46d2:	4798      	blx	r3
	vTaskSwitchContext();
    46d4:	4b0e      	ldr	r3, [pc, #56]	; (4710 <xPortStartScheduler+0x114>)
    46d6:	4798      	blx	r3
	prvTaskExitError();
    46d8:	4b0e      	ldr	r3, [pc, #56]	; (4714 <xPortStartScheduler+0x118>)
    46da:	4798      	blx	r3
}
    46dc:	4620      	mov	r0, r4
    46de:	b002      	add	sp, #8
    46e0:	bd10      	pop	{r4, pc}
    46e2:	bf00      	nop
    46e4:	e000ed00 	.word	0xe000ed00
    46e8:	410fc271 	.word	0x410fc271
    46ec:	410fc270 	.word	0x410fc270
    46f0:	e000e400 	.word	0xe000e400
    46f4:	20000994 	.word	0x20000994
    46f8:	e000ed20 	.word	0xe000ed20
    46fc:	000045d5 	.word	0x000045d5
    4700:	20000000 	.word	0x20000000
    4704:	00004469 	.word	0x00004469
    4708:	e000ef34 	.word	0xe000ef34
    470c:	00004441 	.word	0x00004441
    4710:	00007ebd 	.word	0x00007ebd
    4714:	00004401 	.word	0x00004401

00004718 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    4718:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    471c:	2b0f      	cmp	r3, #15
    471e:	4a10      	ldr	r2, [pc, #64]	; (4760 <vPortValidateInterruptPriority+0x48>)
    4720:	d90d      	bls.n	473e <vPortValidateInterruptPriority+0x26>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4722:	4910      	ldr	r1, [pc, #64]	; (4764 <vPortValidateInterruptPriority+0x4c>)
    4724:	5c5b      	ldrb	r3, [r3, r1]
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    4726:	7811      	ldrb	r1, [r2, #0]
    4728:	4299      	cmp	r1, r3
    472a:	d908      	bls.n	473e <vPortValidateInterruptPriority+0x26>
    472c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4730:	f383 8811 	msr	BASEPRI, r3
    4734:	f3bf 8f6f 	isb	sy
    4738:	f3bf 8f4f 	dsb	sy
    473c:	e7fe      	b.n	473c <vPortValidateInterruptPriority+0x24>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    473e:	4b0a      	ldr	r3, [pc, #40]	; (4768 <vPortValidateInterruptPriority+0x50>)
    4740:	6852      	ldr	r2, [r2, #4]
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4748:	4293      	cmp	r3, r2
    474a:	d908      	bls.n	475e <vPortValidateInterruptPriority+0x46>
    474c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4750:	f383 8811 	msr	BASEPRI, r3
    4754:	f3bf 8f6f 	isb	sy
    4758:	f3bf 8f4f 	dsb	sy
    475c:	e7fe      	b.n	475c <vPortValidateInterruptPriority+0x44>
    475e:	4770      	bx	lr
    4760:	20000994 	.word	0x20000994
    4764:	e000e3f0 	.word	0xe000e3f0
    4768:	e000ed0c 	.word	0xe000ed0c

0000476c <sd_mmc_stack_init>:
}

void sd_mmc_stack_init(void)
{

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    476c:	4a02      	ldr	r2, [pc, #8]	; (4778 <sd_mmc_stack_init+0xc>)
    476e:	4803      	ldr	r0, [pc, #12]	; (477c <sd_mmc_stack_init+0x10>)
    4770:	4b03      	ldr	r3, [pc, #12]	; (4780 <sd_mmc_stack_init+0x14>)
    4772:	1d11      	adds	r1, r2, #4
    4774:	4718      	bx	r3
    4776:	bf00      	nop
    4778:	20000004 	.word	0x20000004
    477c:	20000e28 	.word	0x20000e28
    4780:	000074dd 	.word	0x000074dd

00004784 <hri_eic_wait_for_sync.constprop.6>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4784:	4a02      	ldr	r2, [pc, #8]	; (4790 <hri_eic_wait_for_sync.constprop.6+0xc>)
    4786:	6853      	ldr	r3, [r2, #4]
    4788:	4203      	tst	r3, r0
    478a:	d1fc      	bne.n	4786 <hri_eic_wait_for_sync.constprop.6+0x2>
	};
}
    478c:	4770      	bx	lr
    478e:	bf00      	nop
    4790:	40002800 	.word	0x40002800

00004794 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4794:	b538      	push	{r3, r4, r5, lr}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4796:	4918      	ldr	r1, [pc, #96]	; (47f8 <_ext_irq_init+0x64>)
    4798:	4d18      	ldr	r5, [pc, #96]	; (47fc <_ext_irq_init+0x68>)
    479a:	684b      	ldr	r3, [r1, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    479c:	f013 0f01 	tst.w	r3, #1
    47a0:	d111      	bne.n	47c6 <_ext_irq_init+0x32>
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47a2:	2003      	movs	r0, #3
    47a4:	47a8      	blx	r5
	tmp = ((Eic *)hw)->CTRLA.reg;
    47a6:	780b      	ldrb	r3, [r1, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    47a8:	079b      	lsls	r3, r3, #30
    47aa:	d507      	bpl.n	47bc <_ext_irq_init+0x28>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    47ac:	780b      	ldrb	r3, [r1, #0]
    47ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    47b2:	2003      	movs	r0, #3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    47b4:	700b      	strb	r3, [r1, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    47b6:	47a8      	blx	r5
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    47b8:	2002      	movs	r0, #2
    47ba:	47a8      	blx	r5
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    47bc:	4b0e      	ldr	r3, [pc, #56]	; (47f8 <_ext_irq_init+0x64>)
    47be:	2201      	movs	r2, #1
    47c0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47c2:	2003      	movs	r0, #3
    47c4:	47a8      	blx	r5
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    47c6:	2001      	movs	r0, #1
    47c8:	47a8      	blx	r5
	tmp = ((Eic *)hw)->CTRLA.reg;
    47ca:	490b      	ldr	r1, [pc, #44]	; (47f8 <_ext_irq_init+0x64>)
    47cc:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    47ce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    47d2:	700b      	strb	r3, [r1, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47d4:	2003      	movs	r0, #3
    47d6:	47a8      	blx	r5
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    47d8:	2400      	movs	r4, #0
    47da:	704c      	strb	r4, [r1, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    47dc:	608c      	str	r4, [r1, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    47de:	618c      	str	r4, [r1, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    47e0:	630c      	str	r4, [r1, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    47e2:	634c      	str	r4, [r1, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    47e4:	61cc      	str	r4, [r1, #28]
    47e6:	620c      	str	r4, [r1, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    47e8:	780b      	ldrb	r3, [r1, #0]
    47ea:	f043 0302 	orr.w	r3, r3, #2
    47ee:	700b      	strb	r3, [r1, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    47f0:	2003      	movs	r0, #3
    47f2:	47a8      	blx	r5
	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
}
    47f4:	4620      	mov	r0, r4
    47f6:	bd38      	pop	{r3, r4, r5, pc}
    47f8:	40002800 	.word	0x40002800
    47fc:	00004785 	.word	0x00004785

00004800 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4800:	b510      	push	{r4, lr}
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4802:	4a11      	ldr	r2, [pc, #68]	; (4848 <_event_system_init+0x48>)
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4804:	4c11      	ldr	r4, [pc, #68]	; (484c <_event_system_init+0x4c>)
{
    4806:	2300      	movs	r3, #0
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4808:	5d18      	ldrb	r0, [r3, r4]
    480a:	f103 0148 	add.w	r1, r3, #72	; 0x48
    480e:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_USERS; i++) {
    4810:	2b43      	cmp	r3, #67	; 0x43
    4812:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    4816:	d1f7      	bne.n	4808 <_event_system_init+0x8>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4818:	480d      	ldr	r0, [pc, #52]	; (4850 <_event_system_init+0x50>)
    481a:	2200      	movs	r2, #0
    481c:	00d3      	lsls	r3, r2, #3
    481e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4822:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    4826:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    482a:	6219      	str	r1, [r3, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    482c:	4909      	ldr	r1, [pc, #36]	; (4854 <_event_system_init+0x54>)
    482e:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4832:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    4836:	3201      	adds	r2, #1
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4838:	43c9      	mvns	r1, r1
    483a:	b2c9      	uxtb	r1, r1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    483c:	2a20      	cmp	r2, #32
    483e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    4842:	d1eb      	bne.n	481c <_event_system_init+0x1c>
	}

	return ERR_NONE;
}
    4844:	2000      	movs	r0, #0
    4846:	bd10      	pop	{r4, pc}
    4848:	4100e000 	.word	0x4100e000
    484c:	00008390 	.word	0x00008390
    4850:	000083d4 	.word	0x000083d4
    4854:	00008414 	.word	0x00008414

00004858 <_get_cycles_for_ms>:
/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4858:	2378      	movs	r3, #120	; 0x78
    485a:	4358      	muls	r0, r3
    485c:	3002      	adds	r0, #2
    485e:	2303      	movs	r3, #3
    4860:	fbb0 f0f3 	udiv	r0, r0, r3
}
    4864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4868:	4358      	muls	r0, r3
    486a:	4770      	bx	lr
    486c:	0000      	movs	r0, r0
	...

00004870 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4870:	3901      	subs	r1, #1
    4872:	d8fd      	bhi.n	4870 <_delay_cycles>
    4874:	4770      	bx	lr
    4876:	bf00      	nop

00004878 <cdcdf_acm_is_enabled>:
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
}
    4878:	4b01      	ldr	r3, [pc, #4]	; (4880 <cdcdf_acm_is_enabled+0x8>)
    487a:	7958      	ldrb	r0, [r3, #5]
    487c:	4770      	bx	lr
    487e:	bf00      	nop
    4880:	2000099c 	.word	0x2000099c

00004884 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    4884:	b510      	push	{r4, lr}
    4886:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    4888:	4b04      	ldr	r3, [pc, #16]	; (489c <prvIsQueueEmpty+0x18>)
    488a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    488c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    488e:	4b04      	ldr	r3, [pc, #16]	; (48a0 <prvIsQueueEmpty+0x1c>)
    4890:	4798      	blx	r3

	return xReturn;
}
    4892:	fab4 f084 	clz	r0, r4
    4896:	0940      	lsrs	r0, r0, #5
    4898:	bd10      	pop	{r4, pc}
    489a:	bf00      	nop
    489c:	000044d5 	.word	0x000044d5
    48a0:	00004519 	.word	0x00004519

000048a4 <prvCopyDataToQueue>:
{
    48a4:	b570      	push	{r4, r5, r6, lr}
    48a6:	4615      	mov	r5, r2
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    48a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    48aa:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
    48ac:	4604      	mov	r4, r0
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    48ae:	b932      	cbnz	r2, 48be <prvCopyDataToQueue+0x1a>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    48b0:	6805      	ldr	r5, [r0, #0]
    48b2:	bb25      	cbnz	r5, 48fe <prvCopyDataToQueue+0x5a>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    48b4:	6840      	ldr	r0, [r0, #4]
    48b6:	4b17      	ldr	r3, [pc, #92]	; (4914 <prvCopyDataToQueue+0x70>)
    48b8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    48ba:	6065      	str	r5, [r4, #4]
    48bc:	e026      	b.n	490c <prvCopyDataToQueue+0x68>
    48be:	4b16      	ldr	r3, [pc, #88]	; (4918 <prvCopyDataToQueue+0x74>)
	} else if (xPosition == queueSEND_TO_BACK) {
    48c0:	b95d      	cbnz	r5, 48da <prvCopyDataToQueue+0x36>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    48c2:	6880      	ldr	r0, [r0, #8]
    48c4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    48c6:	68a2      	ldr	r2, [r4, #8]
    48c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    48ca:	4413      	add	r3, r2
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    48cc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    48ce:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    48d0:	4293      	cmp	r3, r2
    48d2:	d316      	bcc.n	4902 <prvCopyDataToQueue+0x5e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    48d4:	6823      	ldr	r3, [r4, #0]
    48d6:	60a3      	str	r3, [r4, #8]
    48d8:	e013      	b.n	4902 <prvCopyDataToQueue+0x5e>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    48da:	68c0      	ldr	r0, [r0, #12]
    48dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    48de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    48e0:	68e2      	ldr	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    48e2:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    48e4:	425b      	negs	r3, r3
    48e6:	441a      	add	r2, r3
		if (pxQueue->u.pcReadFrom
    48e8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    48ea:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    48ec:	bf3e      	ittt	cc
    48ee:	6862      	ldrcc	r2, [r4, #4]
    48f0:	189b      	addcc	r3, r3, r2
    48f2:	60e3      	strcc	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    48f4:	2d02      	cmp	r5, #2
    48f6:	d106      	bne.n	4906 <prvCopyDataToQueue+0x62>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    48f8:	b13e      	cbz	r6, 490a <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
    48fa:	3e01      	subs	r6, #1
    48fc:	e003      	b.n	4906 <prvCopyDataToQueue+0x62>
	BaseType_t  xReturn = pdFALSE;
    48fe:	4610      	mov	r0, r2
    4900:	e004      	b.n	490c <prvCopyDataToQueue+0x68>
    4902:	4628      	mov	r0, r5
    4904:	e002      	b.n	490c <prvCopyDataToQueue+0x68>
    4906:	2000      	movs	r0, #0
    4908:	e000      	b.n	490c <prvCopyDataToQueue+0x68>
    490a:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    490c:	3601      	adds	r6, #1
    490e:	63a6      	str	r6, [r4, #56]	; 0x38
}
    4910:	bd70      	pop	{r4, r5, r6, pc}
    4912:	bf00      	nop
    4914:	000080ed 	.word	0x000080ed
    4918:	000081c1 	.word	0x000081c1

0000491c <prvCopyDataFromQueue>:
{
    491c:	4603      	mov	r3, r0
    491e:	b410      	push	{r4}
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    4920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
    4922:	4608      	mov	r0, r1
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    4924:	b162      	cbz	r2, 4940 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4926:	68d9      	ldr	r1, [r3, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    4928:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    492a:	4411      	add	r1, r2
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    492c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    492e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4930:	bf24      	itt	cs
    4932:	6819      	ldrcs	r1, [r3, #0]
    4934:	60d9      	strcs	r1, [r3, #12]
		(void)memcpy((void *)pvBuffer,
    4936:	68d9      	ldr	r1, [r3, #12]
}
    4938:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)memcpy((void *)pvBuffer,
    493c:	4b02      	ldr	r3, [pc, #8]	; (4948 <prvCopyDataFromQueue+0x2c>)
    493e:	4718      	bx	r3
}
    4940:	f85d 4b04 	ldr.w	r4, [sp], #4
    4944:	4770      	bx	lr
    4946:	bf00      	nop
    4948:	000081c1 	.word	0x000081c1

0000494c <prvNotifyQueueSetContainer.part.0>:
    494c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4950:	f383 8811 	msr	BASEPRI, r3
    4954:	f3bf 8f6f 	isb	sy
    4958:	f3bf 8f4f 	dsb	sy
    495c:	e7fe      	b.n	495c <prvNotifyQueueSetContainer.part.0+0x10>
	...

00004960 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    4960:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    4962:	6c84      	ldr	r4, [r0, #72]	; 0x48
{
    4964:	9001      	str	r0, [sp, #4]
    4966:	460a      	mov	r2, r1
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    4968:	b90c      	cbnz	r4, 496e <prvNotifyQueueSetContainer+0xe>
    496a:	4b17      	ldr	r3, [pc, #92]	; (49c8 <prvNotifyQueueSetContainer+0x68>)
    496c:	4798      	blx	r3
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    496e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4972:	4299      	cmp	r1, r3
    4974:	d308      	bcc.n	4988 <prvNotifyQueueSetContainer+0x28>
    4976:	f04f 0380 	mov.w	r3, #128	; 0x80
    497a:	f383 8811 	msr	BASEPRI, r3
    497e:	f3bf 8f6f 	isb	sy
    4982:	f3bf 8f4f 	dsb	sy
    4986:	e7fe      	b.n	4986 <prvNotifyQueueSetContainer+0x26>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    4988:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    498a:	428b      	cmp	r3, r1
    498c:	d918      	bls.n	49c0 <prvNotifyQueueSetContainer+0x60>
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    498e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45

		traceQUEUE_SEND(pxQueueSetContainer);

		/* The data copied is the handle of the queue that contains data. */
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    4992:	4b0e      	ldr	r3, [pc, #56]	; (49cc <prvNotifyQueueSetContainer+0x6c>)
    4994:	a901      	add	r1, sp, #4
    4996:	4620      	mov	r0, r4
    4998:	4798      	blx	r3
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    499a:	b26d      	sxtb	r5, r5

		if (cTxLock == queueUNLOCKED) {
    499c:	1c6b      	adds	r3, r5, #1
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    499e:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    49a0:	d109      	bne.n	49b6 <prvNotifyQueueSetContainer+0x56>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    49a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49a4:	b16b      	cbz	r3, 49c2 <prvNotifyQueueSetContainer+0x62>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    49a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    49aa:	4b09      	ldr	r3, [pc, #36]	; (49d0 <prvNotifyQueueSetContainer+0x70>)
    49ac:	4798      	blx	r3
					/* The task waiting has a higher priority. */
					xReturn = pdTRUE;
    49ae:	2800      	cmp	r0, #0
    49b0:	bf18      	it	ne
    49b2:	2601      	movne	r6, #1
    49b4:	e005      	b.n	49c2 <prvNotifyQueueSetContainer+0x62>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    49b6:	3501      	adds	r5, #1
    49b8:	b26d      	sxtb	r5, r5
    49ba:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    49be:	e000      	b.n	49c2 <prvNotifyQueueSetContainer+0x62>
	BaseType_t xReturn             = pdFALSE;
    49c0:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    49c2:	4630      	mov	r0, r6
    49c4:	b002      	add	sp, #8
    49c6:	bd70      	pop	{r4, r5, r6, pc}
    49c8:	0000494d 	.word	0x0000494d
    49cc:	000048a5 	.word	0x000048a5
    49d0:	00007fa9 	.word	0x00007fa9

000049d4 <prvUnlockQueue>:
{
    49d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    49da:	4e1f      	ldr	r6, [pc, #124]	; (4a58 <prvUnlockQueue+0x84>)
						vTaskMissedYield();
    49dc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4a64 <prvUnlockQueue+0x90>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    49e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4a68 <prvUnlockQueue+0x94>
	taskENTER_CRITICAL();
    49e4:	47b0      	blx	r6
		int8_t cTxLock = pxQueue->cTxLock;
    49e6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    49ea:	4637      	mov	r7, r6
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    49ec:	4e1b      	ldr	r6, [pc, #108]	; (4a5c <prvUnlockQueue+0x88>)
		int8_t cTxLock = pxQueue->cTxLock;
    49ee:	b26d      	sxtb	r5, r5
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    49f0:	2d00      	cmp	r5, #0
    49f2:	dd10      	ble.n	4a16 <prvUnlockQueue+0x42>
				if (pxQueue->pxQueueSetContainer != NULL) {
    49f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    49f6:	b12b      	cbz	r3, 4a04 <prvUnlockQueue+0x30>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    49f8:	2100      	movs	r1, #0
    49fa:	4620      	mov	r0, r4
    49fc:	47c8      	blx	r9
    49fe:	b138      	cbz	r0, 4a10 <prvUnlockQueue+0x3c>
						vTaskMissedYield();
    4a00:	47c0      	blx	r8
    4a02:	e005      	b.n	4a10 <prvUnlockQueue+0x3c>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a06:	b133      	cbz	r3, 4a16 <prvUnlockQueue+0x42>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4a0c:	47b0      	blx	r6
    4a0e:	e7f6      	b.n	49fe <prvUnlockQueue+0x2a>
    4a10:	3d01      	subs	r5, #1
    4a12:	b26d      	sxtb	r5, r5
    4a14:	e7ec      	b.n	49f0 <prvUnlockQueue+0x1c>
		pxQueue->cTxLock = queueUNLOCKED;
    4a16:	23ff      	movs	r3, #255	; 0xff
    4a18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
    4a1c:	4e10      	ldr	r6, [pc, #64]	; (4a60 <prvUnlockQueue+0x8c>)
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4a1e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4a5c <prvUnlockQueue+0x88>
					vTaskMissedYield();
    4a22:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4a64 <prvUnlockQueue+0x90>
	taskEXIT_CRITICAL();
    4a26:	47b0      	blx	r6
	taskENTER_CRITICAL();
    4a28:	47b8      	blx	r7
		int8_t cRxLock = pxQueue->cRxLock;
    4a2a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4a2e:	f104 0710 	add.w	r7, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
    4a32:	b26d      	sxtb	r5, r5
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    4a34:	2d00      	cmp	r5, #0
    4a36:	dd08      	ble.n	4a4a <prvUnlockQueue+0x76>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4a38:	6923      	ldr	r3, [r4, #16]
    4a3a:	b133      	cbz	r3, 4a4a <prvUnlockQueue+0x76>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4a3c:	4638      	mov	r0, r7
    4a3e:	47c0      	blx	r8
    4a40:	b100      	cbz	r0, 4a44 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    4a42:	47c8      	blx	r9
    4a44:	3d01      	subs	r5, #1
    4a46:	b26d      	sxtb	r5, r5
    4a48:	e7f4      	b.n	4a34 <prvUnlockQueue+0x60>
		pxQueue->cRxLock = queueUNLOCKED;
    4a4a:	23ff      	movs	r3, #255	; 0xff
    4a4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
    4a50:	4633      	mov	r3, r6
}
    4a52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	taskEXIT_CRITICAL();
    4a56:	4718      	bx	r3
    4a58:	000044d5 	.word	0x000044d5
    4a5c:	00007fa9 	.word	0x00007fa9
    4a60:	00004519 	.word	0x00004519
    4a64:	000080bd 	.word	0x000080bd
    4a68:	00004961 	.word	0x00004961

00004a6c <xQueueGenericReset>:
{
    4a6c:	b538      	push	{r3, r4, r5, lr}
    4a6e:	460d      	mov	r5, r1
	configASSERT(pxQueue);
    4a70:	4604      	mov	r4, r0
    4a72:	b908      	cbnz	r0, 4a78 <xQueueGenericReset+0xc>
    4a74:	4b18      	ldr	r3, [pc, #96]	; (4ad8 <xQueueGenericReset+0x6c>)
    4a76:	4798      	blx	r3
	taskENTER_CRITICAL();
    4a78:	4b18      	ldr	r3, [pc, #96]	; (4adc <xQueueGenericReset+0x70>)
    4a7a:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4a7c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    4a7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4a80:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    4a82:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4a84:	4343      	muls	r3, r0
    4a86:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4a88:	1a1b      	subs	r3, r3, r0
    4a8a:	4413      	add	r3, r2
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4a8c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4a8e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4a90:	2100      	movs	r1, #0
		pxQueue->cRxLock           = queueUNLOCKED;
    4a92:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4a94:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock           = queueUNLOCKED;
    4a96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    4a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    4a9e:	b97d      	cbnz	r5, 4ac0 <xQueueGenericReset+0x54>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4aa0:	6923      	ldr	r3, [r4, #16]
    4aa2:	b1a3      	cbz	r3, 4ace <xQueueGenericReset+0x62>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4aa4:	f104 0010 	add.w	r0, r4, #16
    4aa8:	4b0d      	ldr	r3, [pc, #52]	; (4ae0 <xQueueGenericReset+0x74>)
    4aaa:	4798      	blx	r3
    4aac:	b178      	cbz	r0, 4ace <xQueueGenericReset+0x62>
					queueYIELD_IF_USING_PREEMPTION();
    4aae:	4b0d      	ldr	r3, [pc, #52]	; (4ae4 <xQueueGenericReset+0x78>)
    4ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ab4:	601a      	str	r2, [r3, #0]
    4ab6:	f3bf 8f4f 	dsb	sy
    4aba:	f3bf 8f6f 	isb	sy
    4abe:	e006      	b.n	4ace <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    4ac0:	f104 0010 	add.w	r0, r4, #16
    4ac4:	4d08      	ldr	r5, [pc, #32]	; (4ae8 <xQueueGenericReset+0x7c>)
    4ac6:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4ac8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4acc:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    4ace:	4b07      	ldr	r3, [pc, #28]	; (4aec <xQueueGenericReset+0x80>)
    4ad0:	4798      	blx	r3
}
    4ad2:	2001      	movs	r0, #1
    4ad4:	bd38      	pop	{r3, r4, r5, pc}
    4ad6:	bf00      	nop
    4ad8:	0000494d 	.word	0x0000494d
    4adc:	000044d5 	.word	0x000044d5
    4ae0:	00007fa9 	.word	0x00007fa9
    4ae4:	e000ed04 	.word	0xe000ed04
    4ae8:	00004309 	.word	0x00004309
    4aec:	00004519 	.word	0x00004519

00004af0 <xQueueGenericCreate>:
{
    4af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4af2:	460d      	mov	r5, r1
    4af4:	4617      	mov	r7, r2
	configASSERT(uxQueueLength > (UBaseType_t)0);
    4af6:	4606      	mov	r6, r0
    4af8:	b940      	cbnz	r0, 4b0c <xQueueGenericCreate+0x1c>
    4afa:	f04f 0380 	mov.w	r3, #128	; 0x80
    4afe:	f383 8811 	msr	BASEPRI, r3
    4b02:	f3bf 8f6f 	isb	sy
    4b06:	f3bf 8f4f 	dsb	sy
    4b0a:	e7fe      	b.n	4b0a <xQueueGenericCreate+0x1a>
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    4b0c:	4348      	muls	r0, r1
    4b0e:	3054      	adds	r0, #84	; 0x54
    4b10:	4b0a      	ldr	r3, [pc, #40]	; (4b3c <xQueueGenericCreate+0x4c>)
    4b12:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    4b14:	4604      	mov	r4, r0
    4b16:	b178      	cbz	r0, 4b38 <xQueueGenericCreate+0x48>
	if (uxItemSize == (UBaseType_t)0) {
    4b18:	b90d      	cbnz	r5, 4b1e <xQueueGenericCreate+0x2e>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    4b1a:	6020      	str	r0, [r4, #0]
    4b1c:	e002      	b.n	4b24 <xQueueGenericCreate+0x34>
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    4b1e:	f100 0354 	add.w	r3, r0, #84	; 0x54
    4b22:	6003      	str	r3, [r0, #0]
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4b24:	4b06      	ldr	r3, [pc, #24]	; (4b40 <xQueueGenericCreate+0x50>)
	pxNewQueue->uxLength   = uxQueueLength;
    4b26:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4b28:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4b2a:	2101      	movs	r1, #1
    4b2c:	4620      	mov	r0, r4
    4b2e:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    4b30:	2300      	movs	r3, #0
		pxNewQueue->ucQueueType = ucQueueType;
    4b32:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    4b36:	64a3      	str	r3, [r4, #72]	; 0x48
}
    4b38:	4620      	mov	r0, r4
    4b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b3c:	00004391 	.word	0x00004391
    4b40:	00004a6d 	.word	0x00004a6d

00004b44 <xQueueGenericSend>:
{
    4b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b48:	b087      	sub	sp, #28
    4b4a:	468a      	mov	sl, r1
    4b4c:	9203      	str	r2, [sp, #12]
    4b4e:	461e      	mov	r6, r3
	configASSERT(pxQueue);
    4b50:	4604      	mov	r4, r0
    4b52:	b940      	cbnz	r0, 4b66 <xQueueGenericSend+0x22>
    4b54:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b58:	f383 8811 	msr	BASEPRI, r3
    4b5c:	f3bf 8f6f 	isb	sy
    4b60:	f3bf 8f4f 	dsb	sy
    4b64:	e7fe      	b.n	4b64 <xQueueGenericSend+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4b66:	b951      	cbnz	r1, 4b7e <xQueueGenericSend+0x3a>
    4b68:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4b6a:	b143      	cbz	r3, 4b7e <xQueueGenericSend+0x3a>
    4b6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b70:	f383 8811 	msr	BASEPRI, r3
    4b74:	f3bf 8f6f 	isb	sy
    4b78:	f3bf 8f4f 	dsb	sy
    4b7c:	e7fe      	b.n	4b7c <xQueueGenericSend+0x38>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4b7e:	2e02      	cmp	r6, #2
    4b80:	d10b      	bne.n	4b9a <xQueueGenericSend+0x56>
    4b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4b84:	2b01      	cmp	r3, #1
    4b86:	d008      	beq.n	4b9a <xQueueGenericSend+0x56>
    4b88:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b8c:	f383 8811 	msr	BASEPRI, r3
    4b90:	f3bf 8f6f 	isb	sy
    4b94:	f3bf 8f4f 	dsb	sy
    4b98:	e7fe      	b.n	4b98 <xQueueGenericSend+0x54>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4b9a:	4b45      	ldr	r3, [pc, #276]	; (4cb0 <xQueueGenericSend+0x16c>)
    4b9c:	4798      	blx	r3
    4b9e:	b910      	cbnz	r0, 4ba6 <xQueueGenericSend+0x62>
    4ba0:	9b03      	ldr	r3, [sp, #12]
    4ba2:	b10b      	cbz	r3, 4ba8 <xQueueGenericSend+0x64>
    4ba4:	e078      	b.n	4c98 <xQueueGenericSend+0x154>
    4ba6:	2300      	movs	r3, #0
		taskENTER_CRITICAL();
    4ba8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4ce0 <xQueueGenericSend+0x19c>
					portYIELD_WITHIN_API();
    4bac:	f8df b114 	ldr.w	fp, [pc, #276]	; 4cc4 <xQueueGenericSend+0x180>
    4bb0:	46c8      	mov	r8, r9
    4bb2:	9301      	str	r3, [sp, #4]
		taskENTER_CRITICAL();
    4bb4:	47c8      	blx	r9
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4bb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4bba:	4f3e      	ldr	r7, [pc, #248]	; (4cb4 <xQueueGenericSend+0x170>)
    4bbc:	4291      	cmp	r1, r2
    4bbe:	d302      	bcc.n	4bc6 <xQueueGenericSend+0x82>
    4bc0:	2e02      	cmp	r6, #2
    4bc2:	9b01      	ldr	r3, [sp, #4]
    4bc4:	d11d      	bne.n	4c02 <xQueueGenericSend+0xbe>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4bc6:	4b3c      	ldr	r3, [pc, #240]	; (4cb8 <xQueueGenericSend+0x174>)
    4bc8:	4632      	mov	r2, r6
    4bca:	4651      	mov	r1, sl
    4bcc:	4620      	mov	r0, r4
    4bce:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    4bd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4bd2:	b123      	cbz	r3, 4bde <xQueueGenericSend+0x9a>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4bd4:	4631      	mov	r1, r6
    4bd6:	4620      	mov	r0, r4
    4bd8:	4b38      	ldr	r3, [pc, #224]	; (4cbc <xQueueGenericSend+0x178>)
    4bda:	4798      	blx	r3
    4bdc:	e005      	b.n	4bea <xQueueGenericSend+0xa6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4be0:	b11b      	cbz	r3, 4bea <xQueueGenericSend+0xa6>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4be2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4be6:	4b36      	ldr	r3, [pc, #216]	; (4cc0 <xQueueGenericSend+0x17c>)
    4be8:	4798      	blx	r3
						} else if (xYieldRequired != pdFALSE) {
    4bea:	b138      	cbz	r0, 4bfc <xQueueGenericSend+0xb8>
							queueYIELD_IF_USING_PREEMPTION();
    4bec:	4b35      	ldr	r3, [pc, #212]	; (4cc4 <xQueueGenericSend+0x180>)
    4bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4bf2:	601a      	str	r2, [r3, #0]
    4bf4:	f3bf 8f4f 	dsb	sy
    4bf8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4bfc:	47b8      	blx	r7
				return pdPASS;
    4bfe:	2001      	movs	r0, #1
    4c00:	e053      	b.n	4caa <xQueueGenericSend+0x166>
				if (xTicksToWait == (TickType_t)0) {
    4c02:	9d03      	ldr	r5, [sp, #12]
    4c04:	b915      	cbnz	r5, 4c0c <xQueueGenericSend+0xc8>
					taskEXIT_CRITICAL();
    4c06:	47b8      	blx	r7
					return errQUEUE_FULL;
    4c08:	4628      	mov	r0, r5
    4c0a:	e04e      	b.n	4caa <xQueueGenericSend+0x166>
				} else if (xEntryTimeSet == pdFALSE) {
    4c0c:	b913      	cbnz	r3, 4c14 <xQueueGenericSend+0xd0>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4c0e:	a804      	add	r0, sp, #16
    4c10:	4b2d      	ldr	r3, [pc, #180]	; (4cc8 <xQueueGenericSend+0x184>)
    4c12:	4798      	blx	r3
		taskEXIT_CRITICAL();
    4c14:	47b8      	blx	r7
		vTaskSuspendAll();
    4c16:	4b2d      	ldr	r3, [pc, #180]	; (4ccc <xQueueGenericSend+0x188>)
    4c18:	4d2d      	ldr	r5, [pc, #180]	; (4cd0 <xQueueGenericSend+0x18c>)
    4c1a:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4c1c:	47c0      	blx	r8
    4c1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4c22:	2bff      	cmp	r3, #255	; 0xff
    4c24:	bf04      	itt	eq
    4c26:	2300      	moveq	r3, #0
    4c28:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4c2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4c30:	2bff      	cmp	r3, #255	; 0xff
    4c32:	bf04      	itt	eq
    4c34:	2300      	moveq	r3, #0
    4c36:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4c3a:	47b8      	blx	r7
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4c3c:	a903      	add	r1, sp, #12
    4c3e:	a804      	add	r0, sp, #16
    4c40:	4b24      	ldr	r3, [pc, #144]	; (4cd4 <xQueueGenericSend+0x190>)
    4c42:	4f25      	ldr	r7, [pc, #148]	; (4cd8 <xQueueGenericSend+0x194>)
    4c44:	4798      	blx	r3
    4c46:	bb10      	cbnz	r0, 4c8e <xQueueGenericSend+0x14a>
	taskENTER_CRITICAL();
    4c48:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    4c4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4c4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    4c4e:	4919      	ldr	r1, [pc, #100]	; (4cb4 <xQueueGenericSend+0x170>)
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    4c50:	9202      	str	r2, [sp, #8]
    4c52:	9301      	str	r3, [sp, #4]
	taskEXIT_CRITICAL();
    4c54:	4788      	blx	r1
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    4c56:	9b01      	ldr	r3, [sp, #4]
    4c58:	9a02      	ldr	r2, [sp, #8]
    4c5a:	429a      	cmp	r2, r3
    4c5c:	d113      	bne.n	4c86 <xQueueGenericSend+0x142>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    4c5e:	9903      	ldr	r1, [sp, #12]
    4c60:	4b1e      	ldr	r3, [pc, #120]	; (4cdc <xQueueGenericSend+0x198>)
    4c62:	f104 0010 	add.w	r0, r4, #16
    4c66:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4c68:	4620      	mov	r0, r4
    4c6a:	47b8      	blx	r7
				if (xTaskResumeAll() == pdFALSE) {
    4c6c:	47a8      	blx	r5
    4c6e:	b108      	cbz	r0, 4c74 <xQueueGenericSend+0x130>
    4c70:	2301      	movs	r3, #1
    4c72:	e79e      	b.n	4bb2 <xQueueGenericSend+0x6e>
					portYIELD_WITHIN_API();
    4c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4c78:	f8cb 3000 	str.w	r3, [fp]
    4c7c:	f3bf 8f4f 	dsb	sy
    4c80:	f3bf 8f6f 	isb	sy
    4c84:	e7f4      	b.n	4c70 <xQueueGenericSend+0x12c>
				prvUnlockQueue(pxQueue);
    4c86:	4620      	mov	r0, r4
    4c88:	47b8      	blx	r7
				(void)xTaskResumeAll();
    4c8a:	47a8      	blx	r5
    4c8c:	e7f0      	b.n	4c70 <xQueueGenericSend+0x12c>
			prvUnlockQueue(pxQueue);
    4c8e:	4620      	mov	r0, r4
    4c90:	47b8      	blx	r7
			(void)xTaskResumeAll();
    4c92:	47a8      	blx	r5
			return errQUEUE_FULL;
    4c94:	2000      	movs	r0, #0
    4c96:	e008      	b.n	4caa <xQueueGenericSend+0x166>
    4c98:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c9c:	f383 8811 	msr	BASEPRI, r3
    4ca0:	f3bf 8f6f 	isb	sy
    4ca4:	f3bf 8f4f 	dsb	sy
    4ca8:	e7fe      	b.n	4ca8 <xQueueGenericSend+0x164>
}
    4caa:	b007      	add	sp, #28
    4cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cb0:	000080cd 	.word	0x000080cd
    4cb4:	00004519 	.word	0x00004519
    4cb8:	000048a5 	.word	0x000048a5
    4cbc:	00004961 	.word	0x00004961
    4cc0:	00007fa9 	.word	0x00007fa9
    4cc4:	e000ed04 	.word	0xe000ed04
    4cc8:	00008025 	.word	0x00008025
    4ccc:	00007cb5 	.word	0x00007cb5
    4cd0:	00007dcd 	.word	0x00007dcd
    4cd4:	00008039 	.word	0x00008039
    4cd8:	000049d5 	.word	0x000049d5
    4cdc:	00007f29 	.word	0x00007f29
    4ce0:	000044d5 	.word	0x000044d5

00004ce4 <xQueueGenericSendFromISR>:
{
    4ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ce8:	4688      	mov	r8, r1
    4cea:	4691      	mov	r9, r2
    4cec:	461f      	mov	r7, r3
	configASSERT(pxQueue);
    4cee:	4604      	mov	r4, r0
    4cf0:	b940      	cbnz	r0, 4d04 <xQueueGenericSendFromISR+0x20>
    4cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cf6:	f383 8811 	msr	BASEPRI, r3
    4cfa:	f3bf 8f6f 	isb	sy
    4cfe:	f3bf 8f4f 	dsb	sy
    4d02:	e7fe      	b.n	4d02 <xQueueGenericSendFromISR+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4d04:	b951      	cbnz	r1, 4d1c <xQueueGenericSendFromISR+0x38>
    4d06:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4d08:	b143      	cbz	r3, 4d1c <xQueueGenericSendFromISR+0x38>
    4d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d0e:	f383 8811 	msr	BASEPRI, r3
    4d12:	f3bf 8f6f 	isb	sy
    4d16:	f3bf 8f4f 	dsb	sy
    4d1a:	e7fe      	b.n	4d1a <xQueueGenericSendFromISR+0x36>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4d1c:	2f02      	cmp	r7, #2
    4d1e:	d10b      	bne.n	4d38 <xQueueGenericSendFromISR+0x54>
    4d20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4d22:	2b01      	cmp	r3, #1
    4d24:	d008      	beq.n	4d38 <xQueueGenericSendFromISR+0x54>
    4d26:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d2a:	f383 8811 	msr	BASEPRI, r3
    4d2e:	f3bf 8f6f 	isb	sy
    4d32:	f3bf 8f4f 	dsb	sy
    4d36:	e7fe      	b.n	4d36 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4d38:	4b1d      	ldr	r3, [pc, #116]	; (4db0 <xQueueGenericSendFromISR+0xcc>)
    4d3a:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4d3c:	f3ef 8611 	mrs	r6, BASEPRI
    4d40:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d44:	f383 8811 	msr	BASEPRI, r3
    4d48:	f3bf 8f6f 	isb	sy
    4d4c:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4d54:	429a      	cmp	r2, r3
    4d56:	d301      	bcc.n	4d5c <xQueueGenericSendFromISR+0x78>
    4d58:	2f02      	cmp	r7, #2
    4d5a:	d124      	bne.n	4da6 <xQueueGenericSendFromISR+0xc2>
			const int8_t cTxLock = pxQueue->cTxLock;
    4d5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4d60:	4b14      	ldr	r3, [pc, #80]	; (4db4 <xQueueGenericSendFromISR+0xd0>)
			const int8_t cTxLock = pxQueue->cTxLock;
    4d62:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4d64:	463a      	mov	r2, r7
    4d66:	4641      	mov	r1, r8
    4d68:	4620      	mov	r0, r4
    4d6a:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    4d6c:	1c6b      	adds	r3, r5, #1
    4d6e:	d114      	bne.n	4d9a <xQueueGenericSendFromISR+0xb6>
					if (pxQueue->pxQueueSetContainer != NULL) {
    4d70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4d72:	b15b      	cbz	r3, 4d8c <xQueueGenericSendFromISR+0xa8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4d74:	4639      	mov	r1, r7
    4d76:	4620      	mov	r0, r4
    4d78:	4b0f      	ldr	r3, [pc, #60]	; (4db8 <xQueueGenericSendFromISR+0xd4>)
    4d7a:	4798      	blx	r3
    4d7c:	b188      	cbz	r0, 4da2 <xQueueGenericSendFromISR+0xbe>
							if (pxHigherPriorityTaskWoken != NULL) {
    4d7e:	f1b9 0f00 	cmp.w	r9, #0
    4d82:	d00e      	beq.n	4da2 <xQueueGenericSendFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4d84:	2001      	movs	r0, #1
    4d86:	f8c9 0000 	str.w	r0, [r9]
    4d8a:	e00d      	b.n	4da8 <xQueueGenericSendFromISR+0xc4>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4d8e:	b143      	cbz	r3, 4da2 <xQueueGenericSendFromISR+0xbe>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4d90:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4d94:	4b09      	ldr	r3, [pc, #36]	; (4dbc <xQueueGenericSendFromISR+0xd8>)
    4d96:	4798      	blx	r3
    4d98:	e7f0      	b.n	4d7c <xQueueGenericSendFromISR+0x98>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4d9a:	3501      	adds	r5, #1
    4d9c:	b26d      	sxtb	r5, r5
    4d9e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4da2:	2001      	movs	r0, #1
    4da4:	e000      	b.n	4da8 <xQueueGenericSendFromISR+0xc4>
			xReturn = errQUEUE_FULL;
    4da6:	2000      	movs	r0, #0
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4da8:	f386 8811 	msr	BASEPRI, r6
}
    4dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4db0:	00004719 	.word	0x00004719
    4db4:	000048a5 	.word	0x000048a5
    4db8:	00004961 	.word	0x00004961
    4dbc:	00007fa9 	.word	0x00007fa9

00004dc0 <xQueueReceive>:
{
    4dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dc4:	b085      	sub	sp, #20
    4dc6:	4689      	mov	r9, r1
    4dc8:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    4dca:	4604      	mov	r4, r0
    4dcc:	b940      	cbnz	r0, 4de0 <xQueueReceive+0x20>
	__asm volatile("	mov %0, %1												\n"
    4dce:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dd2:	f383 8811 	msr	BASEPRI, r3
    4dd6:	f3bf 8f6f 	isb	sy
    4dda:	f3bf 8f4f 	dsb	sy
    4dde:	e7fe      	b.n	4dde <xQueueReceive+0x1e>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    4de0:	b951      	cbnz	r1, 4df8 <xQueueReceive+0x38>
    4de2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4de4:	b143      	cbz	r3, 4df8 <xQueueReceive+0x38>
    4de6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dea:	f383 8811 	msr	BASEPRI, r3
    4dee:	f3bf 8f6f 	isb	sy
    4df2:	f3bf 8f4f 	dsb	sy
    4df6:	e7fe      	b.n	4df6 <xQueueReceive+0x36>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4df8:	4b3d      	ldr	r3, [pc, #244]	; (4ef0 <xQueueReceive+0x130>)
    4dfa:	4798      	blx	r3
    4dfc:	b910      	cbnz	r0, 4e04 <xQueueReceive+0x44>
    4dfe:	9e01      	ldr	r6, [sp, #4]
    4e00:	b10e      	cbz	r6, 4e06 <xQueueReceive+0x46>
    4e02:	e069      	b.n	4ed8 <xQueueReceive+0x118>
    4e04:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    4e06:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4f20 <xQueueReceive+0x160>
					portYIELD_WITHIN_API();
    4e0a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 4f00 <xQueueReceive+0x140>
    4e0e:	46c3      	mov	fp, r8
		taskENTER_CRITICAL();
    4e10:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4e12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    4e14:	4f37      	ldr	r7, [pc, #220]	; (4ef4 <xQueueReceive+0x134>)
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4e16:	b1bd      	cbz	r5, 4e48 <xQueueReceive+0x88>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    4e18:	4b37      	ldr	r3, [pc, #220]	; (4ef8 <xQueueReceive+0x138>)
    4e1a:	4649      	mov	r1, r9
    4e1c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4e1e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    4e20:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4e22:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4e24:	6923      	ldr	r3, [r4, #16]
    4e26:	b163      	cbz	r3, 4e42 <xQueueReceive+0x82>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4e28:	f104 0010 	add.w	r0, r4, #16
    4e2c:	4b33      	ldr	r3, [pc, #204]	; (4efc <xQueueReceive+0x13c>)
    4e2e:	4798      	blx	r3
    4e30:	b138      	cbz	r0, 4e42 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
    4e32:	4b33      	ldr	r3, [pc, #204]	; (4f00 <xQueueReceive+0x140>)
    4e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4e38:	601a      	str	r2, [r3, #0]
    4e3a:	f3bf 8f4f 	dsb	sy
    4e3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4e42:	47b8      	blx	r7
				return pdPASS;
    4e44:	2001      	movs	r0, #1
    4e46:	e050      	b.n	4eea <xQueueReceive+0x12a>
				if (xTicksToWait == (TickType_t)0) {
    4e48:	9d01      	ldr	r5, [sp, #4]
    4e4a:	b915      	cbnz	r5, 4e52 <xQueueReceive+0x92>
					taskEXIT_CRITICAL();
    4e4c:	47b8      	blx	r7
					return errQUEUE_EMPTY;
    4e4e:	4628      	mov	r0, r5
    4e50:	e04b      	b.n	4eea <xQueueReceive+0x12a>
				} else if (xEntryTimeSet == pdFALSE) {
    4e52:	b916      	cbnz	r6, 4e5a <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4e54:	a802      	add	r0, sp, #8
    4e56:	4b2b      	ldr	r3, [pc, #172]	; (4f04 <xQueueReceive+0x144>)
    4e58:	4798      	blx	r3
		taskEXIT_CRITICAL();
    4e5a:	47b8      	blx	r7
		vTaskSuspendAll();
    4e5c:	4b2a      	ldr	r3, [pc, #168]	; (4f08 <xQueueReceive+0x148>)
    4e5e:	4e2b      	ldr	r6, [pc, #172]	; (4f0c <xQueueReceive+0x14c>)
    4e60:	4d2b      	ldr	r5, [pc, #172]	; (4f10 <xQueueReceive+0x150>)
    4e62:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4e64:	47d8      	blx	fp
    4e66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4e6a:	2bff      	cmp	r3, #255	; 0xff
    4e6c:	bf04      	itt	eq
    4e6e:	2300      	moveq	r3, #0
    4e70:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4e74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4e78:	2bff      	cmp	r3, #255	; 0xff
    4e7a:	bf04      	itt	eq
    4e7c:	2300      	moveq	r3, #0
    4e7e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4e82:	47b8      	blx	r7
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4e84:	a901      	add	r1, sp, #4
    4e86:	a802      	add	r0, sp, #8
    4e88:	4b22      	ldr	r3, [pc, #136]	; (4f14 <xQueueReceive+0x154>)
    4e8a:	4f23      	ldr	r7, [pc, #140]	; (4f18 <xQueueReceive+0x158>)
    4e8c:	4798      	blx	r3
    4e8e:	b9d0      	cbnz	r0, 4ec6 <xQueueReceive+0x106>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4e90:	4620      	mov	r0, r4
    4e92:	47b8      	blx	r7
    4e94:	b198      	cbz	r0, 4ebe <xQueueReceive+0xfe>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4e96:	9901      	ldr	r1, [sp, #4]
    4e98:	4b20      	ldr	r3, [pc, #128]	; (4f1c <xQueueReceive+0x15c>)
    4e9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4e9e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4ea0:	4620      	mov	r0, r4
    4ea2:	47b0      	blx	r6
				if (xTaskResumeAll() == pdFALSE) {
    4ea4:	47a8      	blx	r5
    4ea6:	b108      	cbz	r0, 4eac <xQueueReceive+0xec>
    4ea8:	2601      	movs	r6, #1
    4eaa:	e7b1      	b.n	4e10 <xQueueReceive+0x50>
					portYIELD_WITHIN_API();
    4eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4eb0:	f8ca 3000 	str.w	r3, [sl]
    4eb4:	f3bf 8f4f 	dsb	sy
    4eb8:	f3bf 8f6f 	isb	sy
    4ebc:	e7f4      	b.n	4ea8 <xQueueReceive+0xe8>
				prvUnlockQueue(pxQueue);
    4ebe:	4620      	mov	r0, r4
    4ec0:	47b0      	blx	r6
				(void)xTaskResumeAll();
    4ec2:	47a8      	blx	r5
    4ec4:	e7f0      	b.n	4ea8 <xQueueReceive+0xe8>
			prvUnlockQueue(pxQueue);
    4ec6:	4620      	mov	r0, r4
    4ec8:	47b0      	blx	r6
			(void)xTaskResumeAll();
    4eca:	47a8      	blx	r5
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4ecc:	4620      	mov	r0, r4
    4ece:	47b8      	blx	r7
    4ed0:	2800      	cmp	r0, #0
    4ed2:	d0e9      	beq.n	4ea8 <xQueueReceive+0xe8>
				return errQUEUE_EMPTY;
    4ed4:	2000      	movs	r0, #0
    4ed6:	e008      	b.n	4eea <xQueueReceive+0x12a>
    4ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4edc:	f383 8811 	msr	BASEPRI, r3
    4ee0:	f3bf 8f6f 	isb	sy
    4ee4:	f3bf 8f4f 	dsb	sy
    4ee8:	e7fe      	b.n	4ee8 <xQueueReceive+0x128>
}
    4eea:	b005      	add	sp, #20
    4eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ef0:	000080cd 	.word	0x000080cd
    4ef4:	00004519 	.word	0x00004519
    4ef8:	0000491d 	.word	0x0000491d
    4efc:	00007fa9 	.word	0x00007fa9
    4f00:	e000ed04 	.word	0xe000ed04
    4f04:	00008025 	.word	0x00008025
    4f08:	00007cb5 	.word	0x00007cb5
    4f0c:	000049d5 	.word	0x000049d5
    4f10:	00007dcd 	.word	0x00007dcd
    4f14:	00008039 	.word	0x00008039
    4f18:	00004885 	.word	0x00004885
    4f1c:	00007f29 	.word	0x00007f29
    4f20:	000044d5 	.word	0x000044d5

00004f24 <vQueueWaitForMessageRestricted>:
{
    4f24:	b570      	push	{r4, r5, r6, lr}
    4f26:	4604      	mov	r4, r0
	prvLockQueue(pxQueue);
    4f28:	4b10      	ldr	r3, [pc, #64]	; (4f6c <vQueueWaitForMessageRestricted+0x48>)
{
    4f2a:	460d      	mov	r5, r1
    4f2c:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4f2e:	4798      	blx	r3
    4f30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4f34:	2bff      	cmp	r3, #255	; 0xff
    4f36:	bf04      	itt	eq
    4f38:	2300      	moveq	r3, #0
    4f3a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4f3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4f42:	2bff      	cmp	r3, #255	; 0xff
    4f44:	bf04      	itt	eq
    4f46:	2300      	moveq	r3, #0
    4f48:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4f4c:	4b08      	ldr	r3, [pc, #32]	; (4f70 <vQueueWaitForMessageRestricted+0x4c>)
    4f4e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    4f50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4f52:	b92b      	cbnz	r3, 4f60 <vQueueWaitForMessageRestricted+0x3c>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    4f54:	4632      	mov	r2, r6
    4f56:	4629      	mov	r1, r5
    4f58:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4f5c:	4b05      	ldr	r3, [pc, #20]	; (4f74 <vQueueWaitForMessageRestricted+0x50>)
    4f5e:	4798      	blx	r3
	prvUnlockQueue(pxQueue);
    4f60:	4620      	mov	r0, r4
    4f62:	4b05      	ldr	r3, [pc, #20]	; (4f78 <vQueueWaitForMessageRestricted+0x54>)
}
    4f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prvUnlockQueue(pxQueue);
    4f68:	4718      	bx	r3
    4f6a:	bf00      	nop
    4f6c:	000044d5 	.word	0x000044d5
    4f70:	00004519 	.word	0x00004519
    4f74:	00007f65 	.word	0x00007f65
    4f78:	000049d5 	.word	0x000049d5

00004f7c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    4f7c:	b538      	push	{r3, r4, r5, lr}
    4f7e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    4f80:	4604      	mov	r4, r0
    4f82:	b118      	cbz	r0, 4f8c <spi_m_sync_init+0x10>
    4f84:	1c08      	adds	r0, r1, #0
    4f86:	bf18      	it	ne
    4f88:	2001      	movne	r0, #1
    4f8a:	e7ff      	b.n	4f8c <spi_m_sync_init+0x10>
    4f8c:	2240      	movs	r2, #64	; 0x40
    4f8e:	490b      	ldr	r1, [pc, #44]	; (4fbc <spi_m_sync_init+0x40>)
    4f90:	4b0b      	ldr	r3, [pc, #44]	; (4fc0 <spi_m_sync_init+0x44>)
    4f92:	f000 0001 	and.w	r0, r0, #1
    4f96:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4f98:	4620      	mov	r0, r4
	rc            = _spi_m_sync_init(&spi->dev, hw);
    4f9a:	4629      	mov	r1, r5
	spi->dev.prvt = (void *)hw;
    4f9c:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    4fa0:	4b08      	ldr	r3, [pc, #32]	; (4fc4 <spi_m_sync_init+0x48>)
    4fa2:	4798      	blx	r3

	if (rc < 0) {
    4fa4:	2800      	cmp	r0, #0
    4fa6:	db07      	blt.n	4fb8 <spi_m_sync_init+0x3c>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4fac:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    4fae:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <spi_m_sync_init+0x4c>)
    4fb0:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    4fb2:	4b06      	ldr	r3, [pc, #24]	; (4fcc <spi_m_sync_init+0x50>)
    4fb4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    4fb6:	2000      	movs	r0, #0
}
    4fb8:	bd38      	pop	{r3, r4, r5, pc}
    4fba:	bf00      	nop
    4fbc:	00008494 	.word	0x00008494
    4fc0:	0000653d 	.word	0x0000653d
    4fc4:	000066f1 	.word	0x000066f1
    4fc8:	0000504d 	.word	0x0000504d
    4fcc:	00005015 	.word	0x00005015

00004fd0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    4fd0:	b530      	push	{r4, r5, lr}
    4fd2:	460c      	mov	r4, r1
    4fd4:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    4fd6:	4605      	mov	r5, r0
    4fd8:	b118      	cbz	r0, 4fe2 <spi_m_sync_transfer+0x12>
    4fda:	1c08      	adds	r0, r1, #0
    4fdc:	bf18      	it	ne
    4fde:	2001      	movne	r0, #1
    4fe0:	e7ff      	b.n	4fe2 <spi_m_sync_transfer+0x12>
    4fe2:	22b3      	movs	r2, #179	; 0xb3
    4fe4:	4908      	ldr	r1, [pc, #32]	; (5008 <spi_m_sync_transfer+0x38>)
    4fe6:	4b09      	ldr	r3, [pc, #36]	; (500c <spi_m_sync_transfer+0x3c>)
    4fe8:	f000 0001 	and.w	r0, r0, #1
    4fec:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4fee:	6823      	ldr	r3, [r4, #0]
    4ff0:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    4ff2:	6863      	ldr	r3, [r4, #4]
    4ff4:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    4ff6:	68a3      	ldr	r3, [r4, #8]
    4ff8:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    4ffa:	a901      	add	r1, sp, #4
    4ffc:	1d28      	adds	r0, r5, #4
    4ffe:	4b04      	ldr	r3, [pc, #16]	; (5010 <spi_m_sync_transfer+0x40>)
    5000:	4798      	blx	r3
}
    5002:	b005      	add	sp, #20
    5004:	bd30      	pop	{r4, r5, pc}
    5006:	bf00      	nop
    5008:	00008494 	.word	0x00008494
    500c:	0000653d 	.word	0x0000653d
    5010:	00006851 	.word	0x00006851

00005014 <_spi_m_sync_io_write>:
{
    5014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ASSERT(io);
    5016:	4604      	mov	r4, r0
    5018:	3000      	adds	r0, #0
    501a:	bf18      	it	ne
    501c:	2001      	movne	r0, #1
{
    501e:	460e      	mov	r6, r1
    5020:	4615      	mov	r5, r2
	ASSERT(io);
    5022:	4907      	ldr	r1, [pc, #28]	; (5040 <_spi_m_sync_io_write+0x2c>)
    5024:	4b07      	ldr	r3, [pc, #28]	; (5044 <_spi_m_sync_io_write+0x30>)
    5026:	22a3      	movs	r2, #163	; 0xa3
    5028:	4798      	blx	r3
	xfer.rxbuf = 0;
    502a:	2300      	movs	r3, #0
    502c:	9302      	str	r3, [sp, #8]
	return spi_m_sync_transfer(spi, &xfer);
    502e:	a901      	add	r1, sp, #4
    5030:	f1a4 000c 	sub.w	r0, r4, #12
    5034:	4b04      	ldr	r3, [pc, #16]	; (5048 <_spi_m_sync_io_write+0x34>)
	xfer.txbuf = (uint8_t *)buf;
    5036:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    5038:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    503a:	4798      	blx	r3
}
    503c:	b004      	add	sp, #16
    503e:	bd70      	pop	{r4, r5, r6, pc}
    5040:	00008494 	.word	0x00008494
    5044:	0000653d 	.word	0x0000653d
    5048:	00004fd1 	.word	0x00004fd1

0000504c <_spi_m_sync_io_read>:
{
    504c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ASSERT(io);
    504e:	4604      	mov	r4, r0
    5050:	3000      	adds	r0, #0
    5052:	bf18      	it	ne
    5054:	2001      	movne	r0, #1
{
    5056:	460e      	mov	r6, r1
    5058:	4615      	mov	r5, r2
	ASSERT(io);
    505a:	4907      	ldr	r1, [pc, #28]	; (5078 <_spi_m_sync_io_read+0x2c>)
    505c:	4b07      	ldr	r3, [pc, #28]	; (507c <_spi_m_sync_io_read+0x30>)
    505e:	2287      	movs	r2, #135	; 0x87
    5060:	4798      	blx	r3
	xfer.txbuf = 0;
    5062:	2300      	movs	r3, #0
    5064:	9301      	str	r3, [sp, #4]
	return spi_m_sync_transfer(spi, &xfer);
    5066:	a901      	add	r1, sp, #4
    5068:	f1a4 000c 	sub.w	r0, r4, #12
    506c:	4b04      	ldr	r3, [pc, #16]	; (5080 <_spi_m_sync_io_read+0x34>)
	xfer.rxbuf = buf;
    506e:	9602      	str	r6, [sp, #8]
	xfer.size  = length;
    5070:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    5072:	4798      	blx	r3
}
    5074:	b004      	add	sp, #16
    5076:	bd70      	pop	{r4, r5, r6, pc}
    5078:	00008494 	.word	0x00008494
    507c:	0000653d 	.word	0x0000653d
    5080:	00004fd1 	.word	0x00004fd1

00005084 <composite_device_init>:
static uint8_t ctrl_buffer[64];

void composite_device_init(void)
{
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5084:	4801      	ldr	r0, [pc, #4]	; (508c <composite_device_init+0x8>)
    5086:	4b02      	ldr	r3, [pc, #8]	; (5090 <composite_device_init+0xc>)
    5088:	4718      	bx	r3
    508a:	bf00      	nop
    508c:	200009c0 	.word	0x200009c0
    5090:	0000798d 	.word	0x0000798d

00005094 <usb_init>:
}

void usb_init(void)
{

	composite_device_init();
    5094:	4b00      	ldr	r3, [pc, #0]	; (5098 <usb_init+0x4>)
    5096:	4718      	bx	r3
    5098:	00005085 	.word	0x00005085

0000509c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    509c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    509e:	6805      	ldr	r5, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    50a0:	b90d      	cbnz	r5, 50a6 <timer_add_timer_task+0xa>
		list_insert_as_head(list, new_task);
    50a2:	4b0e      	ldr	r3, [pc, #56]	; (50dc <timer_add_timer_task+0x40>)
    50a4:	e016      	b.n	50d4 <timer_add_timer_task+0x38>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    50a6:	f8d1 e008 	ldr.w	lr, [r1, #8]
    50aa:	462c      	mov	r4, r5
    50ac:	2700      	movs	r7, #0
		if (it->time_label <= time) {
    50ae:	6866      	ldr	r6, [r4, #4]
    50b0:	68a3      	ldr	r3, [r4, #8]
    50b2:	4296      	cmp	r6, r2
			time_left = it->interval - (time - it->time_label);
    50b4:	4433      	add	r3, r6
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    50b6:	bf88      	it	hi
    50b8:	3301      	addhi	r3, #1
    50ba:	1a9b      	subs	r3, r3, r2
		if (time_left >= new_task->interval)
    50bc:	4573      	cmp	r3, lr
    50be:	d204      	bcs.n	50ca <timer_add_timer_task+0x2e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    50c0:	6823      	ldr	r3, [r4, #0]
    50c2:	4627      	mov	r7, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    50c4:	b123      	cbz	r3, 50d0 <timer_add_timer_task+0x34>
    50c6:	461c      	mov	r4, r3
    50c8:	e7f1      	b.n	50ae <timer_add_timer_task+0x12>
			break;
		prev = it;
	}

	if (it == head) {
    50ca:	42ac      	cmp	r4, r5
    50cc:	d0e9      	beq.n	50a2 <timer_add_timer_task+0x6>
    50ce:	463c      	mov	r4, r7
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    50d0:	4b03      	ldr	r3, [pc, #12]	; (50e0 <timer_add_timer_task+0x44>)
    50d2:	4620      	mov	r0, r4
	}
}
    50d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    50d8:	4718      	bx	r3
    50da:	bf00      	nop
    50dc:	000064fd 	.word	0x000064fd
    50e0:	00006529 	.word	0x00006529

000050e4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    50e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    50e8:	6906      	ldr	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    50ea:	7e03      	ldrb	r3, [r0, #24]
	return (void *)list->head;
    50ec:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
    50ee:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    50f0:	07da      	lsls	r2, r3, #31
{
    50f2:	4605      	mov	r5, r0
	uint32_t                 time  = ++timer->time;
    50f4:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    50f6:	d409      	bmi.n	510c <timer_process_counted+0x28>
    50f8:	7e03      	ldrb	r3, [r0, #24]
    50fa:	079b      	lsls	r3, r3, #30
    50fc:	d406      	bmi.n	510c <timer_process_counted+0x28>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    50fe:	f100 0714 	add.w	r7, r0, #20
    5102:	f8df 8048 	ldr.w	r8, [pc, #72]	; 514c <timer_process_counted+0x68>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    5106:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5150 <timer_process_counted+0x6c>
    510a:	e01a      	b.n	5142 <timer_process_counted+0x5e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    510c:	7e2b      	ldrb	r3, [r5, #24]
    510e:	f043 0302 	orr.w	r3, r3, #2
    5112:	762b      	strb	r3, [r5, #24]
		return;
    5114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (it && ((time - it->time_label) >= it->interval)) {
    5118:	6863      	ldr	r3, [r4, #4]
    511a:	68a2      	ldr	r2, [r4, #8]
    511c:	1af3      	subs	r3, r6, r3
    511e:	4293      	cmp	r3, r2
    5120:	d311      	bcc.n	5146 <timer_process_counted+0x62>
		list_remove_head(&timer->tasks);
    5122:	4638      	mov	r0, r7
    5124:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5126:	7c23      	ldrb	r3, [r4, #16]
    5128:	2b01      	cmp	r3, #1
    512a:	d104      	bne.n	5136 <timer_process_counted+0x52>
			tmp->time_label = time;
    512c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    512e:	4632      	mov	r2, r6
    5130:	4621      	mov	r1, r4
    5132:	4638      	mov	r0, r7
    5134:	47c8      	blx	r9
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    5136:	68e3      	ldr	r3, [r4, #12]
    5138:	f8d5 a014 	ldr.w	sl, [r5, #20]
    513c:	4620      	mov	r0, r4
    513e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5140:	4654      	mov	r4, sl
	while (it && ((time - it->time_label) >= it->interval)) {
    5142:	2c00      	cmp	r4, #0
    5144:	d1e8      	bne.n	5118 <timer_process_counted+0x34>
    5146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    514a:	bf00      	nop
    514c:	00006531 	.word	0x00006531
    5150:	0000509d 	.word	0x0000509d

00005154 <timer_init>:
{
    5154:	b538      	push	{r3, r4, r5, lr}
    5156:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5158:	4604      	mov	r4, r0
    515a:	b118      	cbz	r0, 5164 <timer_init+0x10>
    515c:	1c08      	adds	r0, r1, #0
    515e:	bf18      	it	ne
    5160:	2001      	movne	r0, #1
    5162:	e7ff      	b.n	5164 <timer_init+0x10>
    5164:	223b      	movs	r2, #59	; 0x3b
    5166:	4907      	ldr	r1, [pc, #28]	; (5184 <timer_init+0x30>)
    5168:	4b07      	ldr	r3, [pc, #28]	; (5188 <timer_init+0x34>)
    516a:	f000 0001 	and.w	r0, r0, #1
    516e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    5170:	4629      	mov	r1, r5
    5172:	4620      	mov	r0, r4
    5174:	4b05      	ldr	r3, [pc, #20]	; (518c <timer_init+0x38>)
    5176:	4798      	blx	r3
	descr->time                           = 0;
    5178:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
    517a:	4b05      	ldr	r3, [pc, #20]	; (5190 <timer_init+0x3c>)
	descr->time                           = 0;
    517c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    517e:	6023      	str	r3, [r4, #0]
}
    5180:	bd38      	pop	{r3, r4, r5, pc}
    5182:	bf00      	nop
    5184:	000084b0 	.word	0x000084b0
    5188:	0000653d 	.word	0x0000653d
    518c:	00006ef9 	.word	0x00006ef9
    5190:	000050e5 	.word	0x000050e5

00005194 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    5194:	b570      	push	{r4, r5, r6, lr}
    5196:	460d      	mov	r5, r1
	ASSERT(mci && hw);
    5198:	4604      	mov	r4, r0
    519a:	b118      	cbz	r0, 51a4 <mci_sync_init+0x10>
    519c:	1c08      	adds	r0, r1, #0
    519e:	bf18      	it	ne
    51a0:	2001      	movne	r0, #1
    51a2:	e7ff      	b.n	51a4 <mci_sync_init+0x10>
    51a4:	4905      	ldr	r1, [pc, #20]	; (51bc <mci_sync_init+0x28>)
    51a6:	4b06      	ldr	r3, [pc, #24]	; (51c0 <mci_sync_init+0x2c>)
    51a8:	f000 0001 	and.w	r0, r0, #1
    51ac:	2231      	movs	r2, #49	; 0x31
    51ae:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    51b0:	4629      	mov	r1, r5
    51b2:	4620      	mov	r0, r4
    51b4:	4b03      	ldr	r3, [pc, #12]	; (51c4 <mci_sync_init+0x30>)
}
    51b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mci_sync_init(&mci->device, hw);
    51ba:	4718      	bx	r3
    51bc:	000084c7 	.word	0x000084c7
    51c0:	0000653d 	.word	0x0000653d
    51c4:	00006641 	.word	0x00006641

000051c8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    51c8:	2000      	movs	r0, #0
    51ca:	4770      	bx	lr

000051cc <_usb_d_dev_wait_dfll_rdy>:
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    51cc:	4b08      	ldr	r3, [pc, #32]	; (51f0 <_usb_d_dev_wait_dfll_rdy+0x24>)
    51ce:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    51d2:	07d2      	lsls	r2, r2, #31
    51d4:	d506      	bpl.n	51e4 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    51d6:	691a      	ldr	r2, [r3, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    51d8:	f402 6210 	and.w	r2, r2, #2304	; 0x900
    51dc:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    51e0:	d1f9      	bne.n	51d6 <_usb_d_dev_wait_dfll_rdy+0xa>
    51e2:	4770      	bx	lr
    51e4:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    51e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
    51ea:	2a00      	cmp	r2, #0
    51ec:	d0fa      	beq.n	51e4 <_usb_d_dev_wait_dfll_rdy+0x18>
    51ee:	4770      	bx	lr
    51f0:	40001000 	.word	0x40001000

000051f4 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    51f4:	b110      	cbz	r0, 51fc <_usb_d_dev_ept+0x8>
    51f6:	b109      	cbz	r1, 51fc <_usb_d_dev_ept+0x8>
    51f8:	3002      	adds	r0, #2
    51fa:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    51fc:	4b02      	ldr	r3, [pc, #8]	; (5208 <_usb_d_dev_ept+0x14>)
    51fe:	2214      	movs	r2, #20
    5200:	fb02 3000 	mla	r0, r2, r0, r3
}
    5204:	4410      	add	r0, r2
    5206:	4770      	bx	lr
    5208:	20000a00 	.word	0x20000a00

0000520c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    520c:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    520e:	7cc4      	ldrb	r4, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5210:	7c83      	ldrb	r3, [r0, #18]

	if (!is_ctrl) {
    5212:	f004 0207 	and.w	r2, r4, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5216:	f003 030f 	and.w	r3, r3, #15
	if (!is_ctrl) {
    521a:	2a01      	cmp	r2, #1
    521c:	ea4f 1143 	mov.w	r1, r3, lsl #5
    5220:	f103 0208 	add.w	r2, r3, #8
    5224:	d00a      	beq.n	523c <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5226:	0152      	lsls	r2, r2, #5
    5228:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    522c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5230:	2310      	movs	r3, #16
    5232:	71d3      	strb	r3, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    5234:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    5238:	bc30      	pop	{r4, r5}
    523a:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    523c:	0665      	lsls	r5, r4, #25
    523e:	d50b      	bpl.n	5258 <_usb_d_dev_handle_setup+0x4c>
    5240:	015b      	lsls	r3, r3, #5
		ept->flags.bits.is_busy = 0;
    5242:	f36f 1486 	bfc	r4, #6, #1
    5246:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    524a:	74c4      	strb	r4, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    524c:	2480      	movs	r4, #128	; 0x80
    524e:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5252:	2440      	movs	r4, #64	; 0x40
    5254:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    5258:	7cc3      	ldrb	r3, [r0, #19]
    525a:	f36f 03c3 	bfc	r3, #3, #1
    525e:	74c3      	strb	r3, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    5260:	4b09      	ldr	r3, [pc, #36]	; (5288 <_usb_d_dev_handle_setup+0x7c>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5262:	0152      	lsls	r2, r2, #5
    5264:	185c      	adds	r4, r3, r1
    5266:	2500      	movs	r5, #0
    5268:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    526c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    5270:	f884 50d2 	strb.w	r5, [r4, #210]	; 0xd2
    5274:	f884 50e2 	strb.w	r5, [r4, #226]	; 0xe2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5278:	246f      	movs	r4, #111	; 0x6f
    527a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    527c:	f881 4108 	strb.w	r4, [r1, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
    5280:	689b      	ldr	r3, [r3, #8]
    5282:	7c80      	ldrb	r0, [r0, #18]
}
    5284:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    5286:	4718      	bx	r3
    5288:	20000a00 	.word	0x20000a00

0000528c <_usb_d_dev_handle_stall>:
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    528c:	2320      	movs	r3, #32
    528e:	fa03 f101 	lsl.w	r1, r3, r1
    5292:	7c83      	ldrb	r3, [r0, #18]
    5294:	f003 030f 	and.w	r3, r3, #15
    5298:	015b      	lsls	r3, r3, #5
    529a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    529e:	b2c9      	uxtb	r1, r1
    52a0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    52a4:	4b02      	ldr	r3, [pc, #8]	; (52b0 <_usb_d_dev_handle_stall+0x24>)
    52a6:	6882      	ldr	r2, [r0, #8]
    52a8:	691b      	ldr	r3, [r3, #16]
    52aa:	7c80      	ldrb	r0, [r0, #18]
    52ac:	2101      	movs	r1, #1
    52ae:	4718      	bx	r3
    52b0:	20000a00 	.word	0x20000a00

000052b4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    52b4:	4602      	mov	r2, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    52b6:	7c80      	ldrb	r0, [r0, #18]
    52b8:	28ff      	cmp	r0, #255	; 0xff
    52ba:	d00a      	beq.n	52d2 <_usb_d_dev_trans_done+0x1e>
    52bc:	7cd3      	ldrb	r3, [r2, #19]
    52be:	f013 0f40 	tst.w	r3, #64	; 0x40
    52c2:	d006      	beq.n	52d2 <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    52c4:	f36f 1386 	bfc	r3, #6, #1
    52c8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    52ca:	4b02      	ldr	r3, [pc, #8]	; (52d4 <_usb_d_dev_trans_done+0x20>)
    52cc:	6892      	ldr	r2, [r2, #8]
    52ce:	691b      	ldr	r3, [r3, #16]
    52d0:	4718      	bx	r3
    52d2:	4770      	bx	lr
    52d4:	20000a00 	.word	0x20000a00

000052d8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    52d8:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    52da:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    52dc:	4c15      	ldr	r4, [pc, #84]	; (5334 <_usb_d_dev_trans_stop+0x5c>)
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    52de:	2bff      	cmp	r3, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    52e0:	8824      	ldrh	r4, [r4, #0]
    52e2:	f8ad 4004 	strh.w	r4, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    52e6:	d021      	beq.n	532c <_usb_d_dev_trans_stop+0x54>
    52e8:	7cc4      	ldrb	r4, [r0, #19]
    52ea:	0664      	lsls	r4, r4, #25
    52ec:	d51e      	bpl.n	532c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    52ee:	f003 030f 	and.w	r3, r3, #15
    52f2:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    52f6:	0165      	lsls	r5, r4, #5
    52f8:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
		return;
	}
	/* Stop transfer */
	if (dir) {
    52fc:	b111      	cbz	r1, 5304 <_usb_d_dev_trans_stop+0x2c>
    52fe:	2680      	movs	r6, #128	; 0x80
    5300:	712e      	strb	r6, [r5, #4]
    5302:	e001      	b.n	5308 <_usb_d_dev_trans_stop+0x30>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5304:	2640      	movs	r6, #64	; 0x40
    5306:	716e      	strb	r6, [r5, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    5308:	ad02      	add	r5, sp, #8
    530a:	440d      	add	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    530c:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    530e:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5310:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5314:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5318:	f815 1c04 	ldrb.w	r1, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    531c:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    531e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    5322:	4b05      	ldr	r3, [pc, #20]	; (5338 <_usb_d_dev_trans_stop+0x60>)
    5324:	4611      	mov	r1, r2
}
    5326:	b003      	add	sp, #12
    5328:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    532a:	4718      	bx	r3
}
    532c:	b003      	add	sp, #12
    532e:	bc70      	pop	{r4, r5, r6}
    5330:	4770      	bx	lr
    5332:	bf00      	nop
    5334:	000084e4 	.word	0x000084e4
    5338:	000052b5 	.word	0x000052b5

0000533c <_usb_d_dev_handle_trfail>:
{
    533c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    533e:	4b36      	ldr	r3, [pc, #216]	; (5418 <_usb_d_dev_handle_trfail+0xdc>)
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5340:	7c87      	ldrb	r7, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    5342:	881b      	ldrh	r3, [r3, #0]
    5344:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5348:	f007 070f 	and.w	r7, r7, #15
    534c:	f107 0308 	add.w	r3, r7, #8

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5350:	015d      	lsls	r5, r3, #5
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    5352:	4c32      	ldr	r4, [pc, #200]	; (541c <_usb_d_dev_handle_trfail+0xe0>)
    5354:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    5358:	017a      	lsls	r2, r7, #5
    535a:	4414      	add	r4, r2
    535c:	782e      	ldrb	r6, [r5, #0]
	uint8_t            eptype
    535e:	b111      	cbz	r1, 5366 <_usb_d_dev_handle_trfail+0x2a>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    5360:	f3c6 1602 	ubfx	r6, r6, #4, #3
    5364:	e001      	b.n	536a <_usb_d_dev_handle_trfail+0x2e>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    5366:	f006 0607 	and.w	r6, r6, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
    536a:	eb04 1401 	add.w	r4, r4, r1, lsl #4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    536e:	2e02      	cmp	r6, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    5370:	7aa5      	ldrb	r5, [r4, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5372:	f890 e013 	ldrb.w	lr, [r0, #19]
    5376:	ae02      	add	r6, sp, #8
	st.reg = bank[bank_n].STATUS_BK.reg;
    5378:	b2ed      	uxtb	r5, r5
    537a:	440e      	add	r6, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    537c:	d115      	bne.n	53aa <_usb_d_dev_handle_trfail+0x6e>
    537e:	f015 0f01 	tst.w	r5, #1
    5382:	d012      	beq.n	53aa <_usb_d_dev_handle_trfail+0x6e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5384:	7aa5      	ldrb	r5, [r4, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5386:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5388:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    538c:	f36f 0500 	bfc	r5, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5390:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5394:	72a5      	strb	r5, [r4, #10]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    5396:	3100      	adds	r1, #0
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5398:	f816 4c04 	ldrb.w	r4, [r6, #-4]
    539c:	71dc      	strb	r4, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    539e:	bf18      	it	ne
    53a0:	2101      	movne	r1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    53a2:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    53a6:	2204      	movs	r2, #4
    53a8:	e01e      	b.n	53e8 <_usb_d_dev_handle_trfail+0xac>
	} else if (st.bit.ERRORFLOW) {
    53aa:	f005 0502 	and.w	r5, r5, #2
    53ae:	f005 0cff 	and.w	ip, r5, #255	; 0xff
    53b2:	b1f5      	cbz	r5, 53f2 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    53b4:	7aa5      	ldrb	r5, [r4, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    53b6:	015b      	lsls	r3, r3, #5
    53b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    53bc:	f36f 0541 	bfc	r5, #1, #1
    53c0:	72a5      	strb	r5, [r4, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    53c2:	f816 4c04 	ldrb.w	r4, [r6, #-4]
    53c6:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    53c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    53cc:	f00e 0307 	and.w	r3, lr, #7
    53d0:	2b01      	cmp	r3, #1
    53d2:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    53d6:	d11d      	bne.n	5414 <_usb_d_dev_handle_trfail+0xd8>
    53d8:	7cc3      	ldrb	r3, [r0, #19]
    53da:	065a      	lsls	r2, r3, #25
    53dc:	d51a      	bpl.n	5414 <_usb_d_dev_handle_trfail+0xd8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    53de:	09db      	lsrs	r3, r3, #7
    53e0:	4299      	cmp	r1, r3
    53e2:	d017      	beq.n	5414 <_usb_d_dev_handle_trfail+0xd8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    53e4:	2200      	movs	r2, #0
    53e6:	4619      	mov	r1, r3
    53e8:	4b0d      	ldr	r3, [pc, #52]	; (5420 <_usb_d_dev_handle_trfail+0xe4>)
}
    53ea:	b003      	add	sp, #12
    53ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    53f0:	4718      	bx	r3
	bank->STATUS_BK.reg     = 0;
    53f2:	480c      	ldr	r0, [pc, #48]	; (5424 <_usb_d_dev_handle_trfail+0xe8>)
    53f4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
    53f8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    53fc:	015b      	lsls	r3, r3, #5
    53fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5402:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5406:	f881 c0d2 	strb.w	ip, [r1, #210]	; 0xd2
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    540a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    540e:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5410:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
}
    5414:	b003      	add	sp, #12
    5416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5418:	000084e6 	.word	0x000084e6
    541c:	20000ac8 	.word	0x20000ac8
    5420:	000052d9 	.word	0x000052d9
    5424:	20000a00 	.word	0x20000a00

00005428 <_usb_d_dev_reset_epts>:
{
    5428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    542c:	4c09      	ldr	r4, [pc, #36]	; (5454 <_usb_d_dev_reset_epts+0x2c>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    542e:	4f0a      	ldr	r7, [pc, #40]	; (5458 <_usb_d_dev_reset_epts+0x30>)
    5430:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
		dev_inst.ep[i].ep       = 0xFF;
    5434:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    5436:	2103      	movs	r1, #3
    5438:	4620      	mov	r0, r4
    543a:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    543c:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    543e:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    5440:	74e1      	strb	r1, [r4, #19]
    5442:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    5444:	42ac      	cmp	r4, r5
    5446:	d1f6      	bne.n	5436 <_usb_d_dev_reset_epts+0xe>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    5448:	2260      	movs	r2, #96	; 0x60
    544a:	4804      	ldr	r0, [pc, #16]	; (545c <_usb_d_dev_reset_epts+0x34>)
    544c:	4b04      	ldr	r3, [pc, #16]	; (5460 <_usb_d_dev_reset_epts+0x38>)
}
    544e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    5452:	4718      	bx	r3
    5454:	20000a14 	.word	0x20000a14
    5458:	000052b5 	.word	0x000052b5
    545c:	20000ac8 	.word	0x20000ac8
    5460:	000082f5 	.word	0x000082f5

00005464 <_usb_d_dev_in_next>:
{
    5464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5468:	7c86      	ldrb	r6, [r0, #18]
    546a:	f006 060f 	and.w	r6, r6, #15
{
    546e:	4604      	mov	r4, r0
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    5470:	468a      	mov	sl, r1
    5472:	0175      	lsls	r5, r6, #5
    5474:	b129      	cbz	r1, 5482 <_usb_d_dev_in_next+0x1e>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5476:	4b4b      	ldr	r3, [pc, #300]	; (55a4 <_usb_d_dev_in_next+0x140>)
    5478:	442b      	add	r3, r5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    547a:	695b      	ldr	r3, [r3, #20]
    547c:	f3c3 0e0d 	ubfx	lr, r3, #0, #14
    5480:	e000      	b.n	5484 <_usb_d_dev_in_next+0x20>
    5482:	468e      	mov	lr, r1
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5484:	8a23      	ldrh	r3, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    5486:	f894 9013 	ldrb.w	r9, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    548a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    548e:	4293      	cmp	r3, r2
    5490:	bf1a      	itte	ne
    5492:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    5496:	b218      	sxthne	r0, r3
    5498:	4618      	moveq	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    549a:	f009 0907 	and.w	r9, r9, #7
	if (isr) {
    549e:	f1ba 0f00 	cmp.w	sl, #0
    54a2:	d005      	beq.n	54b0 <_usb_d_dev_in_next+0x4c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    54a4:	0172      	lsls	r2, r6, #5
    54a6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    54aa:	2302      	movs	r3, #2
    54ac:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    54b0:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    54b2:	6867      	ldr	r7, [r4, #4]
    54b4:	7ce3      	ldrb	r3, [r4, #19]
	ept->trans_count += trans_count;
    54b6:	4471      	add	r1, lr
	if (ept->trans_count < ept->trans_size) {
    54b8:	42b9      	cmp	r1, r7
	ept->trans_count += trans_count;
    54ba:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    54bc:	d22c      	bcs.n	5518 <_usb_d_dev_in_next+0xb4>
		trans_next = ept->trans_size - ept->trans_count;
    54be:	1a7f      	subs	r7, r7, r1
		if (ept->flags.bits.use_cache) {
    54c0:	f013 0f20 	tst.w	r3, #32
		trans_next = ept->trans_size - ept->trans_count;
    54c4:	b2bf      	uxth	r7, r7
    54c6:	6823      	ldr	r3, [r4, #0]
    54c8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 55b0 <_usb_d_dev_in_next+0x14c>
		if (ept->flags.bits.use_cache) {
    54cc:	d00e      	beq.n	54ec <_usb_d_dev_in_next+0x88>
			if (trans_next > ept->size) {
    54ce:	8a22      	ldrh	r2, [r4, #16]
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    54d0:	68e0      	ldr	r0, [r4, #12]
    54d2:	4297      	cmp	r7, r2
    54d4:	bf28      	it	cs
    54d6:	4617      	movcs	r7, r2
    54d8:	463a      	mov	r2, r7
    54da:	4419      	add	r1, r3
    54dc:	4b32      	ldr	r3, [pc, #200]	; (55a8 <_usb_d_dev_in_next+0x144>)
    54de:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    54e0:	eb08 0305 	add.w	r3, r8, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    54e4:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    54e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    54ea:	e009      	b.n	5500 <_usb_d_dev_in_next+0x9c>
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    54ec:	4419      	add	r1, r3
	bank->ADDR.reg          = addr;
    54ee:	eb08 0305 	add.w	r3, r8, r5
    54f2:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    54f6:	bf28      	it	cs
    54f8:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
    54fc:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    5500:	eb08 0305 	add.w	r3, r8, r5
    5504:	33d8      	adds	r3, #216	; 0xd8
    5506:	685a      	ldr	r2, [r3, #4]
    5508:	f367 020d 	bfi	r2, r7, #0, #14
    550c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    550e:	685a      	ldr	r2, [r3, #4]
    5510:	f36f 329b 	bfc	r2, #14, #14
    5514:	605a      	str	r2, [r3, #4]
    5516:	e031      	b.n	557c <_usb_d_dev_in_next+0x118>
	} else if (ept->flags.bits.need_zlp) {
    5518:	06da      	lsls	r2, r3, #27
    551a:	d50d      	bpl.n	5538 <_usb_d_dev_in_next+0xd4>
		ept->flags.bits.need_zlp = 0;
    551c:	f36f 1304 	bfc	r3, #4, #1
    5520:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    5522:	4b22      	ldr	r3, [pc, #136]	; (55ac <_usb_d_dev_in_next+0x148>)
    5524:	442b      	add	r3, r5
    5526:	685a      	ldr	r2, [r3, #4]
    5528:	f36f 020d 	bfc	r2, #0, #14
    552c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    552e:	685a      	ldr	r2, [r3, #4]
    5530:	f36f 329b 	bfc	r2, #14, #14
    5534:	605a      	str	r2, [r3, #4]
    5536:	e021      	b.n	557c <_usb_d_dev_in_next+0x118>
	if (is_ctrl) {
    5538:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    553c:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    5540:	bf0c      	ite	eq
    5542:	234b      	moveq	r3, #75	; 0x4b
    5544:	234a      	movne	r3, #74	; 0x4a
    5546:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (last_pkt == ept->size) {
    554a:	8a22      	ldrh	r2, [r4, #16]
    554c:	ea00 030e 	and.w	r3, r0, lr
    5550:	429a      	cmp	r2, r3
    5552:	d10d      	bne.n	5570 <_usb_d_dev_in_next+0x10c>
		ept->flags.bits.is_busy = 0;
    5554:	7ce3      	ldrb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    5556:	68a1      	ldr	r1, [r4, #8]
    5558:	7ca0      	ldrb	r0, [r4, #18]
		ept->flags.bits.is_busy = 0;
    555a:	f36f 1386 	bfc	r3, #6, #1
    555e:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    5560:	4b13      	ldr	r3, [pc, #76]	; (55b0 <_usb_d_dev_in_next+0x14c>)
    5562:	68db      	ldr	r3, [r3, #12]
    5564:	4798      	blx	r3
    5566:	b9d8      	cbnz	r0, 55a0 <_usb_d_dev_in_next+0x13c>
		ept->flags.bits.is_busy = 1;
    5568:	7ce3      	ldrb	r3, [r4, #19]
    556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    556e:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5570:	4620      	mov	r0, r4
    5572:	2100      	movs	r1, #0
    5574:	4b0f      	ldr	r3, [pc, #60]	; (55b4 <_usb_d_dev_in_next+0x150>)
}
    5576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    557a:	4718      	bx	r3
	if (!isr) {
    557c:	f1ba 0f00 	cmp.w	sl, #0
    5580:	d108      	bne.n	5594 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS;
    5582:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5586:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    558a:	bf0c      	ite	eq
    558c:	234e      	moveq	r3, #78	; 0x4e
    558e:	234a      	movne	r3, #74	; 0x4a
    5590:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5594:	0176      	lsls	r6, r6, #5
    5596:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    559a:	2380      	movs	r3, #128	; 0x80
    559c:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
    55a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55a4:	20000ac8 	.word	0x20000ac8
    55a8:	000081c1 	.word	0x000081c1
    55ac:	20000ad8 	.word	0x20000ad8
    55b0:	20000a00 	.word	0x20000a00
    55b4:	000052b5 	.word	0x000052b5

000055b8 <_usb_d_dev_out_next>:
{
    55b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    55bc:	7c86      	ldrb	r6, [r0, #18]
    55be:	f006 060f 	and.w	r6, r6, #15
{
    55c2:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    55c4:	4688      	mov	r8, r1
    55c6:	0175      	lsls	r5, r6, #5
    55c8:	b141      	cbz	r1, 55dc <_usb_d_dev_out_next+0x24>
    55ca:	4b64      	ldr	r3, [pc, #400]	; (575c <_usb_d_dev_out_next+0x1a4>)
    55cc:	442b      	add	r3, r5
    55ce:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    55d0:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    55d2:	f3c2 398d 	ubfx	r9, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    55d6:	f3c3 0a0d 	ubfx	sl, r3, #0, #14
    55da:	e001      	b.n	55e0 <_usb_d_dev_out_next+0x28>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    55dc:	4689      	mov	r9, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    55de:	468a      	mov	sl, r1
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    55e0:	8a27      	ldrh	r7, [r4, #16]
    55e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    55e6:	429f      	cmp	r7, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    55e8:	7ce3      	ldrb	r3, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    55ea:	bf1c      	itt	ne
    55ec:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
    55f0:	b2bf      	uxthne	r7, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    55f2:	f003 0307 	and.w	r3, r3, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    55f6:	ea0a 0b07 	and.w	fp, sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    55fa:	9301      	str	r3, [sp, #4]
	if (isr) {
    55fc:	f1b8 0f00 	cmp.w	r8, #0
    5600:	d005      	beq.n	560e <_usb_d_dev_out_next+0x56>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5602:	0173      	lsls	r3, r6, #5
    5604:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5608:	2201      	movs	r2, #1
    560a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    560e:	7ce3      	ldrb	r3, [r4, #19]
    5610:	0698      	lsls	r0, r3, #26
    5612:	d50c      	bpl.n	562e <_usb_d_dev_out_next+0x76>
    5614:	6862      	ldr	r2, [r4, #4]
    5616:	b152      	cbz	r2, 562e <_usb_d_dev_out_next+0x76>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    5618:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    561a:	6823      	ldr	r3, [r4, #0]
    561c:	68e1      	ldr	r1, [r4, #12]
    561e:	1a12      	subs	r2, r2, r0
    5620:	b292      	uxth	r2, r2
    5622:	455a      	cmp	r2, fp
    5624:	4418      	add	r0, r3
    5626:	bf28      	it	cs
    5628:	465a      	movcs	r2, fp
    562a:	4b4d      	ldr	r3, [pc, #308]	; (5760 <_usb_d_dev_out_next+0x1a8>)
    562c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    562e:	6862      	ldr	r2, [r4, #4]
    5630:	b9ca      	cbnz	r2, 5666 <_usb_d_dev_out_next+0xae>
    5632:	7ce3      	ldrb	r3, [r4, #19]
    5634:	06d9      	lsls	r1, r3, #27
    5636:	d55b      	bpl.n	56f0 <_usb_d_dev_out_next+0x138>
		ept->flags.bits.need_zlp  = 0;
    5638:	f362 1304 	bfi	r3, r2, #4, #1
	bank->ADDR.reg          = addr;
    563c:	4849      	ldr	r0, [pc, #292]	; (5764 <_usb_d_dev_out_next+0x1ac>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    563e:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.use_cache = 1;
    5640:	b2db      	uxtb	r3, r3
	bank->ADDR.reg          = addr;
    5642:	4428      	add	r0, r5
		ept->flags.bits.use_cache = 1;
    5644:	f043 0320 	orr.w	r3, r3, #32
    5648:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    564a:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    564e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5652:	6859      	ldr	r1, [r3, #4]
    5654:	8a20      	ldrh	r0, [r4, #16]
    5656:	f360 319b 	bfi	r1, r0, #14, #14
    565a:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    565c:	6859      	ldr	r1, [r3, #4]
    565e:	f362 010d 	bfi	r1, r2, #0, #14
    5662:	6059      	str	r1, [r3, #4]
    5664:	e05f      	b.n	5726 <_usb_d_dev_out_next+0x16e>
	} else if (isr && last_pkt < ept->size) {
    5666:	f1b8 0f00 	cmp.w	r8, #0
    566a:	d009      	beq.n	5680 <_usb_d_dev_out_next+0xc8>
    566c:	8a23      	ldrh	r3, [r4, #16]
    566e:	455b      	cmp	r3, fp
    5670:	d906      	bls.n	5680 <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
    5672:	7ce3      	ldrb	r3, [r4, #19]
    5674:	f36f 1304 	bfc	r3, #4, #1
    5678:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    567a:	68a3      	ldr	r3, [r4, #8]
    567c:	4453      	add	r3, sl
    567e:	e03c      	b.n	56fa <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
    5680:	68a1      	ldr	r1, [r4, #8]
    5682:	4449      	add	r1, r9
		if (ept->trans_count < ept->trans_size) {
    5684:	428a      	cmp	r2, r1
		ept->trans_count += trans_size;
    5686:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    5688:	d938      	bls.n	56fc <_usb_d_dev_out_next+0x144>
			if (ept->flags.bits.use_cache) {
    568a:	7ce0      	ldrb	r0, [r4, #19]
    568c:	4b35      	ldr	r3, [pc, #212]	; (5764 <_usb_d_dev_out_next+0x1ac>)
    568e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
			trans_next = ept->trans_size - ept->trans_count;
    5692:	1a52      	subs	r2, r2, r1
			if (ept->flags.bits.use_cache) {
    5694:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    5698:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    569a:	d007      	beq.n	56ac <_usb_d_dev_out_next+0xf4>
	bank->ADDR.reg          = addr;
    569c:	1959      	adds	r1, r3, r5
    569e:	4572      	cmp	r2, lr
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    56a0:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    56a2:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    56a6:	bf28      	it	cs
    56a8:	4672      	movcs	r2, lr
    56aa:	e013      	b.n	56d4 <_usb_d_dev_out_next+0x11c>
				if (trans_next > ept->size) {
    56ac:	4572      	cmp	r2, lr
    56ae:	d905      	bls.n	56bc <_usb_d_dev_out_next+0x104>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    56b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    56b4:	d807      	bhi.n	56c6 <_usb_d_dev_out_next+0x10e>
						trans_next -= trans_next & size_mask;
    56b6:	ea22 0207 	bic.w	r2, r2, r7
    56ba:	e006      	b.n	56ca <_usb_d_dev_out_next+0x112>
				} else if (trans_next < ept->size) {
    56bc:	d205      	bcs.n	56ca <_usb_d_dev_out_next+0x112>
					ept->flags.bits.use_cache = 1;
    56be:	f040 0020 	orr.w	r0, r0, #32
    56c2:	74e0      	strb	r0, [r4, #19]
    56c4:	e001      	b.n	56ca <_usb_d_dev_out_next+0x112>
						trans_next = USB_D_DEV_TRANS_MAX;
    56c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    56ca:	6820      	ldr	r0, [r4, #0]
    56cc:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    56ce:	1958      	adds	r0, r3, r5
    56d0:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    56d4:	442b      	add	r3, r5
    56d6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    56da:	f362 319b 	bfi	r1, r2, #14, #14
    56de:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    56e2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    56e6:	f36f 020d 	bfc	r2, #0, #14
    56ea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    56ee:	e01a      	b.n	5726 <_usb_d_dev_out_next+0x16e>
	} else if (isr && last_pkt < ept->size) {
    56f0:	f1b8 0f00 	cmp.w	r8, #0
    56f4:	d1ba      	bne.n	566c <_usb_d_dev_out_next+0xb4>
		ept->trans_count += trans_size;
    56f6:	68a3      	ldr	r3, [r4, #8]
    56f8:	444b      	add	r3, r9
    56fa:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    56fc:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    56fe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    5702:	2b01      	cmp	r3, #1
    5704:	bf0c      	ite	eq
    5706:	232d      	moveq	r3, #45	; 0x2d
    5708:	2325      	movne	r3, #37	; 0x25
    570a:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    570e:	b91e      	cbnz	r6, 5718 <_usb_d_dev_out_next+0x160>
	bank->ADDR.reg          = addr;
    5710:	4b14      	ldr	r3, [pc, #80]	; (5764 <_usb_d_dev_out_next+0x1ac>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5712:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    5714:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5718:	4b13      	ldr	r3, [pc, #76]	; (5768 <_usb_d_dev_out_next+0x1b0>)
    571a:	2100      	movs	r1, #0
    571c:	4620      	mov	r0, r4
}
    571e:	b003      	add	sp, #12
    5720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5724:	4718      	bx	r3
	if (!isr) {
    5726:	f1b8 0f00 	cmp.w	r8, #0
    572a:	d10d      	bne.n	5748 <_usb_d_dev_out_next+0x190>
		if (is_ctrl) {
    572c:	9b01      	ldr	r3, [sp, #4]
    572e:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    5730:	bf04      	itt	eq
    5732:	4b0c      	ldreq	r3, [pc, #48]	; (5764 <_usb_d_dev_out_next+0x1ac>)
    5734:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5736:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    573a:	bf0a      	itet	eq
    573c:	f883 80e2 	strbeq.w	r8, [r3, #226]	; 0xe2
			inten = USB_D_BANK0_INT_FLAGS;
    5740:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5742:	232d      	moveq	r3, #45	; 0x2d
    5744:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5748:	0176      	lsls	r6, r6, #5
    574a:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    574e:	2340      	movs	r3, #64	; 0x40
    5750:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    5754:	b003      	add	sp, #12
    5756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    575a:	bf00      	nop
    575c:	20000ac8 	.word	0x20000ac8
    5760:	000081c1 	.word	0x000081c1
    5764:	20000a00 	.word	0x20000a00
    5768:	000052b5 	.word	0x000052b5

0000576c <_usb_d_dev_handler>:
{
    576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    5770:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5774:	8c1e      	ldrh	r6, [r3, #32]
    5776:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    5778:	2e00      	cmp	r6, #0
    577a:	d171      	bne.n	5860 <_usb_d_dev_handler+0xf4>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    577c:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    577e:	8b18      	ldrh	r0, [r3, #24]
    5780:	b280      	uxth	r0, r0
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    5782:	4010      	ands	r0, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5784:	f000 0204 	and.w	r2, r0, #4
    5788:	b292      	uxth	r2, r2
    578a:	b132      	cbz	r2, 579a <_usb_d_dev_handler+0x2e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    578c:	2204      	movs	r2, #4
    578e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    5790:	4b6b      	ldr	r3, [pc, #428]	; (5940 <_usb_d_dev_handler+0x1d4>)
}
    5792:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    5796:	681b      	ldr	r3, [r3, #0]
    5798:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    579a:	f400 7100 	and.w	r1, r0, #512	; 0x200
    579e:	b289      	uxth	r1, r1
    57a0:	b309      	cbz	r1, 57e6 <_usb_d_dev_handler+0x7a>
    57a2:	f240 2101 	movw	r1, #513	; 0x201
    57a6:	8399      	strh	r1, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    57a8:	8299      	strh	r1, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    57aa:	2170      	movs	r1, #112	; 0x70
    57ac:	8319      	strh	r1, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    57ae:	4b64      	ldr	r3, [pc, #400]	; (5940 <_usb_d_dev_handler+0x1d4>)
    57b0:	f8b3 10d0 	ldrh.w	r1, [r3, #208]	; 0xd0
    57b4:	f001 010f 	and.w	r1, r1, #15
    57b8:	2903      	cmp	r1, #3
    57ba:	d006      	beq.n	57ca <_usb_d_dev_handler+0x5e>
    57bc:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	; 0xf0
    57c0:	f001 010f 	and.w	r1, r1, #15
    57c4:	2903      	cmp	r1, #3
    57c6:	d10a      	bne.n	57de <_usb_d_dev_handler+0x72>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    57c8:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    57ca:	eb03 1242 	add.w	r2, r3, r2, lsl #5
			bank->EXTREG.reg = 0;
    57ce:	2000      	movs	r0, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    57d0:	f8b2 10d0 	ldrh.w	r1, [r2, #208]	; 0xd0
			bank->EXTREG.reg = 0;
    57d4:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    57d8:	f3c1 110a 	ubfx	r1, r1, #4, #11
    57dc:	e000      	b.n	57e0 <_usb_d_dev_handler+0x74>
	uint32_t lpm_variable = 0;
    57de:	4611      	mov	r1, r2
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    57e0:	685b      	ldr	r3, [r3, #4]
    57e2:	2003      	movs	r0, #3
    57e4:	e039      	b.n	585a <_usb_d_dev_handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    57e6:	f000 0480 	and.w	r4, r0, #128	; 0x80
    57ea:	b2a4      	uxth	r4, r4
    57ec:	b12c      	cbz	r4, 57fa <_usb_d_dev_handler+0x8e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    57ee:	2280      	movs	r2, #128	; 0x80
    57f0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    57f2:	4b53      	ldr	r3, [pc, #332]	; (5940 <_usb_d_dev_handler+0x1d4>)
    57f4:	2005      	movs	r0, #5
    57f6:	685b      	ldr	r3, [r3, #4]
    57f8:	e02f      	b.n	585a <_usb_d_dev_handler+0xee>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    57fa:	f010 0570 	ands.w	r5, r0, #112	; 0x70
    57fe:	d00c      	beq.n	581a <_usb_d_dev_handler+0xae>
    5800:	2270      	movs	r2, #112	; 0x70
    5802:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    5804:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5806:	f240 2201 	movw	r2, #513	; 0x201
    580a:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    580c:	4b4d      	ldr	r3, [pc, #308]	; (5944 <_usb_d_dev_handler+0x1d8>)
    580e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5810:	4b4b      	ldr	r3, [pc, #300]	; (5940 <_usb_d_dev_handler+0x1d4>)
    5812:	4621      	mov	r1, r4
    5814:	685b      	ldr	r3, [r3, #4]
    5816:	2002      	movs	r0, #2
    5818:	e01f      	b.n	585a <_usb_d_dev_handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    581a:	f000 0208 	and.w	r2, r0, #8
    581e:	b292      	uxth	r2, r2
    5820:	b17a      	cbz	r2, 5842 <_usb_d_dev_handler+0xd6>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5822:	2208      	movs	r2, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5824:	f883 5100 	strb.w	r5, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5828:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    582a:	2270      	movs	r2, #112	; 0x70
    582c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    582e:	f240 2201 	movw	r2, #513	; 0x201
    5832:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    5834:	4b44      	ldr	r3, [pc, #272]	; (5948 <_usb_d_dev_handler+0x1dc>)
    5836:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    5838:	4b41      	ldr	r3, [pc, #260]	; (5940 <_usb_d_dev_handler+0x1d4>)
    583a:	4629      	mov	r1, r5
    583c:	685b      	ldr	r3, [r3, #4]
    583e:	2001      	movs	r0, #1
    5840:	e00b      	b.n	585a <_usb_d_dev_handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    5842:	07c1      	lsls	r1, r0, #31
    5844:	d50c      	bpl.n	5860 <_usb_d_dev_handler+0xf4>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5846:	f240 2101 	movw	r1, #513	; 0x201
    584a:	8399      	strh	r1, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    584c:	8299      	strh	r1, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    584e:	2170      	movs	r1, #112	; 0x70
    5850:	8319      	strh	r1, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    5852:	4b3b      	ldr	r3, [pc, #236]	; (5940 <_usb_d_dev_handler+0x1d4>)
    5854:	685b      	ldr	r3, [r3, #4]
    5856:	4611      	mov	r1, r2
    5858:	2004      	movs	r0, #4
}
    585a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    585e:	4718      	bx	r3
    5860:	4c3a      	ldr	r4, [pc, #232]	; (594c <_usb_d_dev_handler+0x1e0>)
			_usb_d_dev_handle_setup(ept);
    5862:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 5960 <_usb_d_dev_handler+0x1f4>
			_usb_d_dev_handle_trfail(ept, 1);
    5866:	4f3a      	ldr	r7, [pc, #232]	; (5950 <_usb_d_dev_handler+0x1e4>)
	uint32_t lpm_variable = 0;
    5868:	2500      	movs	r5, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    586a:	f1a4 0914 	sub.w	r9, r4, #20
		if (ept->ep == 0xFF) {
    586e:	7ca2      	ldrb	r2, [r4, #18]
    5870:	2aff      	cmp	r2, #255	; 0xff
    5872:	d05e      	beq.n	5932 <_usb_d_dev_handler+0x1c6>
	if (!(epint & (1u << epn))) {
    5874:	f002 020f 	and.w	r2, r2, #15
    5878:	2101      	movs	r1, #1
    587a:	fa01 f302 	lsl.w	r3, r1, r2
    587e:	4233      	tst	r3, r6
    5880:	d057      	beq.n	5932 <_usb_d_dev_handler+0x1c6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    5882:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    5884:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    5886:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    588a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    588e:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    5892:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    5896:	4003      	ands	r3, r0
    5898:	d04b      	beq.n	5932 <_usb_d_dev_handler+0x1c6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    589a:	2214      	movs	r2, #20
    589c:	fb02 9205 	mla	r2, r2, r5, r9
    58a0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    58a4:	f002 0047 	and.w	r0, r2, #71	; 0x47
    58a8:	4288      	cmp	r0, r1
    58aa:	d10b      	bne.n	58c4 <_usb_d_dev_handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    58ac:	06da      	lsls	r2, r3, #27
    58ae:	d43e      	bmi.n	592e <_usb_d_dev_handler+0x1c2>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    58b0:	f003 0240 	and.w	r2, r3, #64	; 0x40
    58b4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    58b8:	b10a      	cbz	r2, 58be <_usb_d_dev_handler+0x152>
		_usb_d_dev_handle_stall(ept, 1);
    58ba:	4601      	mov	r1, r0
    58bc:	e01e      	b.n	58fc <_usb_d_dev_handler+0x190>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    58be:	069b      	lsls	r3, r3, #26
    58c0:	d537      	bpl.n	5932 <_usb_d_dev_handler+0x1c6>
    58c2:	e01b      	b.n	58fc <_usb_d_dev_handler+0x190>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    58c4:	f022 007f 	bic.w	r0, r2, #127	; 0x7f
    58c8:	f000 0cff 	and.w	ip, r0, #255	; 0xff
    58cc:	b180      	cbz	r0, 58f0 <_usb_d_dev_handler+0x184>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    58ce:	0658      	lsls	r0, r3, #25
    58d0:	d414      	bmi.n	58fc <_usb_d_dev_handler+0x190>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    58d2:	0718      	lsls	r0, r3, #28
    58d4:	d426      	bmi.n	5924 <_usb_d_dev_handler+0x1b8>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    58d6:	0798      	lsls	r0, r3, #30
    58d8:	d502      	bpl.n	58e0 <_usb_d_dev_handler+0x174>
		_usb_d_dev_in_next(ept, true);
    58da:	4620      	mov	r0, r4
    58dc:	4b1d      	ldr	r3, [pc, #116]	; (5954 <_usb_d_dev_handler+0x1e8>)
    58de:	e018      	b.n	5912 <_usb_d_dev_handler+0x1a6>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    58e0:	f002 0207 	and.w	r2, r2, #7
    58e4:	2a01      	cmp	r2, #1
    58e6:	d124      	bne.n	5932 <_usb_d_dev_handler+0x1c6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    58e8:	075a      	lsls	r2, r3, #29
    58ea:	d51e      	bpl.n	592a <_usb_d_dev_handler+0x1be>
			_usb_d_dev_handle_trfail(ept, 0);
    58ec:	2100      	movs	r1, #0
    58ee:	e019      	b.n	5924 <_usb_d_dev_handler+0x1b8>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    58f0:	f003 0020 	and.w	r0, r3, #32
    58f4:	f000 0eff 	and.w	lr, r0, #255	; 0xff
    58f8:	b118      	cbz	r0, 5902 <_usb_d_dev_handler+0x196>
		_usb_d_dev_handle_stall(ept, 0);
    58fa:	4661      	mov	r1, ip
    58fc:	4620      	mov	r0, r4
    58fe:	4b16      	ldr	r3, [pc, #88]	; (5958 <_usb_d_dev_handler+0x1ec>)
    5900:	e007      	b.n	5912 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5902:	0758      	lsls	r0, r3, #29
    5904:	d501      	bpl.n	590a <_usb_d_dev_handler+0x19e>
		_usb_d_dev_handle_trfail(ept, 0);
    5906:	4671      	mov	r1, lr
    5908:	e00c      	b.n	5924 <_usb_d_dev_handler+0x1b8>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    590a:	07d8      	lsls	r0, r3, #31
    590c:	d503      	bpl.n	5916 <_usb_d_dev_handler+0x1aa>
		_usb_d_dev_out_next(ept, true);
    590e:	4b13      	ldr	r3, [pc, #76]	; (595c <_usb_d_dev_handler+0x1f0>)
    5910:	4620      	mov	r0, r4
    5912:	4798      	blx	r3
    5914:	e00d      	b.n	5932 <_usb_d_dev_handler+0x1c6>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    5916:	f002 0207 	and.w	r2, r2, #7
    591a:	2a01      	cmp	r2, #1
    591c:	d109      	bne.n	5932 <_usb_d_dev_handler+0x1c6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    591e:	071a      	lsls	r2, r3, #28
    5920:	d503      	bpl.n	592a <_usb_d_dev_handler+0x1be>
			_usb_d_dev_handle_trfail(ept, 1);
    5922:	2101      	movs	r1, #1
    5924:	4620      	mov	r0, r4
    5926:	47b8      	blx	r7
    5928:	e003      	b.n	5932 <_usb_d_dev_handler+0x1c6>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    592a:	06db      	lsls	r3, r3, #27
    592c:	d501      	bpl.n	5932 <_usb_d_dev_handler+0x1c6>
			_usb_d_dev_handle_setup(ept);
    592e:	4620      	mov	r0, r4
    5930:	47c0      	blx	r8
    5932:	3501      	adds	r5, #1
	for (i = 0; i < USB_D_N_EP; i++) {
    5934:	2d09      	cmp	r5, #9
    5936:	f104 0414 	add.w	r4, r4, #20
    593a:	d198      	bne.n	586e <_usb_d_dev_handler+0x102>
}
    593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5940:	20000a00 	.word	0x20000a00
    5944:	000051cd 	.word	0x000051cd
    5948:	00005429 	.word	0x00005429
    594c:	20000a14 	.word	0x20000a14
    5950:	0000533d 	.word	0x0000533d
    5954:	00005465 	.word	0x00005465
    5958:	0000528d 	.word	0x0000528d
    595c:	000055b9 	.word	0x000055b9
    5960:	0000520d 	.word	0x0000520d

00005964 <_usbd_ep_pcksize_size>:
	return (
    5964:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5968:	d80f      	bhi.n	598a <_usbd_ep_pcksize_size+0x26>
    596a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    596e:	d80e      	bhi.n	598e <_usbd_ep_pcksize_size+0x2a>
    5970:	2880      	cmp	r0, #128	; 0x80
    5972:	d80e      	bhi.n	5992 <_usbd_ep_pcksize_size+0x2e>
    5974:	2840      	cmp	r0, #64	; 0x40
    5976:	d80e      	bhi.n	5996 <_usbd_ep_pcksize_size+0x32>
    5978:	2820      	cmp	r0, #32
    597a:	d80e      	bhi.n	599a <_usbd_ep_pcksize_size+0x36>
    597c:	2810      	cmp	r0, #16
    597e:	d80e      	bhi.n	599e <_usbd_ep_pcksize_size+0x3a>
    5980:	2808      	cmp	r0, #8
    5982:	bf94      	ite	ls
    5984:	2000      	movls	r0, #0
    5986:	2001      	movhi	r0, #1
    5988:	4770      	bx	lr
    598a:	2007      	movs	r0, #7
    598c:	4770      	bx	lr
    598e:	2006      	movs	r0, #6
    5990:	4770      	bx	lr
    5992:	2005      	movs	r0, #5
    5994:	4770      	bx	lr
    5996:	2004      	movs	r0, #4
    5998:	4770      	bx	lr
    599a:	2003      	movs	r0, #3
    599c:	4770      	bx	lr
    599e:	2002      	movs	r0, #2
}
    59a0:	4770      	bx	lr
	...

000059a4 <_usb_d_dev_init>:
{
    59a4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    59a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    59aa:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    59ac:	07d0      	lsls	r0, r2, #31
    59ae:	d40f      	bmi.n	59d0 <_usb_d_dev_init+0x2c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    59b0:	461a      	mov	r2, r3
    59b2:	7891      	ldrb	r1, [r2, #2]
    59b4:	0789      	lsls	r1, r1, #30
    59b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    59ba:	d1fa      	bne.n	59b2 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    59bc:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    59be:	0792      	lsls	r2, r2, #30
    59c0:	d409      	bmi.n	59d6 <_usb_d_dev_init+0x32>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    59c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    59c6:	2201      	movs	r2, #1
    59c8:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    59ca:	789a      	ldrb	r2, [r3, #2]
    59cc:	0792      	lsls	r2, r2, #30
    59ce:	d1fc      	bne.n	59ca <_usb_d_dev_init+0x26>
    59d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    59d4:	e00c      	b.n	59f0 <_usb_d_dev_init+0x4c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    59d6:	781a      	ldrb	r2, [r3, #0]
    59d8:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    59dc:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    59de:	789a      	ldrb	r2, [r3, #2]
    59e0:	0790      	lsls	r0, r2, #30
    59e2:	d1fc      	bne.n	59de <_usb_d_dev_init+0x3a>
    59e4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    59e8:	7893      	ldrb	r3, [r2, #2]
    59ea:	0799      	lsls	r1, r3, #30
    59ec:	d4fc      	bmi.n	59e8 <_usb_d_dev_init+0x44>
    59ee:	e7e8      	b.n	59c2 <_usb_d_dev_init+0x1e>
    59f0:	7893      	ldrb	r3, [r2, #2]
    59f2:	07db      	lsls	r3, r3, #31
    59f4:	d4fc      	bmi.n	59f0 <_usb_d_dev_init+0x4c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    59f6:	4b21      	ldr	r3, [pc, #132]	; (5a7c <_usb_d_dev_init+0xd8>)
    59f8:	4a21      	ldr	r2, [pc, #132]	; (5a80 <_usb_d_dev_init+0xdc>)
    59fa:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    59fc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    59fe:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    5a00:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    5a02:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    5a04:	4b1f      	ldr	r3, [pc, #124]	; (5a84 <_usb_d_dev_init+0xe0>)
    5a06:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    5a08:	4b1f      	ldr	r3, [pc, #124]	; (5a88 <_usb_d_dev_init+0xe4>)
    5a0a:	681a      	ldr	r2, [r3, #0]
	uint32_t pad_transp
    5a0c:	f3c2 1144 	ubfx	r1, r2, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    5a10:	f3c2 2382 	ubfx	r3, r2, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    5a14:	f012 021f 	ands.w	r2, r2, #31
    5a18:	d003      	beq.n	5a22 <_usb_d_dev_init+0x7e>
		pad_transn = 9;
    5a1a:	2a1f      	cmp	r2, #31
    5a1c:	bf08      	it	eq
    5a1e:	2209      	moveq	r2, #9
    5a20:	e000      	b.n	5a24 <_usb_d_dev_init+0x80>
    5a22:	2209      	movs	r2, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    5a24:	b119      	cbz	r1, 5a2e <_usb_d_dev_init+0x8a>
		pad_transp = 25;
    5a26:	291f      	cmp	r1, #31
    5a28:	bf08      	it	eq
    5a2a:	2119      	moveq	r1, #25
    5a2c:	e000      	b.n	5a30 <_usb_d_dev_init+0x8c>
    5a2e:	2119      	movs	r1, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    5a30:	b11b      	cbz	r3, 5a3a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    5a32:	2b07      	cmp	r3, #7
    5a34:	bf08      	it	eq
    5a36:	2306      	moveq	r3, #6
    5a38:	e000      	b.n	5a3c <_usb_d_dev_init+0x98>
    5a3a:	2306      	movs	r3, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    5a3c:	031b      	lsls	r3, r3, #12
    5a3e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
    5a42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    5a46:	4313      	orrs	r3, r2
    5a48:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5a4c:	b29b      	uxth	r3, r3
    5a4e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    5a50:	78d3      	ldrb	r3, [r2, #3]
    5a52:	f043 0303 	orr.w	r3, r3, #3
    5a56:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    5a58:	78d3      	ldrb	r3, [r2, #3]
    5a5a:	f043 030c 	orr.w	r3, r3, #12
    5a5e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5a60:	2304      	movs	r3, #4
    5a62:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5a64:	7890      	ldrb	r0, [r2, #2]
    5a66:	f010 0003 	ands.w	r0, r0, #3
    5a6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5a6e:	d1f9      	bne.n	5a64 <_usb_d_dev_init+0xc0>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    5a70:	4a06      	ldr	r2, [pc, #24]	; (5a8c <_usb_d_dev_init+0xe8>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    5a72:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    5a74:	2201      	movs	r2, #1
    5a76:	811a      	strh	r2, [r3, #8]
}
    5a78:	bd08      	pop	{r3, pc}
    5a7a:	bf00      	nop
    5a7c:	20000a00 	.word	0x20000a00
    5a80:	000051c9 	.word	0x000051c9
    5a84:	00005429 	.word	0x00005429
    5a88:	00800084 	.word	0x00800084
    5a8c:	20000ac8 	.word	0x20000ac8

00005a90 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    5a90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    5a94:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    5a98:	7298      	strb	r0, [r3, #10]
    5a9a:	4770      	bx	lr

00005a9c <_usb_d_dev_ep_init>:
{
    5a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aa0:	460d      	mov	r5, r1
    5aa2:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
	uint8_t               epn = USB_EP_GET_N(ep);
    5aa6:	f000 040f 	and.w	r4, r0, #15
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5aaa:	f001 07ff 	and.w	r7, r1, #255	; 0xff
    5aae:	3100      	adds	r1, #0
    5ab0:	bf18      	it	ne
    5ab2:	2101      	movne	r1, #1
{
    5ab4:	4681      	mov	r9, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5ab6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 5b64 <_usb_d_dev_ep_init+0xc8>
    5aba:	4620      	mov	r0, r4
{
    5abc:	4690      	mov	r8, r2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5abe:	47d0      	blx	sl
	if (epn > CONF_USB_D_MAX_EP_N) {
    5ac0:	2c02      	cmp	r4, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5ac2:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5ac4:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    5ac8:	d83e      	bhi.n	5b48 <_usb_d_dev_ep_init+0xac>
	if (ept->ep != 0xFF) {
    5aca:	7c83      	ldrb	r3, [r0, #18]
    5acc:	2bff      	cmp	r3, #255	; 0xff
    5ace:	d13f      	bne.n	5b50 <_usb_d_dev_ep_init+0xb4>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5ad0:	b975      	cbnz	r5, 5af0 <_usb_d_dev_ep_init+0x54>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    5ad2:	fab7 f187 	clz	r1, r7
    5ad6:	0949      	lsrs	r1, r1, #5
    5ad8:	4620      	mov	r0, r4
    5ada:	47d0      	blx	sl
		if (ept_in->ep != 0xFF) {
    5adc:	7c83      	ldrb	r3, [r0, #18]
    5ade:	2bff      	cmp	r3, #255	; 0xff
    5ae0:	d136      	bne.n	5b50 <_usb_d_dev_ep_init+0xb4>
		if (pcfg->cache == NULL) {
    5ae2:	4a1f      	ldr	r2, [pc, #124]	; (5b60 <_usb_d_dev_ep_init+0xc4>)
    5ae4:	230c      	movs	r3, #12
    5ae6:	fb03 2304 	mla	r3, r3, r4, r2
    5aea:	685b      	ldr	r3, [r3, #4]
    5aec:	b983      	cbnz	r3, 5b10 <_usb_d_dev_ep_init+0x74>
    5aee:	e033      	b.n	5b58 <_usb_d_dev_ep_init+0xbc>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5af0:	b13f      	cbz	r7, 5b02 <_usb_d_dev_ep_init+0x66>
    5af2:	4a1b      	ldr	r2, [pc, #108]	; (5b60 <_usb_d_dev_ep_init+0xc4>)
    5af4:	230c      	movs	r3, #12
    5af6:	fb03 2304 	mla	r3, r3, r4, r2
    5afa:	689a      	ldr	r2, [r3, #8]
    5afc:	b18a      	cbz	r2, 5b22 <_usb_d_dev_ep_init+0x86>
    5afe:	89db      	ldrh	r3, [r3, #14]
    5b00:	e00d      	b.n	5b1e <_usb_d_dev_ep_init+0x82>
    5b02:	4a17      	ldr	r2, [pc, #92]	; (5b60 <_usb_d_dev_ep_init+0xc4>)
    5b04:	230c      	movs	r3, #12
    5b06:	fb03 2304 	mla	r3, r3, r4, r2
    5b0a:	685b      	ldr	r3, [r3, #4]
    5b0c:	b14b      	cbz	r3, 5b22 <_usb_d_dev_ep_init+0x86>
    5b0e:	e001      	b.n	5b14 <_usb_d_dev_ep_init+0x78>
    5b10:	2f00      	cmp	r7, #0
    5b12:	d1ee      	bne.n	5af2 <_usb_d_dev_ep_init+0x56>
    5b14:	4a12      	ldr	r2, [pc, #72]	; (5b60 <_usb_d_dev_ep_init+0xc4>)
    5b16:	230c      	movs	r3, #12
    5b18:	fb03 2304 	mla	r3, r3, r4, r2
    5b1c:	899b      	ldrh	r3, [r3, #12]
    5b1e:	4543      	cmp	r3, r8
    5b20:	db1a      	blt.n	5b58 <_usb_d_dev_ep_init+0xbc>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5b22:	4a0f      	ldr	r2, [pc, #60]	; (5b60 <_usb_d_dev_ep_init+0xc4>)
	ept->ep       = ep;
    5b24:	f886 9012 	strb.w	r9, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5b28:	230c      	movs	r3, #12
    5b2a:	fb03 2404 	mla	r4, r3, r4, r2
	ept->flags.u8 = (ep_type + 1);
    5b2e:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5b30:	6862      	ldr	r2, [r4, #4]
    5b32:	68a3      	ldr	r3, [r4, #8]
	ept->flags.u8 = (ep_type + 1);
    5b34:	74f5      	strb	r5, [r6, #19]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5b36:	2f00      	cmp	r7, #0
    5b38:	bf08      	it	eq
    5b3a:	4613      	moveq	r3, r2
    5b3c:	60f3      	str	r3, [r6, #12]
	ept->size     = max_pkt_siz;
    5b3e:	f8a6 8010 	strh.w	r8, [r6, #16]
	return USB_OK;
    5b42:	2000      	movs	r0, #0
    5b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -USB_ERR_PARAM;
    5b48:	f06f 0011 	mvn.w	r0, #17
    5b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -USB_ERR_REDO;
    5b50:	f06f 0013 	mvn.w	r0, #19
    5b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return -USB_ERR_FUNC;
    5b58:	f06f 0012 	mvn.w	r0, #18
    5b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b60:	000084e4 	.word	0x000084e4
    5b64:	000051f5 	.word	0x000051f5

00005b68 <_usb_d_dev_ep_deinit>:
{
    5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    5b6a:	f000 050f 	and.w	r5, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    5b6e:	09c7      	lsrs	r7, r0, #7
{
    5b70:	4604      	mov	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5b72:	4639      	mov	r1, r7
    5b74:	4628      	mov	r0, r5
    5b76:	4b19      	ldr	r3, [pc, #100]	; (5bdc <_usb_d_dev_ep_deinit+0x74>)
    5b78:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5b7a:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5b7c:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5b7e:	d82b      	bhi.n	5bd8 <_usb_d_dev_ep_deinit+0x70>
    5b80:	7c83      	ldrb	r3, [r0, #18]
    5b82:	2bff      	cmp	r3, #255	; 0xff
    5b84:	d028      	beq.n	5bd8 <_usb_d_dev_ep_deinit+0x70>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    5b86:	4b16      	ldr	r3, [pc, #88]	; (5be0 <_usb_d_dev_ep_deinit+0x78>)
    5b88:	2203      	movs	r2, #3
    5b8a:	4639      	mov	r1, r7
    5b8c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5b8e:	7cf3      	ldrb	r3, [r6, #19]
    5b90:	f003 0307 	and.w	r3, r3, #7
    5b94:	2b01      	cmp	r3, #1
    5b96:	d106      	bne.n	5ba6 <_usb_d_dev_ep_deinit+0x3e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    5b98:	0164      	lsls	r4, r4, #5
    5b9a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    5b9e:	2300      	movs	r3, #0
    5ba0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    5ba4:	e014      	b.n	5bd0 <_usb_d_dev_ep_deinit+0x68>
	} else if (USB_EP_GET_DIR(ep)) {
    5ba6:	0623      	lsls	r3, r4, #24
    5ba8:	d509      	bpl.n	5bbe <_usb_d_dev_ep_deinit+0x56>
    5baa:	016d      	lsls	r5, r5, #5
    5bac:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    5bb0:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
    5bb4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5bb8:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
    5bbc:	e008      	b.n	5bd0 <_usb_d_dev_ep_deinit+0x68>
    5bbe:	0164      	lsls	r4, r4, #5
    5bc0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    5bc4:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    5bc8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5bcc:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->flags.u8 = 0;
    5bd0:	2300      	movs	r3, #0
    5bd2:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    5bd4:	23ff      	movs	r3, #255	; 0xff
    5bd6:	74b3      	strb	r3, [r6, #18]
    5bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bda:	bf00      	nop
    5bdc:	000051f5 	.word	0x000051f5
    5be0:	000052d9 	.word	0x000052d9

00005be4 <_usb_d_dev_ep_enable>:
{
    5be4:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
    5be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    5bec:	f000 080f 	and.w	r8, r0, #15
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    5bf0:	f001 09ff 	and.w	r9, r1, #255	; 0xff
    5bf4:	3100      	adds	r1, #0
    5bf6:	bf18      	it	ne
    5bf8:	2101      	movne	r1, #1
    5bfa:	4640      	mov	r0, r8
    5bfc:	4b5a      	ldr	r3, [pc, #360]	; (5d68 <_usb_d_dev_ep_enable+0x184>)
    5bfe:	4798      	blx	r3
    5c00:	ea4f 1448 	mov.w	r4, r8, lsl #5
    5c04:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    5c08:	4605      	mov	r5, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5c0a:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5c0e:	f1b8 0f02 	cmp.w	r8, #2
    5c12:	b2c0      	uxtb	r0, r0
    5c14:	f200 80a0 	bhi.w	5d58 <_usb_d_dev_ep_enable+0x174>
    5c18:	7cab      	ldrb	r3, [r5, #18]
    5c1a:	2bff      	cmp	r3, #255	; 0xff
    5c1c:	f000 809c 	beq.w	5d58 <_usb_d_dev_ep_enable+0x174>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    5c20:	7ceb      	ldrb	r3, [r5, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    5c22:	4e52      	ldr	r6, [pc, #328]	; (5d6c <_usb_d_dev_ep_enable+0x188>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    5c24:	f003 0207 	and.w	r2, r3, #7
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    5c28:	f106 07c8 	add.w	r7, r6, #200	; 0xc8
    5c2c:	ea4f 1a48 	mov.w	sl, r8, lsl #5
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    5c30:	2a01      	cmp	r2, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    5c32:	4457      	add	r7, sl
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    5c34:	d150      	bne.n	5cd8 <_usb_d_dev_ep_enable+0xf4>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    5c36:	f010 0977 	ands.w	r9, r0, #119	; 0x77
    5c3a:	f040 8091 	bne.w	5d60 <_usb_d_dev_ep_enable+0x17c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5c3e:	2211      	movs	r2, #17
    5c40:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5c44:	f8b5 b010 	ldrh.w	fp, [r5, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5c48:	f8df 8124 	ldr.w	r8, [pc, #292]	; 5d70 <_usb_d_dev_ep_enable+0x18c>
    5c4c:	4658      	mov	r0, fp
    5c4e:	47c0      	blx	r8
    5c50:	f8df e120 	ldr.w	lr, [pc, #288]	; 5d74 <_usb_d_dev_ep_enable+0x190>
    5c54:	ea4f 328b 	mov.w	r2, fp, lsl #14
    5c58:	0700      	lsls	r0, r0, #28
    5c5a:	ea02 0e0e 	and.w	lr, r2, lr
    5c5e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    5c62:	ea4e 0000 	orr.w	r0, lr, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5c66:	6078      	str	r0, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5c68:	f8b5 b010 	ldrh.w	fp, [r5, #16]
    5c6c:	4658      	mov	r0, fp
    5c6e:	47c0      	blx	r8
    5c70:	0700      	lsls	r0, r0, #28
    5c72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    5c76:	f3cb 020d 	ubfx	r2, fp, #0, #14
	bank->STATUS_BK.reg     = 0;
    5c7a:	eb0a 0106 	add.w	r1, sl, r6
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5c7e:	4302      	orrs	r2, r0
    5c80:	617a      	str	r2, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5c82:	2740      	movs	r7, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5c84:	2280      	movs	r2, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5c86:	f884 7105 	strb.w	r7, [r4, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5c8a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5c8e:	f881 90d2 	strb.w	r9, [r1, #210]	; 0xd2
    5c92:	f881 90e2 	strb.w	r9, [r1, #226]	; 0xe2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5c96:	7caa      	ldrb	r2, [r5, #18]
	bank->ADDR.reg          = addr;
    5c98:	68eb      	ldr	r3, [r5, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5c9a:	f002 020f 	and.w	r2, r2, #15
	bank->ADDR.reg          = addr;
    5c9e:	0150      	lsls	r0, r2, #5
    5ca0:	4406      	add	r6, r0
    5ca2:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5ca6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5caa:	f8d6 10cc 	ldr.w	r1, [r6, #204]	; 0xcc
    5cae:	8a2d      	ldrh	r5, [r5, #16]
    5cb0:	f365 319b 	bfi	r1, r5, #14, #14
    5cb4:	f8c6 10cc 	str.w	r1, [r6, #204]	; 0xcc
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5cb8:	f8d6 10cc 	ldr.w	r1, [r6, #204]	; 0xcc
    5cbc:	f369 010d 	bfi	r1, r9, #0, #14
    5cc0:	f8c6 10cc 	str.w	r1, [r6, #204]	; 0xcc
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5cc4:	4610      	mov	r0, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5cc6:	21b0      	movs	r1, #176	; 0xb0
    5cc8:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5ccc:	f882 7105 	strb.w	r7, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5cd0:	2210      	movs	r2, #16
    5cd2:	f880 2109 	strb.w	r2, [r0, #265]	; 0x109
    5cd6:	e03c      	b.n	5d52 <_usb_d_dev_ep_enable+0x16e>
	} else if (dir) {
    5cd8:	f1b9 0f00 	cmp.w	r9, #0
    5cdc:	d01c      	beq.n	5d18 <_usb_d_dev_ep_enable+0x134>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    5cde:	f010 0970 	ands.w	r9, r0, #112	; 0x70
    5ce2:	d13d      	bne.n	5d60 <_usb_d_dev_ep_enable+0x17c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    5ce4:	011b      	lsls	r3, r3, #4
    5ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    5cea:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5cec:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5cf0:	f8b5 8010 	ldrh.w	r8, [r5, #16]
    5cf4:	4d1e      	ldr	r5, [pc, #120]	; (5d70 <_usb_d_dev_ep_enable+0x18c>)
    5cf6:	4640      	mov	r0, r8
    5cf8:	47a8      	blx	r5
    5cfa:	0700      	lsls	r0, r0, #28
    5cfc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    5d00:	f3c8 030d 	ubfx	r3, r8, #0, #14
    5d04:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    5d06:	eb0a 0106 	add.w	r1, sl, r6
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5d0a:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5d0c:	2380      	movs	r3, #128	; 0x80
    5d0e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5d12:	f881 90e2 	strb.w	r9, [r1, #226]	; 0xe2
    5d16:	e01c      	b.n	5d52 <_usb_d_dev_ep_enable+0x16e>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    5d18:	f010 0907 	ands.w	r9, r0, #7
    5d1c:	d120      	bne.n	5d60 <_usb_d_dev_ep_enable+0x17c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    5d1e:	f003 0307 	and.w	r3, r3, #7
    5d22:	4303      	orrs	r3, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5d24:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5d28:	f8b5 8010 	ldrh.w	r8, [r5, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5d2c:	4d10      	ldr	r5, [pc, #64]	; (5d70 <_usb_d_dev_ep_enable+0x18c>)
    5d2e:	4640      	mov	r0, r8
    5d30:	47a8      	blx	r5
    5d32:	4d10      	ldr	r5, [pc, #64]	; (5d74 <_usb_d_dev_ep_enable+0x190>)
    5d34:	ea4f 3388 	mov.w	r3, r8, lsl #14
    5d38:	0700      	lsls	r0, r0, #28
    5d3a:	401d      	ands	r5, r3
    5d3c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    5d40:	eb0a 0106 	add.w	r1, sl, r6
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5d44:	4328      	orrs	r0, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5d46:	2340      	movs	r3, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5d48:	6078      	str	r0, [r7, #4]
    5d4a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    5d4e:	f881 90d2 	strb.w	r9, [r1, #210]	; 0xd2
	return USB_OK;
    5d52:	4648      	mov	r0, r9
    5d54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -USB_ERR_PARAM;
    5d58:	f06f 0011 	mvn.w	r0, #17
    5d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -USB_ERR_REDO;
    5d60:	f06f 0013 	mvn.w	r0, #19
}
    5d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d68:	000051f5 	.word	0x000051f5
    5d6c:	20000a00 	.word	0x20000a00
    5d70:	00005965 	.word	0x00005965
    5d74:	0fffc000 	.word	0x0fffc000

00005d78 <_usb_d_dev_ep_stall>:
{
    5d78:	b570      	push	{r4, r5, r6, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    5d7a:	f000 060f 	and.w	r6, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    5d7e:	09c4      	lsrs	r4, r0, #7
{
    5d80:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5d82:	4630      	mov	r0, r6
    5d84:	4621      	mov	r1, r4
    5d86:	4b34      	ldr	r3, [pc, #208]	; (5e58 <_usb_d_dev_ep_stall+0xe0>)
    5d88:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    5d8a:	2e02      	cmp	r6, #2
    5d8c:	d861      	bhi.n	5e52 <_usb_d_dev_ep_stall+0xda>
	if (USB_EP_STALL_SET == ctrl) {
    5d8e:	2d01      	cmp	r5, #1
    5d90:	d118      	bne.n	5dc4 <_usb_d_dev_ep_stall+0x4c>
    5d92:	7c83      	ldrb	r3, [r0, #18]
    5d94:	f003 030f 	and.w	r3, r3, #15
    5d98:	015a      	lsls	r2, r3, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5d9a:	2110      	movs	r1, #16
    5d9c:	40a1      	lsls	r1, r4
    5d9e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5da2:	b2c9      	uxtb	r1, r1
    5da4:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5da8:	015b      	lsls	r3, r3, #5
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5daa:	2220      	movs	r2, #32
    5dac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5db0:	fa02 f404 	lsl.w	r4, r2, r4
    5db4:	b2e4      	uxtb	r4, r4
    5db6:	f883 4109 	strb.w	r4, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    5dba:	7cc3      	ldrb	r3, [r0, #19]
    5dbc:	f043 0308 	orr.w	r3, r3, #8
    5dc0:	74c3      	strb	r3, [r0, #19]
    5dc2:	e033      	b.n	5e2c <_usb_d_dev_ep_stall+0xb4>
	} else if (USB_EP_STALL_CLR == ctrl) {
    5dc4:	bba5      	cbnz	r5, 5e30 <_usb_d_dev_ep_stall+0xb8>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    5dc6:	7c82      	ldrb	r2, [r0, #18]
    5dc8:	f002 020f 	and.w	r2, r2, #15
    5dcc:	0153      	lsls	r3, r2, #5
    5dce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5dd2:	2110      	movs	r1, #16
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5dd4:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
    5dd8:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    5dda:	420d      	tst	r5, r1
    5ddc:	d026      	beq.n	5e2c <_usb_d_dev_ep_stall+0xb4>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5dde:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5de0:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5de4:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    5de6:	2120      	movs	r1, #32
    5de8:	40a1      	lsls	r1, r4
    5dea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    5dee:	b2cd      	uxtb	r5, r1
    5df0:	f882 5108 	strb.w	r5, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5df4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    5df8:	420a      	tst	r2, r1
    5dfa:	d007      	beq.n	5e0c <_usb_d_dev_ep_stall+0x94>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    5dfc:	2201      	movs	r2, #1
    5dfe:	fa02 f404 	lsl.w	r4, r2, r4
    5e02:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5e04:	f883 5107 	strb.w	r5, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5e08:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5e0c:	7cc2      	ldrb	r2, [r0, #19]
    5e0e:	f002 0107 	and.w	r1, r2, #7
    5e12:	2901      	cmp	r1, #1
    5e14:	d107      	bne.n	5e26 <_usb_d_dev_ep_stall+0xae>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5e16:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5e1a:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    5e1e:	d105      	bne.n	5e2c <_usb_d_dev_ep_stall+0xb4>
			ept->flags.bits.is_stalled = 0;
    5e20:	f363 02c3 	bfi	r2, r3, #3, #1
    5e24:	e001      	b.n	5e2a <_usb_d_dev_ep_stall+0xb2>
		ept->flags.bits.is_stalled = 0;
    5e26:	f36f 02c3 	bfc	r2, #3, #1
    5e2a:	74c2      	strb	r2, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5e2c:	2000      	movs	r0, #0
    5e2e:	bd70      	pop	{r4, r5, r6, pc}
    5e30:	7c83      	ldrb	r3, [r0, #18]
    5e32:	f003 030f 	and.w	r3, r3, #15
    5e36:	015b      	lsls	r3, r3, #5
    5e38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5e3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
	return _usbd_ep_is_stalled(epn, dir);
    5e40:	2010      	movs	r0, #16
    5e42:	799b      	ldrb	r3, [r3, #6]
    5e44:	fa00 f404 	lsl.w	r4, r0, r4
    5e48:	421c      	tst	r4, r3
    5e4a:	bf14      	ite	ne
    5e4c:	2001      	movne	r0, #1
    5e4e:	2000      	moveq	r0, #0
    5e50:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
    5e52:	f06f 0011 	mvn.w	r0, #17
}
    5e56:	bd70      	pop	{r4, r5, r6, pc}
    5e58:	000051f5 	.word	0x000051f5

00005e5c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    5e5c:	b530      	push	{r4, r5, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    5e5e:	f000 030f 	and.w	r3, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5e62:	4813      	ldr	r0, [pc, #76]	; (5eb0 <_usb_d_dev_ep_read_req+0x54>)
    5e64:	015a      	lsls	r2, r3, #5
    5e66:	1884      	adds	r4, r0, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    5e68:	5885      	ldr	r5, [r0, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    5e6a:	6860      	ldr	r0, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5e6c:	2b02      	cmp	r3, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    5e6e:	f3c0 000d 	ubfx	r0, r0, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5e72:	d815      	bhi.n	5ea0 <_usb_d_dev_ep_read_req+0x44>
    5e74:	b1a1      	cbz	r1, 5ea0 <_usb_d_dev_ep_read_req+0x44>
    5e76:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5e7a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5e7e:	2a11      	cmp	r2, #17
    5e80:	d111      	bne.n	5ea6 <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5e82:	f893 4107 	ldrb.w	r4, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5e86:	f004 0410 	and.w	r4, r4, #16
    5e8a:	f004 02ff 	and.w	r2, r4, #255	; 0xff
    5e8e:	b16c      	cbz	r4, 5eac <_usb_d_dev_ep_read_req+0x50>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    5e90:	682a      	ldr	r2, [r5, #0]
    5e92:	600a      	str	r2, [r1, #0]
    5e94:	686a      	ldr	r2, [r5, #4]
    5e96:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5e98:	2210      	movs	r2, #16
    5e9a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    5e9e:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_PARAM;
    5ea0:	f06f 0011 	mvn.w	r0, #17
    5ea4:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_FUNC;
    5ea6:	f06f 0012 	mvn.w	r0, #18
    5eaa:	bd30      	pop	{r4, r5, pc}
		return ERR_NONE;
    5eac:	4610      	mov	r0, r2
}
    5eae:	bd30      	pop	{r4, r5, pc}
    5eb0:	20000ac8 	.word	0x20000ac8

00005eb4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5eb8:	7a07      	ldrb	r7, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5eba:	4b3e      	ldr	r3, [pc, #248]	; (5fb4 <_usb_d_dev_ep_trans+0x100>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5ebc:	f007 060f 	and.w	r6, r7, #15
    5ec0:	f027 077f 	bic.w	r7, r7, #127	; 0x7f
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    5ec4:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    5ec8:	3700      	adds	r7, #0
    5eca:	bf18      	it	ne
    5ecc:	2701      	movne	r7, #1
{
    5ece:	4681      	mov	r9, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5ed0:	4639      	mov	r1, r7
    5ed2:	4630      	mov	r0, r6
    5ed4:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5ed6:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    5ed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5edc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    5ee0:	429a      	cmp	r2, r3
    5ee2:	bf1a      	itte	ne
    5ee4:	f102 33ff 	addne.w	r3, r2, #4294967295	; 0xffffffff
    5ee8:	b29b      	uxthne	r3, r3
    5eea:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5eec:	2e02      	cmp	r6, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    5eee:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    5ef0:	ea03 0801 	and.w	r8, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    5ef4:	d856      	bhi.n	5fa4 <_usb_d_dev_ep_trans+0xf0>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    5ef6:	f8d9 6000 	ldr.w	r6, [r9]
    5efa:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
    5efe:	d309      	bcc.n	5f14 <_usb_d_dev_ep_trans+0x60>
    5f00:	4b2d      	ldr	r3, [pc, #180]	; (5fb8 <_usb_d_dev_ep_trans+0x104>)
    5f02:	1988      	adds	r0, r1, r6
    5f04:	4298      	cmp	r0, r3
    5f06:	d805      	bhi.n	5f14 <_usb_d_dev_ep_trans+0x60>
    5f08:	f016 0603 	ands.w	r6, r6, #3
    5f0c:	d102      	bne.n	5f14 <_usb_d_dev_ep_trans+0x60>
	    || (!dir && (trans->size < ept->size))) {
    5f0e:	b96d      	cbnz	r5, 5f2c <_usb_d_dev_ep_trans+0x78>
    5f10:	4291      	cmp	r1, r2
    5f12:	d204      	bcs.n	5f1e <_usb_d_dev_ep_trans+0x6a>
		if (!ept->cache) {
    5f14:	68e3      	ldr	r3, [r4, #12]
    5f16:	2b00      	cmp	r3, #0
    5f18:	d041      	beq.n	5f9e <_usb_d_dev_ep_trans+0xea>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    5f1a:	2601      	movs	r6, #1
    5f1c:	e006      	b.n	5f2c <_usb_d_dev_ep_trans+0x78>
	}
	if (!dir && size_n_aligned) {
    5f1e:	f1b8 0f00 	cmp.w	r8, #0
    5f22:	d002      	beq.n	5f2a <_usb_d_dev_ep_trans+0x76>
		if (!ept->cache) {
    5f24:	68e3      	ldr	r3, [r4, #12]
    5f26:	2b00      	cmp	r3, #0
    5f28:	d03c      	beq.n	5fa4 <_usb_d_dev_ep_trans+0xf0>
	bool use_cache = false;
    5f2a:	462e      	mov	r6, r5
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5f2c:	7ce3      	ldrb	r3, [r4, #19]
    5f2e:	071b      	lsls	r3, r3, #28
    5f30:	d43b      	bmi.n	5faa <_usb_d_dev_ep_trans+0xf6>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    5f32:	4b22      	ldr	r3, [pc, #136]	; (5fbc <_usb_d_dev_ep_trans+0x108>)
    5f34:	a801      	add	r0, sp, #4
    5f36:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5f38:	7ce3      	ldrb	r3, [r4, #19]
    5f3a:	4a21      	ldr	r2, [pc, #132]	; (5fc0 <_usb_d_dev_ep_trans+0x10c>)
    5f3c:	f003 0140 	and.w	r1, r3, #64	; 0x40
    5f40:	f001 0aff 	and.w	sl, r1, #255	; 0xff
    5f44:	b119      	cbz	r1, 5f4e <_usb_d_dev_ep_trans+0x9a>
		atomic_leave_critical(&flags);
    5f46:	a801      	add	r0, sp, #4
    5f48:	4790      	blx	r2
		return USB_BUSY;
    5f4a:	2001      	movs	r0, #1
    5f4c:	e02e      	b.n	5fac <_usb_d_dev_ep_trans+0xf8>
	}
	ept->flags.bits.is_busy = 1;
    5f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5f52:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    5f54:	a801      	add	r0, sp, #4
    5f56:	4790      	blx	r2

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    5f58:	f8d9 3000 	ldr.w	r3, [r9]
    5f5c:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    5f5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5f62:	6063      	str	r3, [r4, #4]
	ept->trans_count = 0;

	ept->flags.bits.dir       = dir;
    5f64:	7ce3      	ldrb	r3, [r4, #19]
	ept->trans_count = 0;
    5f66:	f8c4 a008 	str.w	sl, [r4, #8]
	ept->flags.bits.dir       = dir;
    5f6a:	f367 13c7 	bfi	r3, r7, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5f6e:	f366 1345 	bfi	r3, r6, #5, #1
    5f72:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    5f74:	f899 3009 	ldrb.w	r3, [r9, #9]
    5f78:	b113      	cbz	r3, 5f80 <_usb_d_dev_ep_trans+0xcc>
    5f7a:	fab8 f388 	clz	r3, r8
    5f7e:	095b      	lsrs	r3, r3, #5
    5f80:	7ce2      	ldrb	r2, [r4, #19]
    5f82:	f363 1204 	bfi	r2, r3, #4, #1
    5f86:	74e2      	strb	r2, [r4, #19]

	if (dir) {
    5f88:	b12d      	cbz	r5, 5f96 <_usb_d_dev_ep_trans+0xe2>
		_usb_d_dev_in_next(ept, false);
    5f8a:	4b0e      	ldr	r3, [pc, #56]	; (5fc4 <_usb_d_dev_ep_trans+0x110>)
    5f8c:	2100      	movs	r1, #0
    5f8e:	4620      	mov	r0, r4
    5f90:	4798      	blx	r3
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
    5f92:	2000      	movs	r0, #0
    5f94:	e00a      	b.n	5fac <_usb_d_dev_ep_trans+0xf8>
		_usb_d_dev_out_next(ept, false);
    5f96:	4629      	mov	r1, r5
    5f98:	4620      	mov	r0, r4
    5f9a:	4b0b      	ldr	r3, [pc, #44]	; (5fc8 <_usb_d_dev_ep_trans+0x114>)
    5f9c:	e7f8      	b.n	5f90 <_usb_d_dev_ep_trans+0xdc>
			return -USB_ERR_FUNC;
    5f9e:	f06f 0012 	mvn.w	r0, #18
    5fa2:	e003      	b.n	5fac <_usb_d_dev_ep_trans+0xf8>
		return -USB_ERR_PARAM;
    5fa4:	f06f 0011 	mvn.w	r0, #17
    5fa8:	e000      	b.n	5fac <_usb_d_dev_ep_trans+0xf8>
		return USB_HALTED;
    5faa:	2002      	movs	r0, #2
}
    5fac:	b002      	add	sp, #8
    5fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fb2:	bf00      	nop
    5fb4:	000051f5 	.word	0x000051f5
    5fb8:	20041fff 	.word	0x20041fff
    5fbc:	00007445 	.word	0x00007445
    5fc0:	00007453 	.word	0x00007453
    5fc4:	00005465 	.word	0x00005465
    5fc8:	000055b9 	.word	0x000055b9

00005fcc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5fcc:	4b06      	ldr	r3, [pc, #24]	; (5fe8 <_usb_d_dev_register_callback+0x1c>)
    5fce:	2900      	cmp	r1, #0
    5fd0:	bf08      	it	eq
    5fd2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5fd4:	2801      	cmp	r0, #1
    5fd6:	d102      	bne.n	5fde <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5fd8:	4b04      	ldr	r3, [pc, #16]	; (5fec <_usb_d_dev_register_callback+0x20>)
    5fda:	6059      	str	r1, [r3, #4]
    5fdc:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    5fde:	b908      	cbnz	r0, 5fe4 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    5fe0:	4b02      	ldr	r3, [pc, #8]	; (5fec <_usb_d_dev_register_callback+0x20>)
    5fe2:	6019      	str	r1, [r3, #0]
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop
    5fe8:	000051c9 	.word	0x000051c9
    5fec:	20000a00 	.word	0x20000a00

00005ff0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5ff0:	4b08      	ldr	r3, [pc, #32]	; (6014 <_usb_d_dev_register_ep_callback+0x24>)
    5ff2:	2900      	cmp	r1, #0
    5ff4:	bf08      	it	eq
    5ff6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5ff8:	b910      	cbnz	r0, 6000 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    5ffa:	4b07      	ldr	r3, [pc, #28]	; (6018 <_usb_d_dev_register_ep_callback+0x28>)
    5ffc:	6099      	str	r1, [r3, #8]
    5ffe:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    6000:	2801      	cmp	r0, #1
    6002:	d102      	bne.n	600a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    6004:	4b04      	ldr	r3, [pc, #16]	; (6018 <_usb_d_dev_register_ep_callback+0x28>)
    6006:	60d9      	str	r1, [r3, #12]
    6008:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    600a:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    600c:	bf04      	itt	eq
    600e:	4b02      	ldreq	r3, [pc, #8]	; (6018 <_usb_d_dev_register_ep_callback+0x28>)
    6010:	6119      	streq	r1, [r3, #16]
    6012:	4770      	bx	lr
    6014:	000051c9 	.word	0x000051c9
    6018:	20000a00 	.word	0x20000a00

0000601c <USB_0_Handler>:
    601c:	4b00      	ldr	r3, [pc, #0]	; (6020 <USB_0_Handler+0x4>)
    601e:	4718      	bx	r3
    6020:	0000576d 	.word	0x0000576d

00006024 <USB_1_Handler>:
    6024:	4b00      	ldr	r3, [pc, #0]	; (6028 <USB_1_Handler+0x4>)
    6026:	4718      	bx	r3
    6028:	0000576d 	.word	0x0000576d

0000602c <USB_2_Handler>:
    602c:	4b00      	ldr	r3, [pc, #0]	; (6030 <USB_2_Handler+0x4>)
    602e:	4718      	bx	r3
    6030:	0000576d 	.word	0x0000576d

00006034 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
    6034:	4b00      	ldr	r3, [pc, #0]	; (6038 <USB_3_Handler+0x4>)
    6036:	4718      	bx	r3
    6038:	0000576d 	.word	0x0000576d

0000603c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if (xTimerQueue == NULL) {
    6040:	4c0c      	ldr	r4, [pc, #48]	; (6074 <prvCheckForValidListAndQueue+0x38>)
	taskENTER_CRITICAL();
    6042:	4b0d      	ldr	r3, [pc, #52]	; (6078 <prvCheckForValidListAndQueue+0x3c>)
    6044:	4798      	blx	r3
		if (xTimerQueue == NULL) {
    6046:	6825      	ldr	r5, [r4, #0]
    6048:	b985      	cbnz	r5, 606c <prvCheckForValidListAndQueue+0x30>
			vListInitialise(&xActiveTimerList1);
    604a:	1d27      	adds	r7, r4, #4
    604c:	4638      	mov	r0, r7
    604e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 6084 <prvCheckForValidListAndQueue+0x48>
			vListInitialise(&xActiveTimerList2);
    6052:	f104 0618 	add.w	r6, r4, #24
			vListInitialise(&xActiveTimerList1);
    6056:	47c0      	blx	r8
			vListInitialise(&xActiveTimerList2);
    6058:	4630      	mov	r0, r6
    605a:	47c0      	blx	r8
				                                 &(ucStaticTimerQueueStorage[0]),
				                                 &xStaticTimerQueue);
			}
#else
			{
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    605c:	462a      	mov	r2, r5
    605e:	210c      	movs	r1, #12
    6060:	2002      	movs	r0, #2
    6062:	4b06      	ldr	r3, [pc, #24]	; (607c <prvCheckForValidListAndQueue+0x40>)
			pxCurrentTimerList  = &xActiveTimerList1;
    6064:	62e7      	str	r7, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
    6066:	6326      	str	r6, [r4, #48]	; 0x30
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6068:	4798      	blx	r3
    606a:	6020      	str	r0, [r4, #0]
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    606c:	4b04      	ldr	r3, [pc, #16]	; (6080 <prvCheckForValidListAndQueue+0x44>)
}
    606e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
    6072:	4718      	bx	r3
    6074:	20000be8 	.word	0x20000be8
    6078:	000044d5 	.word	0x000044d5
    607c:	00004af1 	.word	0x00004af1
    6080:	00004519 	.word	0x00004519
    6084:	00004309 	.word	0x00004309

00006088 <prvInsertTimerInActiveList>:
	if (xNextExpiryTime <= xTimeNow) {
    6088:	4291      	cmp	r1, r2
{
    608a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    608c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    608e:	6100      	str	r0, [r0, #16]
	if (xNextExpiryTime <= xTimeNow) {
    6090:	d807      	bhi.n	60a2 <prvInsertTimerInActiveList+0x1a>
		if (((TickType_t)(xTimeNow - xCommandTime))
    6092:	1ad2      	subs	r2, r2, r3
    6094:	6983      	ldr	r3, [r0, #24]
    6096:	429a      	cmp	r2, r3
    6098:	d20e      	bcs.n	60b8 <prvInsertTimerInActiveList+0x30>
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    609a:	4b08      	ldr	r3, [pc, #32]	; (60bc <prvInsertTimerInActiveList+0x34>)
    609c:	1d01      	adds	r1, r0, #4
    609e:	6b18      	ldr	r0, [r3, #48]	; 0x30
    60a0:	e006      	b.n	60b0 <prvInsertTimerInActiveList+0x28>
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    60a2:	429a      	cmp	r2, r3
    60a4:	d201      	bcs.n	60aa <prvInsertTimerInActiveList+0x22>
    60a6:	4299      	cmp	r1, r3
    60a8:	d206      	bcs.n	60b8 <prvInsertTimerInActiveList+0x30>
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    60aa:	4b04      	ldr	r3, [pc, #16]	; (60bc <prvInsertTimerInActiveList+0x34>)
    60ac:	1d01      	adds	r1, r0, #4
    60ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    60b0:	4b03      	ldr	r3, [pc, #12]	; (60c0 <prvInsertTimerInActiveList+0x38>)
    60b2:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    60b4:	2000      	movs	r0, #0
    60b6:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    60b8:	2001      	movs	r0, #1
}
    60ba:	bd08      	pop	{r3, pc}
    60bc:	20000be8 	.word	0x20000be8
    60c0:	0000433d 	.word	0x0000433d

000060c4 <xTimerCreateTimerTask>:
	prvCheckForValidListAndQueue();
    60c4:	4b0e      	ldr	r3, [pc, #56]	; (6100 <xTimerCreateTimerTask+0x3c>)
{
    60c6:	b513      	push	{r0, r1, r4, lr}
	prvCheckForValidListAndQueue();
    60c8:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    60ca:	4b0e      	ldr	r3, [pc, #56]	; (6104 <xTimerCreateTimerTask+0x40>)
    60cc:	681a      	ldr	r2, [r3, #0]
    60ce:	b942      	cbnz	r2, 60e2 <xTimerCreateTimerTask+0x1e>
    60d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    60d4:	f383 8811 	msr	BASEPRI, r3
    60d8:	f3bf 8f6f 	isb	sy
    60dc:	f3bf 8f4f 	dsb	sy
    60e0:	e00d      	b.n	60fe <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate(prvTimerTask,
    60e2:	3334      	adds	r3, #52	; 0x34
    60e4:	9301      	str	r3, [sp, #4]
    60e6:	2302      	movs	r3, #2
    60e8:	9300      	str	r3, [sp, #0]
    60ea:	2240      	movs	r2, #64	; 0x40
    60ec:	2300      	movs	r3, #0
    60ee:	4906      	ldr	r1, [pc, #24]	; (6108 <xTimerCreateTimerTask+0x44>)
    60f0:	4806      	ldr	r0, [pc, #24]	; (610c <xTimerCreateTimerTask+0x48>)
    60f2:	4c07      	ldr	r4, [pc, #28]	; (6110 <xTimerCreateTimerTask+0x4c>)
    60f4:	47a0      	blx	r4
	configASSERT(xReturn);
    60f6:	2800      	cmp	r0, #0
    60f8:	d0ea      	beq.n	60d0 <xTimerCreateTimerTask+0xc>
}
    60fa:	b002      	add	sp, #8
    60fc:	bd10      	pop	{r4, pc}
    60fe:	e7fe      	b.n	60fe <xTimerCreateTimerTask+0x3a>
    6100:	0000603d 	.word	0x0000603d
    6104:	20000be8 	.word	0x20000be8
    6108:	0000850c 	.word	0x0000850c
    610c:	000061fd 	.word	0x000061fd
    6110:	00007a95 	.word	0x00007a95

00006114 <xTimerGenericCommand>:
{
    6114:	b530      	push	{r4, r5, lr}
    6116:	4615      	mov	r5, r2
    6118:	b085      	sub	sp, #20
    611a:	461a      	mov	r2, r3
	configASSERT(xTimer);
    611c:	4603      	mov	r3, r0
    611e:	b940      	cbnz	r0, 6132 <xTimerGenericCommand+0x1e>
    6120:	f04f 0380 	mov.w	r3, #128	; 0x80
    6124:	f383 8811 	msr	BASEPRI, r3
    6128:	f3bf 8f6f 	isb	sy
    612c:	f3bf 8f4f 	dsb	sy
    6130:	e7fe      	b.n	6130 <xTimerGenericCommand+0x1c>
	if (xTimerQueue != NULL) {
    6132:	4c0d      	ldr	r4, [pc, #52]	; (6168 <xTimerGenericCommand+0x54>)
    6134:	6820      	ldr	r0, [r4, #0]
    6136:	b1a8      	cbz	r0, 6164 <xTimerGenericCommand+0x50>
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6138:	2905      	cmp	r1, #5
		xMessage.xMessageID                       = xCommandID;
    613a:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    613c:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    613e:	9303      	str	r3, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6140:	dc0c      	bgt.n	615c <xTimerGenericCommand+0x48>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    6142:	4b0a      	ldr	r3, [pc, #40]	; (616c <xTimerGenericCommand+0x58>)
    6144:	4d0a      	ldr	r5, [pc, #40]	; (6170 <xTimerGenericCommand+0x5c>)
    6146:	4798      	blx	r3
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    6148:	2300      	movs	r3, #0
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    614a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    614c:	bf08      	it	eq
    614e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    6150:	6820      	ldr	r0, [r4, #0]
    6152:	bf18      	it	ne
    6154:	461a      	movne	r2, r3
    6156:	a901      	add	r1, sp, #4
    6158:	47a8      	blx	r5
    615a:	e003      	b.n	6164 <xTimerGenericCommand+0x50>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    615c:	2300      	movs	r3, #0
    615e:	a901      	add	r1, sp, #4
    6160:	4c04      	ldr	r4, [pc, #16]	; (6174 <xTimerGenericCommand+0x60>)
    6162:	47a0      	blx	r4
}
    6164:	b005      	add	sp, #20
    6166:	bd30      	pop	{r4, r5, pc}
    6168:	20000be8 	.word	0x20000be8
    616c:	000080cd 	.word	0x000080cd
    6170:	00004b45 	.word	0x00004b45
    6174:	00004ce5 	.word	0x00004ce5

00006178 <prvSwitchTimerLists>:
{
    6178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    617c:	4d1b      	ldr	r5, [pc, #108]	; (61ec <prvSwitchTimerLists+0x74>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    617e:	4e1c      	ldr	r6, [pc, #112]	; (61f0 <prvSwitchTimerLists+0x78>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6180:	462f      	mov	r7, r5
    6182:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    6184:	4b19      	ldr	r3, [pc, #100]	; (61ec <prvSwitchTimerLists+0x74>)
    6186:	6811      	ldr	r1, [r2, #0]
    6188:	b351      	cbz	r1, 61e0 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    618a:	68d3      	ldr	r3, [r2, #12]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    618c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    618e:	f8d3 8000 	ldr.w	r8, [r3]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6192:	f104 0904 	add.w	r9, r4, #4
    6196:	4648      	mov	r0, r9
    6198:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    619a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    619c:	4620      	mov	r0, r4
    619e:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    61a0:	69e3      	ldr	r3, [r4, #28]
    61a2:	2b01      	cmp	r3, #1
    61a4:	d1ed      	bne.n	6182 <prvSwitchTimerLists+0xa>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    61a6:	69a3      	ldr	r3, [r4, #24]
    61a8:	4443      	add	r3, r8
			if (xReloadTime > xNextExpireTime) {
    61aa:	4598      	cmp	r8, r3
    61ac:	d206      	bcs.n	61bc <prvSwitchTimerLists+0x44>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    61ae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    61b0:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    61b2:	4649      	mov	r1, r9
    61b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    61b6:	4b0f      	ldr	r3, [pc, #60]	; (61f4 <prvSwitchTimerLists+0x7c>)
    61b8:	4798      	blx	r3
    61ba:	e7e2      	b.n	6182 <prvSwitchTimerLists+0xa>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    61bc:	2300      	movs	r3, #0
    61be:	4620      	mov	r0, r4
    61c0:	9300      	str	r3, [sp, #0]
    61c2:	4642      	mov	r2, r8
    61c4:	4619      	mov	r1, r3
    61c6:	4c0c      	ldr	r4, [pc, #48]	; (61f8 <prvSwitchTimerLists+0x80>)
    61c8:	47a0      	blx	r4
				configASSERT(xResult);
    61ca:	2800      	cmp	r0, #0
    61cc:	d1d9      	bne.n	6182 <prvSwitchTimerLists+0xa>
    61ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    61d2:	f383 8811 	msr	BASEPRI, r3
    61d6:	f3bf 8f6f 	isb	sy
    61da:	f3bf 8f4f 	dsb	sy
    61de:	e7fe      	b.n	61de <prvSwitchTimerLists+0x66>
	pxCurrentTimerList  = pxOverflowTimerList;
    61e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    61e2:	62d9      	str	r1, [r3, #44]	; 0x2c
	pxOverflowTimerList = pxTemp;
    61e4:	631a      	str	r2, [r3, #48]	; 0x30
}
    61e6:	b003      	add	sp, #12
    61e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    61ec:	20000be8 	.word	0x20000be8
    61f0:	0000436d 	.word	0x0000436d
    61f4:	0000433d 	.word	0x0000433d
    61f8:	00006115 	.word	0x00006115

000061fc <prvTimerTask>:
{
    61fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    6200:	4f66      	ldr	r7, [pc, #408]	; (639c <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6202:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 63c4 <prvTimerTask+0x1c8>
{
    6206:	b089      	sub	sp, #36	; 0x24
    6208:	463d      	mov	r5, r7
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    620a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    620c:	f8d2 8000 	ldr.w	r8, [r2]
	if (*pxListWasEmpty == pdFALSE) {
    6210:	f1b8 0f00 	cmp.w	r8, #0
    6214:	d002      	beq.n	621c <prvTimerTask+0x20>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6216:	68d2      	ldr	r2, [r2, #12]
    6218:	6816      	ldr	r6, [r2, #0]
    621a:	e000      	b.n	621e <prvTimerTask+0x22>
		xNextExpireTime = (TickType_t)0U;
    621c:	4646      	mov	r6, r8
	vTaskSuspendAll();
    621e:	4a60      	ldr	r2, [pc, #384]	; (63a0 <prvTimerTask+0x1a4>)
	xTimeNow = xTaskGetTickCount();
    6220:	4c60      	ldr	r4, [pc, #384]	; (63a4 <prvTimerTask+0x1a8>)
	vTaskSuspendAll();
    6222:	4790      	blx	r2
	xTimeNow = xTaskGetTickCount();
    6224:	47a0      	blx	r4
	if (xTimeNow < xLastTime) {
    6226:	6baa      	ldr	r2, [r5, #56]	; 0x38
    6228:	9403      	str	r4, [sp, #12]
    622a:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
    622c:	4682      	mov	sl, r0
	if (xTimeNow < xLastTime) {
    622e:	d203      	bcs.n	6238 <prvTimerTask+0x3c>
		prvSwitchTimerLists();
    6230:	4a5d      	ldr	r2, [pc, #372]	; (63a8 <prvTimerTask+0x1ac>)
    6232:	4790      	blx	r2
		*pxTimerListsWereSwitched = pdTRUE;
    6234:	2401      	movs	r4, #1
    6236:	e000      	b.n	623a <prvTimerTask+0x3e>
		*pxTimerListsWereSwitched = pdFALSE;
    6238:	2400      	movs	r4, #0
	xLastTime = xTimeNow;
    623a:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
    623e:	f8df b188 	ldr.w	fp, [pc, #392]	; 63c8 <prvTimerTask+0x1cc>
		if (xTimerListsWereSwitched == pdFALSE) {
    6242:	2c00      	cmp	r4, #0
    6244:	d147      	bne.n	62d6 <prvTimerTask+0xda>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    6246:	f1b8 0f00 	cmp.w	r8, #0
    624a:	d02d      	beq.n	62a8 <prvTimerTask+0xac>
    624c:	45b2      	cmp	sl, r6
    624e:	d331      	bcc.n	62b4 <prvTimerTask+0xb8>
				(void)xTaskResumeAll();
    6250:	47d8      	blx	fp
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6254:	68db      	ldr	r3, [r3, #12]
    6256:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    625a:	4b54      	ldr	r3, [pc, #336]	; (63ac <prvTimerTask+0x1b0>)
    625c:	f10b 0004 	add.w	r0, fp, #4
    6260:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6262:	f8db 301c 	ldr.w	r3, [fp, #28]
    6266:	2b01      	cmp	r3, #1
    6268:	d11a      	bne.n	62a0 <prvTimerTask+0xa4>
		if (prvInsertTimerInActiveList(
    626a:	f8db 1018 	ldr.w	r1, [fp, #24]
    626e:	4652      	mov	r2, sl
    6270:	4633      	mov	r3, r6
    6272:	4431      	add	r1, r6
    6274:	4658      	mov	r0, fp
    6276:	f8df a140 	ldr.w	sl, [pc, #320]	; 63b8 <prvTimerTask+0x1bc>
    627a:	47d0      	blx	sl
    627c:	b180      	cbz	r0, 62a0 <prvTimerTask+0xa4>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    627e:	9400      	str	r4, [sp, #0]
    6280:	4623      	mov	r3, r4
    6282:	4621      	mov	r1, r4
    6284:	4632      	mov	r2, r6
    6286:	4658      	mov	r0, fp
    6288:	4c49      	ldr	r4, [pc, #292]	; (63b0 <prvTimerTask+0x1b4>)
    628a:	47a0      	blx	r4
			configASSERT(xResult);
    628c:	b940      	cbnz	r0, 62a0 <prvTimerTask+0xa4>
    628e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6292:	f383 8811 	msr	BASEPRI, r3
    6296:	f3bf 8f6f 	isb	sy
    629a:	f3bf 8f4f 	dsb	sy
    629e:	e7fe      	b.n	629e <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    62a0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    62a4:	4658      	mov	r0, fp
    62a6:	e049      	b.n	633c <prvTimerTask+0x140>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    62a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    62aa:	681a      	ldr	r2, [r3, #0]
    62ac:	fab2 f282 	clz	r2, r2
    62b0:	0952      	lsrs	r2, r2, #5
    62b2:	e000      	b.n	62b6 <prvTimerTask+0xba>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    62b4:	4622      	mov	r2, r4
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    62b6:	ebca 0106 	rsb	r1, sl, r6
    62ba:	6828      	ldr	r0, [r5, #0]
    62bc:	4b3d      	ldr	r3, [pc, #244]	; (63b4 <prvTimerTask+0x1b8>)
    62be:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    62c0:	47d8      	blx	fp
    62c2:	b990      	cbnz	r0, 62ea <prvTimerTask+0xee>
					portYIELD_WITHIN_API();
    62c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    62c8:	f8c9 3000 	str.w	r3, [r9]
    62cc:	f3bf 8f4f 	dsb	sy
    62d0:	f3bf 8f6f 	isb	sy
    62d4:	e009      	b.n	62ea <prvTimerTask+0xee>
			(void)xTaskResumeAll();
    62d6:	47d8      	blx	fp
    62d8:	e007      	b.n	62ea <prvTimerTask+0xee>
				if (prvInsertTimerInActiveList(pxTimer,
    62da:	69a1      	ldr	r1, [r4, #24]
    62dc:	9b06      	ldr	r3, [sp, #24]
    62de:	4e36      	ldr	r6, [pc, #216]	; (63b8 <prvTimerTask+0x1bc>)
    62e0:	465a      	mov	r2, fp
    62e2:	4419      	add	r1, r3
    62e4:	4620      	mov	r0, r4
    62e6:	47b0      	blx	r6
    62e8:	bb50      	cbnz	r0, 6340 <prvTimerTask+0x144>
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    62ea:	4e34      	ldr	r6, [pc, #208]	; (63bc <prvTimerTask+0x1c0>)
    62ec:	6828      	ldr	r0, [r5, #0]
    62ee:	2200      	movs	r2, #0
    62f0:	a905      	add	r1, sp, #20
    62f2:	47b0      	blx	r6
    62f4:	2800      	cmp	r0, #0
    62f6:	d088      	beq.n	620a <prvTimerTask+0xe>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    62f8:	9b05      	ldr	r3, [sp, #20]
    62fa:	2b00      	cmp	r3, #0
    62fc:	dbf6      	blt.n	62ec <prvTimerTask+0xf0>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    62fe:	9c07      	ldr	r4, [sp, #28]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6300:	6963      	ldr	r3, [r4, #20]
    6302:	b113      	cbz	r3, 630a <prvTimerTask+0x10e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6304:	1d20      	adds	r0, r4, #4
    6306:	4b29      	ldr	r3, [pc, #164]	; (63ac <prvTimerTask+0x1b0>)
    6308:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
    630a:	9b03      	ldr	r3, [sp, #12]
    630c:	4798      	blx	r3
	if (xTimeNow < xLastTime) {
    630e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6310:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
    6312:	4683      	mov	fp, r0
	if (xTimeNow < xLastTime) {
    6314:	d201      	bcs.n	631a <prvTimerTask+0x11e>
		prvSwitchTimerLists();
    6316:	4b24      	ldr	r3, [pc, #144]	; (63a8 <prvTimerTask+0x1ac>)
    6318:	4798      	blx	r3
    631a:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
    631c:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
    6320:	2a09      	cmp	r2, #9
    6322:	d8e3      	bhi.n	62ec <prvTimerTask+0xf0>
    6324:	2301      	movs	r3, #1
    6326:	4093      	lsls	r3, r2
    6328:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
    632c:	d123      	bne.n	6376 <prvTimerTask+0x17a>
    632e:	f013 0fc7 	tst.w	r3, #199	; 0xc7
    6332:	d1d2      	bne.n	62da <prvTimerTask+0xde>
    6334:	069b      	lsls	r3, r3, #26
    6336:	d5d9      	bpl.n	62ec <prvTimerTask+0xf0>
				vPortFree(pxTimer);
    6338:	4b21      	ldr	r3, [pc, #132]	; (63c0 <prvTimerTask+0x1c4>)
    633a:	4620      	mov	r0, r4
    633c:	4798      	blx	r3
    633e:	e7d4      	b.n	62ea <prvTimerTask+0xee>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6340:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6342:	4620      	mov	r0, r4
    6344:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6346:	69e3      	ldr	r3, [r4, #28]
    6348:	2b01      	cmp	r3, #1
    634a:	d1ce      	bne.n	62ea <prvTimerTask+0xee>
						xResult = xTimerGenericCommand(pxTimer,
    634c:	69a2      	ldr	r2, [r4, #24]
    634e:	9906      	ldr	r1, [sp, #24]
    6350:	f8cd a000 	str.w	sl, [sp]
    6354:	440a      	add	r2, r1
    6356:	4620      	mov	r0, r4
    6358:	4653      	mov	r3, sl
    635a:	4651      	mov	r1, sl
    635c:	4c14      	ldr	r4, [pc, #80]	; (63b0 <prvTimerTask+0x1b4>)
    635e:	47a0      	blx	r4
						configASSERT(xResult);
    6360:	2800      	cmp	r0, #0
    6362:	d1c2      	bne.n	62ea <prvTimerTask+0xee>
    6364:	f04f 0380 	mov.w	r3, #128	; 0x80
    6368:	f383 8811 	msr	BASEPRI, r3
    636c:	f3bf 8f6f 	isb	sy
    6370:	f3bf 8f4f 	dsb	sy
    6374:	e7fe      	b.n	6374 <prvTimerTask+0x178>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6376:	9906      	ldr	r1, [sp, #24]
    6378:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    637a:	b941      	cbnz	r1, 638e <prvTimerTask+0x192>
    637c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6380:	f383 8811 	msr	BASEPRI, r3
    6384:	f3bf 8f6f 	isb	sy
    6388:	f3bf 8f4f 	dsb	sy
    638c:	e7fe      	b.n	638c <prvTimerTask+0x190>
				(void)prvInsertTimerInActiveList(
    638e:	465b      	mov	r3, fp
    6390:	465a      	mov	r2, fp
    6392:	4459      	add	r1, fp
    6394:	4620      	mov	r0, r4
    6396:	4c08      	ldr	r4, [pc, #32]	; (63b8 <prvTimerTask+0x1bc>)
    6398:	47a0      	blx	r4
    639a:	e7a6      	b.n	62ea <prvTimerTask+0xee>
    639c:	20000be8 	.word	0x20000be8
    63a0:	00007cb5 	.word	0x00007cb5
    63a4:	00007cc9 	.word	0x00007cc9
    63a8:	00006179 	.word	0x00006179
    63ac:	0000436d 	.word	0x0000436d
    63b0:	00006115 	.word	0x00006115
    63b4:	00004f25 	.word	0x00004f25
    63b8:	00006089 	.word	0x00006089
    63bc:	00004dc1 	.word	0x00004dc1
    63c0:	000043e9 	.word	0x000043e9
    63c4:	e000ed04 	.word	0xe000ed04
    63c8:	00007dcd 	.word	0x00007dcd

000063cc <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    63cc:	4b05      	ldr	r3, [pc, #20]	; (63e4 <delay_ms+0x18>)
{
    63ce:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    63d0:	681c      	ldr	r4, [r3, #0]
    63d2:	4b05      	ldr	r3, [pc, #20]	; (63e8 <delay_ms+0x1c>)
    63d4:	4798      	blx	r3
    63d6:	4b05      	ldr	r3, [pc, #20]	; (63ec <delay_ms+0x20>)
    63d8:	4601      	mov	r1, r0
    63da:	4620      	mov	r0, r4
}
    63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    63e0:	4718      	bx	r3
    63e2:	bf00      	nop
    63e4:	20000c24 	.word	0x20000c24
    63e8:	00004859 	.word	0x00004859
    63ec:	00004871 	.word	0x00004871

000063f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    63f0:	e7fe      	b.n	63f0 <Dummy_Handler>
	...

000063f4 <Reset_Handler>:
{
    63f4:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
    63f6:	4a15      	ldr	r2, [pc, #84]	; (644c <Reset_Handler+0x58>)
    63f8:	4b15      	ldr	r3, [pc, #84]	; (6450 <Reset_Handler+0x5c>)
    63fa:	429a      	cmp	r2, r3
    63fc:	d002      	beq.n	6404 <Reset_Handler+0x10>
    63fe:	3a04      	subs	r2, #4
		for (; pDest < &_erelocate;) {
    6400:	4914      	ldr	r1, [pc, #80]	; (6454 <Reset_Handler+0x60>)
    6402:	e003      	b.n	640c <Reset_Handler+0x18>
{
    6404:	4b14      	ldr	r3, [pc, #80]	; (6458 <Reset_Handler+0x64>)
	for (pDest = &_szero; pDest < &_ezero;) {
    6406:	4a15      	ldr	r2, [pc, #84]	; (645c <Reset_Handler+0x68>)
		*pDest++ = 0;
    6408:	2100      	movs	r1, #0
    640a:	e006      	b.n	641a <Reset_Handler+0x26>
		for (; pDest < &_erelocate;) {
    640c:	428b      	cmp	r3, r1
    640e:	d2f9      	bcs.n	6404 <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
    6410:	f852 0f04 	ldr.w	r0, [r2, #4]!
    6414:	f843 0b04 	str.w	r0, [r3], #4
    6418:	e7f8      	b.n	640c <Reset_Handler+0x18>
	for (pDest = &_szero; pDest < &_ezero;) {
    641a:	4293      	cmp	r3, r2
    641c:	d202      	bcs.n	6424 <Reset_Handler+0x30>
		*pDest++ = 0;
    641e:	f843 1b04 	str.w	r1, [r3], #4
    6422:	e7fa      	b.n	641a <Reset_Handler+0x26>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    6424:	4a0e      	ldr	r2, [pc, #56]	; (6460 <Reset_Handler+0x6c>)
    6426:	4b0f      	ldr	r3, [pc, #60]	; (6464 <Reset_Handler+0x70>)
    6428:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    642c:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
    642e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6432:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    6436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    643a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    643e:	f3bf 8f6f 	isb	sy
	__libc_init_array();
    6442:	4b09      	ldr	r3, [pc, #36]	; (6468 <Reset_Handler+0x74>)
    6444:	4798      	blx	r3
	main();
    6446:	4b09      	ldr	r3, [pc, #36]	; (646c <Reset_Handler+0x78>)
    6448:	4798      	blx	r3
    644a:	e7fe      	b.n	644a <Reset_Handler+0x56>
    644c:	00008638 	.word	0x00008638
    6450:	20000000 	.word	0x20000000
    6454:	2000000c 	.word	0x2000000c
    6458:	20000010 	.word	0x20000010
    645c:	20000e5c 	.word	0x20000e5c
    6460:	00004000 	.word	0x00004000
    6464:	e000ed00 	.word	0xe000ed00
    6468:	00008171 	.word	0x00008171
    646c:	00007491 	.word	0x00007491

00006470 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6470:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6472:	4a0a      	ldr	r2, [pc, #40]	; (649c <_init_chip+0x2c>)

	_osc32kctrl_init_sources();
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6474:	4c0a      	ldr	r4, [pc, #40]	; (64a0 <_init_chip+0x30>)
    6476:	8813      	ldrh	r3, [r2, #0]
    6478:	b29b      	uxth	r3, r3
    647a:	8013      	strh	r3, [r2, #0]
	_osc32kctrl_init_sources();
    647c:	4b09      	ldr	r3, [pc, #36]	; (64a4 <_init_chip+0x34>)
    647e:	4798      	blx	r3
	_oscctrl_init_sources();
    6480:	4b09      	ldr	r3, [pc, #36]	; (64a8 <_init_chip+0x38>)
    6482:	4798      	blx	r3
	_mclk_init();
    6484:	4b09      	ldr	r3, [pc, #36]	; (64ac <_init_chip+0x3c>)
    6486:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6488:	2028      	movs	r0, #40	; 0x28
    648a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    648c:	4b08      	ldr	r3, [pc, #32]	; (64b0 <_init_chip+0x40>)
    648e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6490:	4623      	mov	r3, r4
    6492:	f640 70d7 	movw	r0, #4055	; 0xfd7
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    649a:	4718      	bx	r3
    649c:	41004000 	.word	0x41004000
    64a0:	00006915 	.word	0x00006915
    64a4:	00006ed1 	.word	0x00006ed1
    64a8:	00006543 	.word	0x00006543
    64ac:	000066a9 	.word	0x000066a9
    64b0:	00006545 	.word	0x00006545

000064b4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    64b4:	b507      	push	{r0, r1, r2, lr}
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    64b6:	4a0b      	ldr	r2, [pc, #44]	; (64e4 <RAMECC_Handler+0x30>)
    64b8:	7893      	ldrb	r3, [r2, #2]
    64ba:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    64bc:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    64be:	9b01      	ldr	r3, [sp, #4]
    64c0:	0799      	lsls	r1, r3, #30
    64c2:	d502      	bpl.n	64ca <RAMECC_Handler+0x16>
    64c4:	4b08      	ldr	r3, [pc, #32]	; (64e8 <RAMECC_Handler+0x34>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	b933      	cbnz	r3, 64d8 <RAMECC_Handler+0x24>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    64ca:	9b01      	ldr	r3, [sp, #4]
    64cc:	07db      	lsls	r3, r3, #31
    64ce:	d505      	bpl.n	64dc <RAMECC_Handler+0x28>
    64d0:	4b05      	ldr	r3, [pc, #20]	; (64e8 <RAMECC_Handler+0x34>)
    64d2:	685b      	ldr	r3, [r3, #4]
    64d4:	b113      	cbz	r3, 64dc <RAMECC_Handler+0x28>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    64d6:	4a03      	ldr	r2, [pc, #12]	; (64e4 <RAMECC_Handler+0x30>)
    64d8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    64da:	4798      	blx	r3
	} else {
		return;
	}
}
    64dc:	b003      	add	sp, #12
    64de:	f85d fb04 	ldr.w	pc, [sp], #4
    64e2:	bf00      	nop
    64e4:	41020000 	.word	0x41020000
    64e8:	20000dfc 	.word	0x20000dfc

000064ec <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    64ec:	6800      	ldr	r0, [r0, #0]
    64ee:	b118      	cbz	r0, 64f8 <is_list_element+0xc>
		if (it == element) {
    64f0:	4288      	cmp	r0, r1
    64f2:	d1fb      	bne.n	64ec <is_list_element>
			return true;
    64f4:	2001      	movs	r0, #1
		}
	}

	return false;
}
    64f6:	4770      	bx	lr
    64f8:	4770      	bx	lr
	...

000064fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    64fc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    64fe:	4b07      	ldr	r3, [pc, #28]	; (651c <list_insert_as_head+0x20>)
{
    6500:	460d      	mov	r5, r1
    6502:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    6504:	4798      	blx	r3
    6506:	f080 0001 	eor.w	r0, r0, #1
    650a:	4b05      	ldr	r3, [pc, #20]	; (6520 <list_insert_as_head+0x24>)
    650c:	4905      	ldr	r1, [pc, #20]	; (6524 <list_insert_as_head+0x28>)
    650e:	2239      	movs	r2, #57	; 0x39
    6510:	b2c0      	uxtb	r0, r0
    6512:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    6514:	6823      	ldr	r3, [r4, #0]
    6516:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    6518:	6025      	str	r5, [r4, #0]
    651a:	bd38      	pop	{r3, r4, r5, pc}
    651c:	000064ed 	.word	0x000064ed
    6520:	0000653d 	.word	0x0000653d
    6524:	00008514 	.word	0x00008514

00006528 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6528:	6803      	ldr	r3, [r0, #0]
    652a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    652c:	6001      	str	r1, [r0, #0]
    652e:	4770      	bx	lr

00006530 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    6530:	6803      	ldr	r3, [r0, #0]
    6532:	b10b      	cbz	r3, 6538 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    6534:	681a      	ldr	r2, [r3, #0]
    6536:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    6538:	4618      	mov	r0, r3
    653a:	4770      	bx	lr

0000653c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    653c:	b900      	cbnz	r0, 6540 <assert+0x4>
		__asm("BKPT #0");
    653e:	be00      	bkpt	0x0000
    6540:	4770      	bx	lr

00006542 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6542:	4770      	bx	lr

00006544 <_oscctrl_init_referenced_generators>:

static inline void hri_gclk_write_GENCTRL_SRC_bf(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	uint32_t tmp;
	GCLK_CRITICAL_SECTION_ENTER();
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6544:	4b3b      	ldr	r3, [pc, #236]	; (6634 <_oscctrl_init_referenced_generators+0xf0>)
    6546:	6a1a      	ldr	r2, [r3, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6548:	f022 020f 	bic.w	r2, r2, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    654c:	f042 0204 	orr.w	r2, r2, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6550:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6552:	6859      	ldr	r1, [r3, #4]
    6554:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6558:	400a      	ands	r2, r1
    655a:	2a00      	cmp	r2, #0
    655c:	d1f9      	bne.n	6552 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    655e:	685a      	ldr	r2, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6560:	f012 0204 	ands.w	r2, r2, #4
    6564:	d1fb      	bne.n	655e <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6566:	4b34      	ldr	r3, [pc, #208]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
    6568:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    656a:	4a34      	ldr	r2, [pc, #208]	; (663c <_oscctrl_init_referenced_generators+0xf8>)
    656c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    656e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
    6572:	4a31      	ldr	r2, [pc, #196]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6574:	f001 0110 	and.w	r1, r1, #16
    6578:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    657c:	2900      	cmp	r1, #0
    657e:	d1f6      	bne.n	656e <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6580:	f882 0020 	strb.w	r0, [r2, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6584:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    6588:	492b      	ldr	r1, [pc, #172]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    658a:	f013 0f04 	tst.w	r3, #4
    658e:	d1f9      	bne.n	6584 <_oscctrl_init_referenced_generators+0x40>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6590:	2302      	movs	r3, #2
    6592:	770b      	strb	r3, [r1, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6594:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    6598:	4b27      	ldr	r3, [pc, #156]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    659a:	0792      	lsls	r2, r2, #30
    659c:	d4fa      	bmi.n	6594 <_oscctrl_init_referenced_generators+0x50>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    659e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    65a0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    65a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    65a6:	f012 0f08 	tst.w	r2, #8
    65aa:	4a23      	ldr	r2, [pc, #140]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
    65ac:	d1f9      	bne.n	65a2 <_oscctrl_init_referenced_generators+0x5e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    65ae:	2380      	movs	r3, #128	; 0x80
    65b0:	f882 3020 	strb.w	r3, [r2, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    65b4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    65b8:	4b1f      	ldr	r3, [pc, #124]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    65ba:	0748      	lsls	r0, r1, #29
    65bc:	d4fa      	bmi.n	65b4 <_oscctrl_init_referenced_generators+0x70>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    65be:	223b      	movs	r2, #59	; 0x3b
    65c0:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    65c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    65c4:	f012 0f06 	tst.w	r2, #6
    65c8:	4a1b      	ldr	r2, [pc, #108]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
    65ca:	d1fa      	bne.n	65c2 <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    65cc:	2320      	movs	r3, #32
    65ce:	6393      	str	r3, [r2, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    65d0:	2302      	movs	r3, #2
    65d2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    65d6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    65d8:	4b17      	ldr	r3, [pc, #92]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
    65da:	0789      	lsls	r1, r1, #30
    65dc:	d4fb      	bmi.n	65d6 <_oscctrl_init_referenced_generators+0x92>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    65de:	f893 2020 	ldrb.w	r2, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    65e2:	07d2      	lsls	r2, r2, #31
    65e4:	d506      	bpl.n	65f4 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    65e6:	691a      	ldr	r2, [r3, #16]
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    65e8:	f402 6210 	and.w	r2, r2, #2304	; 0x900
    65ec:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    65f0:	d1f9      	bne.n	65e6 <_oscctrl_init_referenced_generators+0xa2>
    65f2:	e002      	b.n	65fa <_oscctrl_init_referenced_generators+0xb6>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    65f4:	691a      	ldr	r2, [r3, #16]
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    65f6:	05d0      	lsls	r0, r2, #23
    65f8:	d5fc      	bpl.n	65f4 <_oscctrl_init_referenced_generators+0xb0>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    65fa:	4b0f      	ldr	r3, [pc, #60]	; (6638 <_oscctrl_init_referenced_generators+0xf4>)
    65fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    65fe:	07d1      	lsls	r1, r2, #31
    6600:	d402      	bmi.n	6608 <_oscctrl_init_referenced_generators+0xc4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6604:	0792      	lsls	r2, r2, #30
    6606:	d5f9      	bpl.n	65fc <_oscctrl_init_referenced_generators+0xb8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6608:	490a      	ldr	r1, [pc, #40]	; (6634 <_oscctrl_init_referenced_generators+0xf0>)
    660a:	684b      	ldr	r3, [r1, #4]
    660c:	4a09      	ldr	r2, [pc, #36]	; (6634 <_oscctrl_init_referenced_generators+0xf0>)
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    660e:	2b00      	cmp	r3, #0
    6610:	d1fb      	bne.n	660a <_oscctrl_init_referenced_generators+0xc6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6612:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6614:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6618:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    661c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    661e:	6851      	ldr	r1, [r2, #4]
    6620:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    6624:	400b      	ands	r3, r1
    6626:	2b00      	cmp	r3, #0
    6628:	d1f9      	bne.n	661e <_oscctrl_init_referenced_generators+0xda>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    662a:	4a02      	ldr	r2, [pc, #8]	; (6634 <_oscctrl_init_referenced_generators+0xf0>)
    662c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    662e:	075b      	lsls	r3, r3, #29
    6630:	d4fc      	bmi.n	662c <_oscctrl_init_referenced_generators+0xe8>
		;
#endif
	(void)hw;
}
    6632:	4770      	bx	lr
    6634:	40001c00 	.word	0x40001c00
    6638:	40001000 	.word	0x40001000
    663c:	04010000 	.word	0x04010000

00006640 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    6640:	b538      	push	{r3, r4, r5, lr}
    6642:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    6644:	4605      	mov	r5, r0
    6646:	b118      	cbz	r0, 6650 <_mci_sync_init+0x10>
    6648:	1c08      	adds	r0, r1, #0
    664a:	bf18      	it	ne
    664c:	2001      	movne	r0, #1
    664e:	e7ff      	b.n	6650 <_mci_sync_init+0x10>
    6650:	4b13      	ldr	r3, [pc, #76]	; (66a0 <_mci_sync_init+0x60>)
    6652:	4914      	ldr	r1, [pc, #80]	; (66a4 <_mci_sync_init+0x64>)
    6654:	22d8      	movs	r2, #216	; 0xd8
    6656:	f000 0001 	and.w	r0, r0, #1
    665a:	4798      	blx	r3

	mci_dev->hw = hw;
    665c:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    665e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    6662:	f043 0301 	orr.w	r3, r3, #1
    6666:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
    666a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    666e:	f010 0001 	ands.w	r0, r0, #1
    6672:	d1fa      	bne.n	666a <_mci_sync_init+0x2a>
	((Sdhc *)hw)->TCR.reg = data;
    6674:	230e      	movs	r3, #14
    6676:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    667a:	230f      	movs	r3, #15
    667c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
    6680:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    6682:	b29b      	uxth	r3, r3
    6684:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6688:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    668c:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
    668e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    6690:	b29b      	uxth	r3, r3
    6692:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    6696:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    669a:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    669c:	bd38      	pop	{r3, r4, r5, pc}
    669e:	bf00      	nop
    66a0:	0000653d 	.word	0x0000653d
    66a4:	00008532 	.word	0x00008532

000066a8 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
    66a8:	4b01      	ldr	r3, [pc, #4]	; (66b0 <_mclk_init+0x8>)
    66aa:	2201      	movs	r2, #1
    66ac:	715a      	strb	r2, [r3, #5]
    66ae:	4770      	bx	lr
    66b0:	40000800 	.word	0x40000800

000066b4 <hri_sercomspi_wait_for_sync>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    66b4:	69c3      	ldr	r3, [r0, #28]
    66b6:	420b      	tst	r3, r1
    66b8:	d1fc      	bne.n	66b4 <hri_sercomspi_wait_for_sync>
	};
}
    66ba:	4770      	bx	lr

000066bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    66bc:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    66be:	4d0b      	ldr	r5, [pc, #44]	; (66ec <_sercom_get_hardware_index+0x30>)
{
    66c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    66c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    66c4:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    66c6:	466c      	mov	r4, sp
    66c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    66ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    66ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    66d2:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    66d4:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    66d8:	42b3      	cmp	r3, r6
    66da:	d101      	bne.n	66e0 <_sercom_get_hardware_index+0x24>
			return i;
    66dc:	b2c0      	uxtb	r0, r0
    66de:	e003      	b.n	66e8 <_sercom_get_hardware_index+0x2c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    66e0:	3001      	adds	r0, #1
    66e2:	2808      	cmp	r0, #8
    66e4:	d1f6      	bne.n	66d4 <_sercom_get_hardware_index+0x18>
		}
	}
	return 0;
    66e6:	2000      	movs	r0, #0
}
    66e8:	b008      	add	sp, #32
    66ea:	bd70      	pop	{r4, r5, r6, pc}
    66ec:	0000854c 	.word	0x0000854c

000066f0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    66f4:	4b51      	ldr	r3, [pc, #324]	; (683c <_spi_m_sync_init+0x14c>)
    66f6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 684c <_spi_m_sync_init+0x15c>
{
    66fa:	4606      	mov	r6, r0
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    66fc:	4608      	mov	r0, r1
{
    66fe:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6700:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    6702:	b920      	cbnz	r0, 670e <_spi_m_sync_init+0x1e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    6704:	2e00      	cmp	r6, #0
    6706:	f000 8089 	beq.w	681c <_spi_m_sync_init+0x12c>
			return &sercomspi_regs[i];
    670a:	4d4d      	ldr	r5, [pc, #308]	; (6840 <_spi_m_sync_init+0x150>)
    670c:	e003      	b.n	6716 <_spi_m_sync_init+0x26>
	ASSERT(dev && hw);
    670e:	2e00      	cmp	r6, #0
    6710:	f000 808a 	beq.w	6828 <_spi_m_sync_init+0x138>
	return NULL;
    6714:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    6716:	1c20      	adds	r0, r4, #0
    6718:	bf18      	it	ne
    671a:	2001      	movne	r0, #1
    671c:	f640 1236 	movw	r2, #2358	; 0x936
    6720:	4948      	ldr	r1, [pc, #288]	; (6844 <_spi_m_sync_init+0x154>)
    6722:	47c0      	blx	r8

	if (regs == NULL) {
    6724:	2d00      	cmp	r5, #0
    6726:	f000 8084 	beq.w	6832 <_spi_m_sync_init+0x142>

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    672a:	69e3      	ldr	r3, [r4, #28]
    672c:	4a46      	ldr	r2, [pc, #280]	; (6848 <_spi_m_sync_init+0x158>)
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    672e:	f013 0f01 	tst.w	r3, #1
    6732:	d118      	bne.n	6766 <_spi_m_sync_init+0x76>

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6734:	2103      	movs	r1, #3
    6736:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6738:	682f      	ldr	r7, [r5, #0]
    673a:	4790      	blx	r2
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    673c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    673e:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6740:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6744:	d509      	bpl.n	675a <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6746:	6823      	ldr	r3, [r4, #0]
    6748:	f023 0302 	bic.w	r3, r3, #2
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    674c:	2103      	movs	r1, #3
    674e:	4620      	mov	r0, r4
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6750:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6752:	4790      	blx	r2
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6754:	2102      	movs	r1, #2
    6756:	4620      	mov	r0, r4
    6758:	4790      	blx	r2
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    675a:	f047 0701 	orr.w	r7, r7, #1
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    675e:	6027      	str	r7, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6760:	2103      	movs	r1, #3
    6762:	4620      	mov	r0, r4
    6764:	4790      	blx	r2
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6766:	2101      	movs	r1, #1
    6768:	4620      	mov	r0, r4
    676a:	4790      	blx	r2

	dev->prvt = hw;
    676c:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    676e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6770:	4f35      	ldr	r7, [pc, #212]	; (6848 <_spi_m_sync_init+0x158>)
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6772:	f003 031c 	and.w	r3, r3, #28
    6776:	2b08      	cmp	r3, #8
    6778:	d123      	bne.n	67c2 <_spi_m_sync_init+0xd2>
	ASSERT(hw && regs);
    677a:	f640 1214 	movw	r2, #2324	; 0x914
    677e:	4931      	ldr	r1, [pc, #196]	; (6844 <_spi_m_sync_init+0x154>)
    6780:	2001      	movs	r0, #1
    6782:	47c0      	blx	r8
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6784:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6786:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    678a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    678e:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6790:	2103      	movs	r1, #3
    6792:	4620      	mov	r0, r4
    6794:	47b8      	blx	r7
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6796:	686b      	ldr	r3, [r5, #4]
	hri_sercomspi_write_CTRLB_reg(hw,
    6798:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    679c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
    67a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    67a4:	f443 7310 	orr.w	r3, r3, #576	; 0x240
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    67a8:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    67aa:	2117      	movs	r1, #23
    67ac:	4620      	mov	r0, r4
    67ae:	47b8      	blx	r7
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    67b0:	68ab      	ldr	r3, [r5, #8]
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    67b2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67b4:	7b6b      	ldrb	r3, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    67b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    67ba:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    67bc:	2b00      	cmp	r3, #0
    67be:	d1fc      	bne.n	67ba <_spi_m_sync_init+0xca>
    67c0:	e01d      	b.n	67fe <_spi_m_sync_init+0x10e>
	ASSERT(hw && regs);
    67c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
    67c6:	491f      	ldr	r1, [pc, #124]	; (6844 <_spi_m_sync_init+0x154>)
    67c8:	2001      	movs	r0, #1
    67ca:	47c0      	blx	r8
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67cc:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    67ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67d2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    67d6:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67d8:	2103      	movs	r1, #3
    67da:	4620      	mov	r0, r4
    67dc:	47b8      	blx	r7
	    (regs->ctrlb
    67de:	686b      	ldr	r3, [r5, #4]
	hri_sercomspi_write_CTRLB_reg(
    67e0:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    67e4:	f423 7310 	bic.w	r3, r3, #576	; 0x240
    67e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    67ec:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    67ee:	2117      	movs	r1, #23
    67f0:	4620      	mov	r0, r4
    67f2:	47b8      	blx	r7
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    67f4:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    67f6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67f8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    67fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    67fe:	686b      	ldr	r3, [r5, #4]
    6800:	f013 0f07 	tst.w	r3, #7
    6804:	bf0c      	ite	eq
    6806:	2301      	moveq	r3, #1
    6808:	2302      	movne	r3, #2
    680a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    680c:	7bab      	ldrb	r3, [r5, #14]
    680e:	7bea      	ldrb	r2, [r5, #15]
    6810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6814:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    6816:	2000      	movs	r0, #0
    6818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    681c:	f640 1236 	movw	r2, #2358	; 0x936
    6820:	4908      	ldr	r1, [pc, #32]	; (6844 <_spi_m_sync_init+0x154>)
			return &sercomspi_regs[i];
    6822:	4d07      	ldr	r5, [pc, #28]	; (6840 <_spi_m_sync_init+0x150>)
	ASSERT(dev && hw);
    6824:	47c0      	blx	r8
    6826:	e780      	b.n	672a <_spi_m_sync_init+0x3a>
    6828:	f640 1236 	movw	r2, #2358	; 0x936
    682c:	4905      	ldr	r1, [pc, #20]	; (6844 <_spi_m_sync_init+0x154>)
    682e:	4630      	mov	r0, r6
    6830:	47c0      	blx	r8
		return ERR_INVALID_ARG;
    6832:	f06f 000c 	mvn.w	r0, #12
    6836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    683a:	bf00      	nop
    683c:	000066bd 	.word	0x000066bd
    6840:	00008584 	.word	0x00008584
    6844:	00008595 	.word	0x00008595
    6848:	000066b5 	.word	0x000066b5
    684c:	0000653d 	.word	0x0000653d

00006850 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void *                 hw   = dev->prvt;
    6854:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6856:	f890 8004 	ldrb.w	r8, [r0, #4]
    685a:	680e      	ldr	r6, [r1, #0]
    685c:	684d      	ldr	r5, [r1, #4]

	ASSERT(dev && hw);
    685e:	4b2a      	ldr	r3, [pc, #168]	; (6908 <_spi_m_sync_trans+0xb8>)
{
    6860:	4607      	mov	r7, r0
	ASSERT(dev && hw);
    6862:	1c20      	adds	r0, r4, #0
    6864:	f640 229a 	movw	r2, #2714	; 0xa9a
    6868:	bf18      	it	ne
    686a:	2001      	movne	r0, #1
{
    686c:	4689      	mov	r9, r1
	ASSERT(dev && hw);
    686e:	4927      	ldr	r1, [pc, #156]	; (690c <_spi_m_sync_trans+0xbc>)
    6870:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6872:	69e2      	ldr	r2, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6874:	f012 0207 	ands.w	r2, r2, #7
    6878:	d132      	bne.n	68e0 <_spi_m_sync_trans+0x90>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    687a:	2103      	movs	r1, #3
    687c:	4b24      	ldr	r3, [pc, #144]	; (6910 <_spi_m_sync_trans+0xc0>)
    687e:	4620      	mov	r0, r4
    6880:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6882:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6884:	0799      	lsls	r1, r3, #30
    6886:	d52f      	bpl.n	68e8 <_spi_m_sync_trans+0x98>
    6888:	4610      	mov	r0, r2
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    688a:	7e21      	ldrb	r1, [r4, #24]
    688c:	b2c9      	uxtb	r1, r1
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    688e:	074b      	lsls	r3, r1, #29
    6890:	d50b      	bpl.n	68aa <_spi_m_sync_trans+0x5a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    6892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    6894:	b13d      	cbz	r5, 68a6 <_spi_m_sync_trans+0x56>
		if (ctrl->char_size > 1) {
    6896:	f1b8 0f01 	cmp.w	r8, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    689a:	702b      	strb	r3, [r5, #0]
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    689c:	bf85      	ittet	hi
    689e:	0a1b      	lsrhi	r3, r3, #8
    68a0:	706b      	strbhi	r3, [r5, #1]
		*ctrl->rxbuf++ = (uint8_t)data;
    68a2:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    68a4:	3502      	addhi	r5, #2
	ctrl->rxcnt++;
    68a6:	3201      	adds	r2, #1
    68a8:	e003      	b.n	68b2 <_spi_m_sync_trans+0x62>
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    68aa:	4282      	cmp	r2, r0
    68ac:	d301      	bcc.n	68b2 <_spi_m_sync_trans+0x62>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    68ae:	07cb      	lsls	r3, r1, #31
    68b0:	d41e      	bmi.n	68f0 <_spi_m_sync_trans+0xa0>
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    68b2:	0609      	lsls	r1, r1, #24
    68b4:	d507      	bpl.n	68c6 <_spi_m_sync_trans+0x76>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    68b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    68ba:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    68bc:	2380      	movs	r3, #128	; 0x80
    68be:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    68c0:	f06f 0012 	mvn.w	r0, #18
    68c4:	e005      	b.n	68d2 <_spi_m_sync_trans+0x82>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    68c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    68ca:	4298      	cmp	r0, r3
    68cc:	d3dd      	bcc.n	688a <_spi_m_sync_trans+0x3a>
    68ce:	429a      	cmp	r2, r3
    68d0:	d3db      	bcc.n	688a <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    68d2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    68d4:	079b      	lsls	r3, r3, #30
    68d6:	d0fc      	beq.n	68d2 <_spi_m_sync_trans+0x82>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    68d8:	2303      	movs	r3, #3
    68da:	7623      	strb	r3, [r4, #24]
    68dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_BUSY;
    68e0:	f06f 0003 	mvn.w	r0, #3
    68e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    68e8:	f06f 0013 	mvn.w	r0, #19
    68ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    68f0:	88fb      	ldrh	r3, [r7, #6]
	if (ctrl->txbuf) {
    68f2:	b136      	cbz	r6, 6902 <_spi_m_sync_trans+0xb2>
		if (ctrl->char_size > 1) {
    68f4:	f1b8 0f01 	cmp.w	r8, #1
		data = *ctrl->txbuf++;
    68f8:	7833      	ldrb	r3, [r6, #0]
			data |= (*ctrl->txbuf) << 8;
    68fa:	bf8c      	ite	hi
    68fc:	f836 3b02 	ldrhhi.w	r3, [r6], #2
		data = *ctrl->txbuf++;
    6900:	3601      	addls	r6, #1
	ctrl->txcnt++;
    6902:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    6904:	62a3      	str	r3, [r4, #40]	; 0x28
    6906:	e7d4      	b.n	68b2 <_spi_m_sync_trans+0x62>
    6908:	0000653d 	.word	0x0000653d
    690c:	00008595 	.word	0x00008595
    6910:	000066b5 	.word	0x000066b5

00006914 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6914:	07c1      	lsls	r1, r0, #31
    6916:	d402      	bmi.n	691e <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6918:	0702      	lsls	r2, r0, #28
    691a:	d513      	bpl.n	6944 <_gclk_init_generators_by_fref+0x30>
    691c:	e009      	b.n	6932 <_gclk_init_generators_by_fref+0x1e>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
    691e:	4b0f      	ldr	r3, [pc, #60]	; (695c <_gclk_init_generators_by_fref+0x48>)
    6920:	4a0f      	ldr	r2, [pc, #60]	; (6960 <_gclk_init_generators_by_fref+0x4c>)
    6922:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6924:	6859      	ldr	r1, [r3, #4]
    6926:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    692a:	400a      	ands	r2, r1
    692c:	2a00      	cmp	r2, #0
    692e:	d1f9      	bne.n	6924 <_gclk_init_generators_by_fref+0x10>
    6930:	e7f2      	b.n	6918 <_gclk_init_generators_by_fref+0x4>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6932:	4b0a      	ldr	r3, [pc, #40]	; (695c <_gclk_init_generators_by_fref+0x48>)
    6934:	4a0b      	ldr	r2, [pc, #44]	; (6964 <_gclk_init_generators_by_fref+0x50>)
    6936:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6938:	6859      	ldr	r1, [r3, #4]
    693a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    693e:	400a      	ands	r2, r1
    6940:	2a00      	cmp	r2, #0
    6942:	d1f9      	bne.n	6938 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6944:	0683      	lsls	r3, r0, #26
    6946:	d508      	bpl.n	695a <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6948:	4b04      	ldr	r3, [pc, #16]	; (695c <_gclk_init_generators_by_fref+0x48>)
    694a:	4a07      	ldr	r2, [pc, #28]	; (6968 <_gclk_init_generators_by_fref+0x54>)
    694c:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    694e:	6859      	ldr	r1, [r3, #4]
    6950:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6954:	400a      	ands	r2, r1
    6956:	2a00      	cmp	r2, #0
    6958:	d1f9      	bne.n	694e <_gclk_init_generators_by_fref+0x3a>
    695a:	4770      	bx	lr
    695c:	40001c00 	.word	0x40001c00
    6960:	00010107 	.word	0x00010107
    6964:	00010105 	.word	0x00010105
    6968:	00180106 	.word	0x00180106

0000696c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    696c:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    696e:	4288      	cmp	r0, r1
    6970:	d207      	bcs.n	6982 <usb_find_desc+0x16>
    6972:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6974:	2b01      	cmp	r3, #1
    6976:	d904      	bls.n	6982 <usb_find_desc+0x16>
		if (type == usb_desc_type(desc)) {
    6978:	7844      	ldrb	r4, [r0, #1]
    697a:	4294      	cmp	r4, r2
    697c:	d002      	beq.n	6984 <usb_find_desc+0x18>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    697e:	4418      	add	r0, r3
    6980:	e7f5      	b.n	696e <usb_find_desc+0x2>
		_desc_len_check();
    6982:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    6984:	bd10      	pop	{r4, pc}
	...

00006988 <usb_find_cfg_desc>:
	}
	return NULL;
}

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    6988:	b538      	push	{r3, r4, r5, lr}
    698a:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    698c:	4b0c      	ldr	r3, [pc, #48]	; (69c0 <usb_find_cfg_desc+0x38>)
    698e:	2202      	movs	r2, #2
{
    6990:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    6992:	4798      	blx	r3
	if (!desc) {
    6994:	b978      	cbnz	r0, 69b6 <usb_find_cfg_desc+0x2e>
    6996:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    6998:	7803      	ldrb	r3, [r0, #0]
    699a:	2b01      	cmp	r3, #1
    699c:	d90d      	bls.n	69ba <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    699e:	7843      	ldrb	r3, [r0, #1]
    69a0:	2b02      	cmp	r3, #2
    69a2:	d10a      	bne.n	69ba <usb_find_cfg_desc+0x32>
			break;
		}
		if (desc[5] == cfg_value) {
    69a4:	7943      	ldrb	r3, [r0, #5]
    69a6:	42ab      	cmp	r3, r5
    69a8:	d008      	beq.n	69bc <usb_find_cfg_desc+0x34>
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    69aa:	78c2      	ldrb	r2, [r0, #3]
    69ac:	7883      	ldrb	r3, [r0, #2]
    69ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    69b2:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    69b6:	42a0      	cmp	r0, r4
    69b8:	d3ee      	bcc.n	6998 <usb_find_cfg_desc+0x10>
		return NULL;
    69ba:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    69bc:	bd38      	pop	{r3, r4, r5, pc}
    69be:	bf00      	nop
    69c0:	0000696d 	.word	0x0000696d

000069c4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    69c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    69c6:	4f0a      	ldr	r7, [pc, #40]	; (69f0 <usb_find_str_desc+0x2c>)
{
    69c8:	460d      	mov	r5, r1
    69ca:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    69cc:	2400      	movs	r4, #0
    69ce:	42a8      	cmp	r0, r5
    69d0:	d20b      	bcs.n	69ea <usb_find_str_desc+0x26>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    69d2:	2203      	movs	r2, #3
    69d4:	4629      	mov	r1, r5
    69d6:	47b8      	blx	r7
		if (desc) {
    69d8:	b140      	cbz	r0, 69ec <usb_find_str_desc+0x28>
    69da:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    69dc:	2b01      	cmp	r3, #1
    69de:	d904      	bls.n	69ea <usb_find_str_desc+0x26>
			if (i == str_index) {
    69e0:	42b4      	cmp	r4, r6
    69e2:	d003      	beq.n	69ec <usb_find_str_desc+0x28>
	return (desc + usb_desc_len(desc));
    69e4:	4418      	add	r0, r3
    69e6:	3401      	adds	r4, #1
    69e8:	e7f1      	b.n	69ce <usb_find_str_desc+0xa>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    69ea:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    69ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ee:	bf00      	nop
    69f0:	0000696d 	.word	0x0000696d

000069f4 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    69f4:	490a      	ldr	r1, [pc, #40]	; (6a20 <_usb_d_find_ep+0x2c>)
{
    69f6:	b570      	push	{r4, r5, r6, lr}
    69f8:	4602      	mov	r2, r0
    69fa:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    69fc:	f000 060f 	and.w	r6, r0, #15
    6a00:	015d      	lsls	r5, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6a02:	194c      	adds	r4, r1, r5
    6a04:	b258      	sxtb	r0, r3
    6a06:	7864      	ldrb	r4, [r4, #1]
    6a08:	4294      	cmp	r4, r2
    6a0a:	d008      	beq.n	6a1e <_usb_d_find_ep+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6a0c:	5c6d      	ldrb	r5, [r5, r1]
    6a0e:	b90d      	cbnz	r5, 6a14 <_usb_d_find_ep+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6a10:	42a6      	cmp	r6, r4
    6a12:	d004      	beq.n	6a1e <_usb_d_find_ep+0x2a>
    6a14:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6a16:	2b04      	cmp	r3, #4
    6a18:	d1f2      	bne.n	6a00 <_usb_d_find_ep+0xc>
			return i;
		}
	}
	return -1;
    6a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6a1e:	bd70      	pop	{r4, r5, r6, pc}
    6a20:	20000c28 	.word	0x20000c28

00006a24 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    6a24:	2000      	movs	r0, #0
    6a26:	4770      	bx	lr

00006a28 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6a28:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a2a:	4b09      	ldr	r3, [pc, #36]	; (6a50 <usb_d_cb_trans_more+0x28>)
{
    6a2c:	4604      	mov	r4, r0
    6a2e:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a30:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6a32:	4b08      	ldr	r3, [pc, #32]	; (6a54 <usb_d_cb_trans_more+0x2c>)
    6a34:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6a38:	7883      	ldrb	r3, [r0, #2]
    6a3a:	2b03      	cmp	r3, #3
    6a3c:	d105      	bne.n	6a4a <usb_d_cb_trans_more+0x22>
		return ept->callbacks.more(ep, transfered);
    6a3e:	6983      	ldr	r3, [r0, #24]
    6a40:	4629      	mov	r1, r5
    6a42:	4620      	mov	r0, r4
	}
	return false;
}
    6a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ept->callbacks.more(ep, transfered);
    6a48:	4718      	bx	r3
}
    6a4a:	2000      	movs	r0, #0
    6a4c:	bd70      	pop	{r4, r5, r6, pc}
    6a4e:	bf00      	nop
    6a50:	000069f5 	.word	0x000069f5
    6a54:	20000c28 	.word	0x20000c28

00006a58 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a5c:	4b3a      	ldr	r3, [pc, #232]	; (6b48 <_usb_d_cb_trans_done+0xf0>)
    6a5e:	4e3b      	ldr	r6, [pc, #236]	; (6b4c <_usb_d_cb_trans_done+0xf4>)
{
    6a60:	b085      	sub	sp, #20
    6a62:	4680      	mov	r8, r0
    6a64:	460d      	mov	r5, r1
    6a66:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a68:	4798      	blx	r3
    6a6a:	0144      	lsls	r4, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    6a6c:	2d00      	cmp	r5, #0
    6a6e:	d13e      	bne.n	6aee <_usb_d_cb_trans_done+0x96>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6a70:	1937      	adds	r7, r6, r4
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6a72:	5d31      	ldrb	r1, [r6, r4]
		ept->xfer.hdr.status = USB_XFER_DONE;
    6a74:	70fd      	strb	r5, [r7, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6a76:	2900      	cmp	r1, #0
    6a78:	d136      	bne.n	6ae8 <_usb_d_cb_trans_done+0x90>
	if (state == USB_EP_S_X_DATA) {
    6a7a:	78bb      	ldrb	r3, [r7, #2]
    6a7c:	7878      	ldrb	r0, [r7, #1]
    6a7e:	2b03      	cmp	r3, #3
    6a80:	f104 0208 	add.w	r2, r4, #8
    6a84:	69fb      	ldr	r3, [r7, #28]
    6a86:	d129      	bne.n	6adc <_usb_d_cb_trans_done+0x84>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6a88:	4432      	add	r2, r6
    6a8a:	3204      	adds	r2, #4
    6a8c:	2101      	movs	r1, #1
    6a8e:	7b3c      	ldrb	r4, [r7, #12]
    6a90:	4798      	blx	r3
    6a92:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
    6a96:	b2e4      	uxtb	r4, r4
    6a98:	787b      	ldrb	r3, [r7, #1]
		if (err) {
    6a9a:	b160      	cbz	r0, 6ab6 <_usb_d_cb_trans_done+0x5e>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6a9c:	2205      	movs	r2, #5
    6a9e:	70ba      	strb	r2, [r7, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6aa0:	2202      	movs	r2, #2
    6aa2:	70fa      	strb	r2, [r7, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6aa4:	b10c      	cbz	r4, 6aaa <_usb_d_cb_trans_done+0x52>
    6aa6:	4618      	mov	r0, r3
    6aa8:	e001      	b.n	6aae <_usb_d_cb_trans_done+0x56>
    6aaa:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    6aae:	2101      	movs	r1, #1
    6ab0:	4b27      	ldr	r3, [pc, #156]	; (6b50 <_usb_d_cb_trans_done+0xf8>)
    6ab2:	4798      	blx	r3
    6ab4:	e044      	b.n	6b40 <_usb_d_cb_trans_done+0xe8>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6ab6:	2204      	movs	r2, #4
    6ab8:	70ba      	strb	r2, [r7, #2]
	struct usb_d_transfer trans
    6aba:	9001      	str	r0, [sp, #4]
    6abc:	9002      	str	r0, [sp, #8]
    6abe:	b914      	cbnz	r4, 6ac6 <_usb_d_cb_trans_done+0x6e>
    6ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6ac4:	e001      	b.n	6aca <_usb_d_cb_trans_done+0x72>
    6ac6:	f003 030f 	and.w	r3, r3, #15
    6aca:	f88d 300c 	strb.w	r3, [sp, #12]
    6ace:	2301      	movs	r3, #1
    6ad0:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6ad4:	a801      	add	r0, sp, #4
    6ad6:	4b1f      	ldr	r3, [pc, #124]	; (6b54 <_usb_d_cb_trans_done+0xfc>)
    6ad8:	4798      	blx	r3
    6ada:	e031      	b.n	6b40 <_usb_d_cb_trans_done+0xe8>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6adc:	4432      	add	r2, r6
    6ade:	3204      	adds	r2, #4
    6ae0:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6ae2:	2302      	movs	r3, #2
    6ae4:	70bb      	strb	r3, [r7, #2]
    6ae6:	e02b      	b.n	6b40 <_usb_d_cb_trans_done+0xe8>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6ae8:	2301      	movs	r3, #1
    6aea:	70bb      	strb	r3, [r7, #2]
    6aec:	e022      	b.n	6b34 <_usb_d_cb_trans_done+0xdc>
	} else if (code == USB_TRANS_STALL) {
    6aee:	2d01      	cmp	r5, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    6af0:	eb06 0304 	add.w	r3, r6, r4
	} else if (code == USB_TRANS_STALL) {
    6af4:	d10a      	bne.n	6b0c <_usb_d_cb_trans_done+0xb4>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6af6:	5d31      	ldrb	r1, [r6, r4]
		ept->xfer.hdr.status = USB_XFER_HALT;
    6af8:	2202      	movs	r2, #2
    6afa:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6afc:	b921      	cbnz	r1, 6b08 <_usb_d_cb_trans_done+0xb0>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6afe:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6b00:	4640      	mov	r0, r8
    6b02:	4b13      	ldr	r3, [pc, #76]	; (6b50 <_usb_d_cb_trans_done+0xf8>)
    6b04:	4798      	blx	r3
    6b06:	e015      	b.n	6b34 <_usb_d_cb_trans_done+0xdc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6b08:	2205      	movs	r2, #5
    6b0a:	e008      	b.n	6b1e <_usb_d_cb_trans_done+0xc6>
		}
	} else if (code == USB_TRANS_ABORT) {
    6b0c:	2d02      	cmp	r5, #2
    6b0e:	d108      	bne.n	6b22 <_usb_d_cb_trans_done+0xca>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6b10:	2204      	movs	r2, #4
    6b12:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6b14:	5d32      	ldrb	r2, [r6, r4]
    6b16:	b90a      	cbnz	r2, 6b1c <_usb_d_cb_trans_done+0xc4>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6b18:	709d      	strb	r5, [r3, #2]
			return;
    6b1a:	e011      	b.n	6b40 <_usb_d_cb_trans_done+0xe8>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6b1c:	2201      	movs	r2, #1
    6b1e:	709a      	strb	r2, [r3, #2]
    6b20:	e008      	b.n	6b34 <_usb_d_cb_trans_done+0xdc>
	} else if (code == USB_TRANS_RESET) {
    6b22:	2d03      	cmp	r5, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6b24:	bf09      	itett	eq
    6b26:	2200      	moveq	r2, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6b28:	2206      	movne	r2, #6
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6b2a:	709a      	strbeq	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6b2c:	2205      	moveq	r2, #5
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6b2e:	bf18      	it	ne
    6b30:	709a      	strbne	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6b32:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6b34:	4434      	add	r4, r6
    6b36:	464a      	mov	r2, r9
    6b38:	69e3      	ldr	r3, [r4, #28]
    6b3a:	78e1      	ldrb	r1, [r4, #3]
    6b3c:	4640      	mov	r0, r8
    6b3e:	4798      	blx	r3
}
    6b40:	b005      	add	sp, #20
    6b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b46:	bf00      	nop
    6b48:	000069f5 	.word	0x000069f5
    6b4c:	20000c28 	.word	0x20000c28
    6b50:	00005d79 	.word	0x00005d79
    6b54:	00005eb5 	.word	0x00005eb5

00006b58 <usb_d_cb_trans_setup>:
{
    6b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b5c:	4b1b      	ldr	r3, [pc, #108]	; (6bcc <usb_d_cb_trans_setup+0x74>)
	uint8_t *        req      = ept->xfer.req;
    6b5e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 6bd8 <usb_d_cb_trans_setup+0x80>
    6b62:	4c1b      	ldr	r4, [pc, #108]	; (6bd0 <usb_d_cb_trans_setup+0x78>)
{
    6b64:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b66:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    6b68:	0146      	lsls	r6, r0, #5
    6b6a:	eb09 0806 	add.w	r8, r9, r6
    6b6e:	f108 080c 	add.w	r8, r8, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6b72:	4641      	mov	r1, r8
    6b74:	4628      	mov	r0, r5
    6b76:	4b17      	ldr	r3, [pc, #92]	; (6bd4 <usb_d_cb_trans_setup+0x7c>)
    6b78:	4798      	blx	r3
	if (n != 8) {
    6b7a:	b2c0      	uxtb	r0, r0
    6b7c:	2808      	cmp	r0, #8
    6b7e:	f065 077f 	orn	r7, r5, #127	; 0x7f
    6b82:	d005      	beq.n	6b90 <usb_d_cb_trans_setup+0x38>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6b84:	2101      	movs	r1, #1
    6b86:	4628      	mov	r0, r5
    6b88:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6b8a:	2101      	movs	r1, #1
    6b8c:	b2f8      	uxtb	r0, r7
    6b8e:	e017      	b.n	6bc0 <usb_d_cb_trans_setup+0x68>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6b90:	444e      	add	r6, r9
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6b92:	2100      	movs	r1, #0
    6b94:	4628      	mov	r0, r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6b96:	b2ff      	uxtb	r7, r7
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6b98:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6b9a:	f04f 0901 	mov.w	r9, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6b9e:	2100      	movs	r1, #0
    6ba0:	4638      	mov	r0, r7
    6ba2:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6ba4:	f886 9002 	strb.w	r9, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    6ba8:	6973      	ldr	r3, [r6, #20]
    6baa:	4641      	mov	r1, r8
    6bac:	4628      	mov	r0, r5
    6bae:	4798      	blx	r3
    6bb0:	b950      	cbnz	r0, 6bc8 <usb_d_cb_trans_setup+0x70>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6bb2:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6bb4:	4649      	mov	r1, r9
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6bb6:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6bb8:	4628      	mov	r0, r5
    6bba:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6bbc:	4649      	mov	r1, r9
    6bbe:	4638      	mov	r0, r7
    6bc0:	4623      	mov	r3, r4
}
    6bc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6bc6:	4718      	bx	r3
    6bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bcc:	000069f5 	.word	0x000069f5
    6bd0:	00005d79 	.word	0x00005d79
    6bd4:	00005e5d 	.word	0x00005e5d
    6bd8:	20000c28 	.word	0x20000c28

00006bdc <usb_d_init>:

int32_t usb_d_init(void)
{
    6bdc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    6bde:	4b10      	ldr	r3, [pc, #64]	; (6c20 <usb_d_init+0x44>)
    6be0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    6be2:	2800      	cmp	r0, #0
    6be4:	db1b      	blt.n	6c1e <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6be6:	2280      	movs	r2, #128	; 0x80
    6be8:	2100      	movs	r1, #0
    6bea:	4b0e      	ldr	r3, [pc, #56]	; (6c24 <usb_d_init+0x48>)
    6bec:	480e      	ldr	r0, [pc, #56]	; (6c28 <usb_d_init+0x4c>)
    6bee:	4798      	blx	r3
    6bf0:	4b0d      	ldr	r3, [pc, #52]	; (6c28 <usb_d_init+0x4c>)
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6bf2:	4a0e      	ldr	r2, [pc, #56]	; (6c2c <usb_d_init+0x50>)
    6bf4:	f103 0180 	add.w	r1, r3, #128	; 0x80
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6bf8:	20ff      	movs	r0, #255	; 0xff
    6bfa:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6bfc:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6bfe:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6c00:	61da      	str	r2, [r3, #28]
    6c02:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6c04:	428b      	cmp	r3, r1
    6c06:	d1f8      	bne.n	6bfa <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6c08:	4c09      	ldr	r4, [pc, #36]	; (6c30 <usb_d_init+0x54>)
    6c0a:	490a      	ldr	r1, [pc, #40]	; (6c34 <usb_d_init+0x58>)
    6c0c:	2000      	movs	r0, #0
    6c0e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    6c10:	4909      	ldr	r1, [pc, #36]	; (6c38 <usb_d_init+0x5c>)
    6c12:	2001      	movs	r0, #1
    6c14:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6c16:	2002      	movs	r0, #2
    6c18:	4908      	ldr	r1, [pc, #32]	; (6c3c <usb_d_init+0x60>)
    6c1a:	47a0      	blx	r4
	return ERR_NONE;
    6c1c:	2000      	movs	r0, #0
}
    6c1e:	bd10      	pop	{r4, pc}
    6c20:	000059a5 	.word	0x000059a5
    6c24:	000082f5 	.word	0x000082f5
    6c28:	20000c28 	.word	0x20000c28
    6c2c:	00006a25 	.word	0x00006a25
    6c30:	00005ff1 	.word	0x00005ff1
    6c34:	00006b59 	.word	0x00006b59
    6c38:	00006a29 	.word	0x00006a29
    6c3c:	00006a59 	.word	0x00006a59

00006c40 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6c40:	4b00      	ldr	r3, [pc, #0]	; (6c44 <usb_d_register_callback+0x4>)
    6c42:	4718      	bx	r3
    6c44:	00005fcd 	.word	0x00005fcd

00006c48 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    6c48:	4b00      	ldr	r3, [pc, #0]	; (6c4c <usb_d_set_address+0x4>)
    6c4a:	4718      	bx	r3
    6c4c:	00005a91 	.word	0x00005a91

00006c50 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    6c52:	4c10      	ldr	r4, [pc, #64]	; (6c94 <usb_d_ep_init+0x44>)
{
    6c54:	4606      	mov	r6, r0
    6c56:	460d      	mov	r5, r1
    6c58:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6c5a:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    6c5c:	2800      	cmp	r0, #0
    6c5e:	da13      	bge.n	6c88 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6c60:	20ff      	movs	r0, #255	; 0xff
    6c62:	47a0      	blx	r4
		if (ep_index < 0) {
    6c64:	1e04      	subs	r4, r0, #0
    6c66:	db12      	blt.n	6c8e <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6c68:	463a      	mov	r2, r7
    6c6a:	4629      	mov	r1, r5
    6c6c:	4630      	mov	r0, r6
    6c6e:	4b0a      	ldr	r3, [pc, #40]	; (6c98 <usb_d_ep_init+0x48>)
    6c70:	4798      	blx	r3
	if (rc < 0) {
    6c72:	2800      	cmp	r0, #0
    6c74:	db0d      	blt.n	6c92 <usb_d_ep_init+0x42>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    6c76:	4b09      	ldr	r3, [pc, #36]	; (6c9c <usb_d_ep_init+0x4c>)
    6c78:	0160      	lsls	r0, r4, #5
    6c7a:	181a      	adds	r2, r3, r0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6c7c:	f005 0503 	and.w	r5, r5, #3
    6c80:	541d      	strb	r5, [r3, r0]
	ept->xfer.hdr.ep   = ep;
    6c82:	7056      	strb	r6, [r2, #1]
	return ERR_NONE;
    6c84:	2000      	movs	r0, #0
    6c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    6c88:	f06f 0013 	mvn.w	r0, #19
    6c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    6c8e:	f06f 0014 	mvn.w	r0, #20
}
    6c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c94:	000069f5 	.word	0x000069f5
    6c98:	00005a9d 	.word	0x00005a9d
    6c9c:	20000c28 	.word	0x20000c28

00006ca0 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    6ca0:	2100      	movs	r1, #0
    6ca2:	4602      	mov	r2, r0
    6ca4:	4b01      	ldr	r3, [pc, #4]	; (6cac <usb_d_ep0_init+0xc>)
    6ca6:	4608      	mov	r0, r1
    6ca8:	4718      	bx	r3
    6caa:	bf00      	nop
    6cac:	00006c51 	.word	0x00006c51

00006cb0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6cb0:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6cb2:	4b07      	ldr	r3, [pc, #28]	; (6cd0 <usb_d_ep_deinit+0x20>)
{
    6cb4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6cb6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    6cb8:	1e04      	subs	r4, r0, #0
    6cba:	db07      	blt.n	6ccc <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    6cbc:	4628      	mov	r0, r5
    6cbe:	4b05      	ldr	r3, [pc, #20]	; (6cd4 <usb_d_ep_deinit+0x24>)
    6cc0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    6cc2:	4805      	ldr	r0, [pc, #20]	; (6cd8 <usb_d_ep_deinit+0x28>)
    6cc4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6cc8:	23ff      	movs	r3, #255	; 0xff
    6cca:	7043      	strb	r3, [r0, #1]
    6ccc:	bd38      	pop	{r3, r4, r5, pc}
    6cce:	bf00      	nop
    6cd0:	000069f5 	.word	0x000069f5
    6cd4:	00005b69 	.word	0x00005b69
    6cd8:	20000c28 	.word	0x20000c28

00006cdc <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6cdc:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6cde:	4b0c      	ldr	r3, [pc, #48]	; (6d10 <usb_d_ep_enable+0x34>)
{
    6ce0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6ce2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    6ce4:	2800      	cmp	r0, #0
    6ce6:	db10      	blt.n	6d0a <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6ce8:	0140      	lsls	r0, r0, #5
    6cea:	4c0a      	ldr	r4, [pc, #40]	; (6d14 <usb_d_ep_enable+0x38>)
    6cec:	5c23      	ldrb	r3, [r4, r0]
    6cee:	4404      	add	r4, r0
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	bf0c      	ite	eq
    6cf4:	2302      	moveq	r3, #2
    6cf6:	2301      	movne	r3, #1
    6cf8:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    6cfa:	4628      	mov	r0, r5
    6cfc:	4b06      	ldr	r3, [pc, #24]	; (6d18 <usb_d_ep_enable+0x3c>)
    6cfe:	4798      	blx	r3
	if (rc < 0) {
    6d00:	2800      	cmp	r0, #0
    6d02:	da04      	bge.n	6d0e <usb_d_ep_enable+0x32>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6d04:	2300      	movs	r3, #0
    6d06:	70a3      	strb	r3, [r4, #2]
    6d08:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    6d0a:	f06f 0011 	mvn.w	r0, #17
	}
	return rc;
}
    6d0e:	bd38      	pop	{r3, r4, r5, pc}
    6d10:	000069f5 	.word	0x000069f5
    6d14:	20000c28 	.word	0x20000c28
    6d18:	00005be5 	.word	0x00005be5

00006d1c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6d20:	f890 a008 	ldrb.w	sl, [r0, #8]
    6d24:	4b39      	ldr	r3, [pc, #228]	; (6e0c <usb_d_ep_transfer+0xf0>)
{
    6d26:	4680      	mov	r8, r0
    6d28:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6d2a:	4650      	mov	r0, sl
    6d2c:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    6d2e:	f1b0 0900 	subs.w	r9, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6d32:	f898 4009 	ldrb.w	r4, [r8, #9]
	uint32_t              len = xfer->size;
    6d36:	f8d8 7004 	ldr.w	r7, [r8, #4]
	if (ep_index < 0) {
    6d3a:	db5f      	blt.n	6dfc <usb_d_ep_transfer+0xe0>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    6d3c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 6e1c <usb_d_ep_transfer+0x100>
	atomic_enter_critical(&flags);
    6d40:	4b33      	ldr	r3, [pc, #204]	; (6e10 <usb_d_ep_transfer+0xf4>)
	state = ept->xfer.hdr.state;
    6d42:	ea4f 1949 	mov.w	r9, r9, lsl #5
    6d46:	eb0b 0609 	add.w	r6, fp, r9
	atomic_enter_critical(&flags);
    6d4a:	a802      	add	r0, sp, #8
    6d4c:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6d4e:	78b3      	ldrb	r3, [r6, #2]
    6d50:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    6d54:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6d58:	4b2e      	ldr	r3, [pc, #184]	; (6e14 <usb_d_ep_transfer+0xf8>)
    6d5a:	b2c5      	uxtb	r5, r0
    6d5c:	2d01      	cmp	r5, #1
    6d5e:	d10c      	bne.n	6d7a <usb_d_ep_transfer+0x5e>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    6d60:	2203      	movs	r2, #3
    6d62:	70b2      	strb	r2, [r6, #2]
		atomic_leave_critical(&flags);
    6d64:	a802      	add	r0, sp, #8
    6d66:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6d68:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6d6c:	b1bb      	cbz	r3, 6d9e <usb_d_ep_transfer+0x82>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6d6e:	1c23      	adds	r3, r4, #0
    6d70:	ea4f 10da 	mov.w	r0, sl, lsr #7
    6d74:	bf18      	it	ne
    6d76:	2301      	movne	r3, #1
    6d78:	e02c      	b.n	6dd4 <usb_d_ep_transfer+0xb8>
		atomic_leave_critical(&flags);
    6d7a:	a802      	add	r0, sp, #8
    6d7c:	4798      	blx	r3
		switch (state) {
    6d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d82:	b2db      	uxtb	r3, r3
    6d84:	2b05      	cmp	r3, #5
    6d86:	d03c      	beq.n	6e02 <usb_d_ep_transfer+0xe6>
    6d88:	2b06      	cmp	r3, #6
    6d8a:	d005      	beq.n	6d98 <usb_d_ep_transfer+0x7c>
			return USB_BUSY;
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	bf0c      	ite	eq
    6d90:	f06f 0012 	mvneq.w	r0, #18
    6d94:	2001      	movne	r0, #1
    6d96:	e035      	b.n	6e04 <usb_d_ep_transfer+0xe8>
			return -USB_ERROR;
    6d98:	f06f 000f 	mvn.w	r0, #15
    6d9c:	e032      	b.n	6e04 <usb_d_ep_transfer+0xe8>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    6d9e:	7cf2      	ldrb	r2, [r6, #19]
    6da0:	7cb3      	ldrb	r3, [r6, #18]
    6da2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    6da6:	b29a      	uxth	r2, r3
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6da8:	b922      	cbnz	r2, 6db4 <usb_d_ep_transfer+0x98>
			dir                 = true;
			len                 = 0;
			zlp                 = true;
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6daa:	2304      	movs	r3, #4
    6dac:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    6dae:	4617      	mov	r7, r2
			zlp                 = true;
    6db0:	462b      	mov	r3, r5
    6db2:	e00e      	b.n	6dd2 <usb_d_ep_transfer+0xb6>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
			/* Data length not exceed requested. */
			if (len > req_len) {
				len = req_len;
			}
			if (dir) {
    6db4:	7b31      	ldrb	r1, [r6, #12]
    6db6:	4297      	cmp	r7, r2
    6db8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    6dbc:	bf28      	it	cs
    6dbe:	4617      	movcs	r7, r2
    6dc0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    6dc4:	b129      	cbz	r1, 6dd2 <usb_d_ep_transfer+0xb6>
				/* Setup -> In */
				zlp = (req_len > len);
    6dc6:	42ba      	cmp	r2, r7
    6dc8:	bf94      	ite	ls
    6dca:	2300      	movls	r3, #0
    6dcc:	2301      	movhi	r3, #1
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    6dce:	4628      	mov	r0, r5
    6dd0:	e000      	b.n	6dd4 <usb_d_ep_transfer+0xb8>
    6dd2:	4618      	mov	r0, r3
	struct usb_d_transfer trans
    6dd4:	f8d8 1000 	ldr.w	r1, [r8]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6dd8:	f898 2008 	ldrb.w	r2, [r8, #8]
	struct usb_d_transfer trans
    6ddc:	9103      	str	r1, [sp, #12]
    6dde:	9704      	str	r7, [sp, #16]
    6de0:	b110      	cbz	r0, 6de8 <usb_d_ep_transfer+0xcc>
    6de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6de6:	e001      	b.n	6dec <usb_d_ep_transfer+0xd0>
    6de8:	f002 020f 	and.w	r2, r2, #15
    6dec:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    6df0:	a803      	add	r0, sp, #12
    6df2:	4b09      	ldr	r3, [pc, #36]	; (6e18 <usb_d_ep_transfer+0xfc>)
	struct usb_d_transfer trans
    6df4:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    6df8:	4798      	blx	r3
	return rc;
    6dfa:	e003      	b.n	6e04 <usb_d_ep_transfer+0xe8>
		return -USB_ERR_PARAM;
    6dfc:	f06f 0011 	mvn.w	r0, #17
    6e00:	e000      	b.n	6e04 <usb_d_ep_transfer+0xe8>
			return USB_HALTED;
    6e02:	2002      	movs	r0, #2
}
    6e04:	b007      	add	sp, #28
    6e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e0a:	bf00      	nop
    6e0c:	000069f5 	.word	0x000069f5
    6e10:	00007445 	.word	0x00007445
    6e14:	00007453 	.word	0x00007453
    6e18:	00005eb5 	.word	0x00005eb5
    6e1c:	20000c28 	.word	0x20000c28

00006e20 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e24:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    6e26:	460c      	mov	r4, r1
    6e28:	b9d9      	cbnz	r1, 6e62 <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e2a:	4b13      	ldr	r3, [pc, #76]	; (6e78 <usb_d_ep_halt+0x58>)
    6e2c:	4798      	blx	r3
	if (ep_index < 0) {
    6e2e:	1e07      	subs	r7, r0, #0
    6e30:	db1e      	blt.n	6e70 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    6e32:	2102      	movs	r1, #2
    6e34:	4628      	mov	r0, r5
    6e36:	4e11      	ldr	r6, [pc, #68]	; (6e7c <usb_d_ep_halt+0x5c>)
    6e38:	47b0      	blx	r6
    6e3a:	b1d8      	cbz	r0, 6e74 <usb_d_ep_halt+0x54>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6e3c:	4621      	mov	r1, r4
    6e3e:	4628      	mov	r0, r5
    6e40:	47b0      	blx	r6
		if (rc < 0) {
    6e42:	2800      	cmp	r0, #0
    6e44:	db16      	blt.n	6e74 <usb_d_ep_halt+0x54>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6e46:	480e      	ldr	r0, [pc, #56]	; (6e80 <usb_d_ep_halt+0x60>)
    6e48:	eb00 1047 	add.w	r0, r0, r7, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6e4c:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6e4e:	2301      	movs	r3, #1
    6e50:	7083      	strb	r3, [r0, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6e52:	70c1      	strb	r1, [r0, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    6e54:	69c3      	ldr	r3, [r0, #28]
    6e56:	4622      	mov	r2, r4
    6e58:	4628      	mov	r0, r5
    6e5a:	4798      	blx	r3
	return ERR_NONE;
    6e5c:	4620      	mov	r0, r4
    6e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    6e62:	2901      	cmp	r1, #1
    6e64:	4b05      	ldr	r3, [pc, #20]	; (6e7c <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    6e66:	bf18      	it	ne
    6e68:	2102      	movne	r1, #2
	}
}
    6e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    6e6e:	4718      	bx	r3
		return -USB_ERR_PARAM;
    6e70:	f06f 0011 	mvn.w	r0, #17
}
    6e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e78:	000069f5 	.word	0x000069f5
    6e7c:	00005d79 	.word	0x00005d79
    6e80:	20000c28 	.word	0x20000c28

00006e84 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    6e84:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e86:	4b0f      	ldr	r3, [pc, #60]	; (6ec4 <usb_d_ep_register_callback+0x40>)
{
    6e88:	4614      	mov	r4, r2
    6e8a:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e8c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    6e8e:	4a0e      	ldr	r2, [pc, #56]	; (6ec8 <usb_d_ep_register_callback+0x44>)
    6e90:	2c00      	cmp	r4, #0
    6e92:	bf18      	it	ne
    6e94:	4622      	movne	r2, r4
	if (ep_index < 0) {
    6e96:	2800      	cmp	r0, #0
    6e98:	db13      	blt.n	6ec2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    6e9a:	2d01      	cmp	r5, #1
    6e9c:	d008      	beq.n	6eb0 <usb_d_ep_register_callback+0x2c>
    6e9e:	d302      	bcc.n	6ea6 <usb_d_ep_register_callback+0x22>
    6ea0:	2d02      	cmp	r5, #2
    6ea2:	d00a      	beq.n	6eba <usb_d_ep_register_callback+0x36>
    6ea4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6ea6:	4b09      	ldr	r3, [pc, #36]	; (6ecc <usb_d_ep_register_callback+0x48>)
    6ea8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6eac:	6142      	str	r2, [r0, #20]
		break;
    6eae:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6eb0:	4b06      	ldr	r3, [pc, #24]	; (6ecc <usb_d_ep_register_callback+0x48>)
    6eb2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6eb6:	6182      	str	r2, [r0, #24]
		break;
    6eb8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6eba:	4b04      	ldr	r3, [pc, #16]	; (6ecc <usb_d_ep_register_callback+0x48>)
    6ebc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6ec0:	61c2      	str	r2, [r0, #28]
    6ec2:	bd38      	pop	{r3, r4, r5, pc}
    6ec4:	000069f5 	.word	0x000069f5
    6ec8:	00006a25 	.word	0x00006a25
    6ecc:	20000c28 	.word	0x20000c28

00006ed0 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6ed0:	4b06      	ldr	r3, [pc, #24]	; (6eec <_osc32kctrl_init_sources+0x1c>)
    6ed2:	f242 0286 	movw	r2, #8326	; 0x2086
    6ed6:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6ed8:	2200      	movs	r2, #0
    6eda:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6edc:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6ede:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6ee0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6ee4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6ee6:	2205      	movs	r2, #5
    6ee8:	741a      	strb	r2, [r3, #16]
    6eea:	4770      	bx	lr
    6eec:	40001400 	.word	0x40001400

00006ef0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6ef0:	6903      	ldr	r3, [r0, #16]
    6ef2:	420b      	tst	r3, r1
    6ef4:	d1fc      	bne.n	6ef0 <hri_rtcmode0_wait_for_sync>
	};
}
    6ef6:	4770      	bx	lr

00006ef8 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    6ef8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(dev);
    6efa:	4604      	mov	r4, r0
{
    6efc:	460d      	mov	r5, r1
	ASSERT(dev);
    6efe:	3000      	adds	r0, #0
    6f00:	bf18      	it	ne
    6f02:	2001      	movne	r0, #1
    6f04:	4b11      	ldr	r3, [pc, #68]	; (6f4c <_timer_init+0x54>)
    6f06:	4912      	ldr	r1, [pc, #72]	; (6f50 <_timer_init+0x58>)
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6f08:	2601      	movs	r6, #1
    6f0a:	2230      	movs	r2, #48	; 0x30
    6f0c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6f0e:	4a11      	ldr	r2, [pc, #68]	; (6f54 <_timer_init+0x5c>)

	dev->hw = hw;
    6f10:	60e5      	str	r5, [r4, #12]
    6f12:	4628      	mov	r0, r5
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6f14:	802e      	strh	r6, [r5, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6f16:	f248 0103 	movw	r1, #32771	; 0x8003
    6f1a:	4790      	blx	r2

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6f1c:	4631      	mov	r1, r6
    6f1e:	68e0      	ldr	r0, [r4, #12]
    6f20:	4790      	blx	r2
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    6f22:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6f24:	f248 0380 	movw	r3, #32896	; 0x8080
    6f28:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6f2a:	f248 0103 	movw	r1, #32771	; 0x8003
    6f2e:	4790      	blx	r2
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    6f30:	68e0      	ldr	r0, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6f32:	2320      	movs	r3, #32
    6f34:	6203      	str	r3, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    6f36:	2160      	movs	r1, #96	; 0x60
    6f38:	4790      	blx	r2
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6f3a:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    6f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6f40:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    6f42:	4b05      	ldr	r3, [pc, #20]	; (6f58 <_timer_init+0x60>)

	return ERR_NONE;
}
    6f44:	2000      	movs	r0, #0
	_rtc_dev = dev;
    6f46:	601c      	str	r4, [r3, #0]
}
    6f48:	bd70      	pop	{r4, r5, r6, pc}
    6f4a:	bf00      	nop
    6f4c:	0000653d 	.word	0x0000653d
    6f50:	000085b0 	.word	0x000085b0
    6f54:	00006ef1 	.word	0x00006ef1
    6f58:	20000ca8 	.word	0x20000ca8

00006f5c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    6f5c:	2000      	movs	r0, #0
    6f5e:	4770      	bx	lr

00006f60 <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
    6f60:	4b07      	ldr	r3, [pc, #28]	; (6f80 <RTC_Handler+0x20>)
{
    6f62:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    6f64:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6f66:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6f68:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6f6a:	05db      	lsls	r3, r3, #23
    6f6c:	d507      	bpl.n	6f7e <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    6f6e:	6823      	ldr	r3, [r4, #0]
    6f70:	b10b      	cbz	r3, 6f76 <RTC_Handler+0x16>
			dev->timer_cb.period_expired(dev);
    6f72:	4620      	mov	r0, r4
    6f74:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6f76:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6f78:	f44f 7280 	mov.w	r2, #256	; 0x100
    6f7c:	819a      	strh	r2, [r3, #12]
    6f7e:	bd10      	pop	{r4, pc}
    6f80:	20000ca8 	.word	0x20000ca8

00006f84 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    6f84:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    6f86:	1c4a      	adds	r2, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
    6f88:	b2c4      	uxtb	r4, r0
    6f8a:	f004 031f 	and.w	r3, r4, #31
    6f8e:	f3c0 1047 	ubfx	r0, r0, #5, #8
	if (function == GPIO_PIN_FUNCTION_OFF) {
    6f92:	d10c      	bne.n	6fae <_gpio_set_pin_function+0x2a>
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6f94:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    6f98:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6f9c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    6fa0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    6fa4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6fa8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    6fac:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6fae:	01c0      	lsls	r0, r0, #7
    6fb0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6fb4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    6fb8:	18c5      	adds	r5, r0, r3
    6fba:	085b      	lsrs	r3, r3, #1
    6fbc:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    6fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6fc4:	f042 0201 	orr.w	r2, r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6fc8:	4403      	add	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6fca:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6fce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    6fd2:	f014 0f01 	tst.w	r4, #1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6fd6:	bf19      	ittee	ne
    6fd8:	f002 020f 	andne.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6fdc:	ea42 1101 	orrne.w	r1, r2, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
    6fe0:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6fe4:	f002 02f0 	andeq.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
    6fe8:	bf14      	ite	ne
    6fea:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
    6fec:	4311      	orreq	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6fee:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
    6ff2:	bd30      	pop	{r4, r5, pc}

00006ff4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    6ff4:	2201      	movs	r2, #1
    6ff6:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    6ff8:	4291      	cmp	r1, r2
    6ffa:	f000 001f 	and.w	r0, r0, #31
    6ffe:	fa02 f000 	lsl.w	r0, r2, r0
    7002:	d010      	beq.n	7026 <gpio_set_pin_direction+0x32>
    7004:	d308      	bcc.n	7018 <gpio_set_pin_direction+0x24>
    7006:	2902      	cmp	r1, #2
    7008:	d128      	bne.n	705c <gpio_set_pin_direction+0x68>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    700a:	01db      	lsls	r3, r3, #7
    700c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7010:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7014:	6098      	str	r0, [r3, #8]
    7016:	e018      	b.n	704a <gpio_set_pin_direction+0x56>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7018:	01db      	lsls	r3, r3, #7
    701a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    701e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7022:	6058      	str	r0, [r3, #4]
    7024:	e011      	b.n	704a <gpio_set_pin_direction+0x56>
    7026:	01db      	lsls	r3, r3, #7
    7028:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    702c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    7030:	b282      	uxth	r2, r0
    7032:	6058      	str	r0, [r3, #4]
    7034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		hri_port_write_WRCONFIG_reg(PORT,
    7038:	0c00      	lsrs	r0, r0, #16
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    703a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		hri_port_write_WRCONFIG_reg(PORT,
    703e:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7042:	629a      	str	r2, [r3, #40]	; 0x28
    7044:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
    7048:	e006      	b.n	7058 <gpio_set_pin_direction+0x64>
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    704a:	b282      	uxth	r2, r0
    704c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		hri_port_write_WRCONFIG_reg(
    7050:	0c00      	lsrs	r0, r0, #16
    7052:	629a      	str	r2, [r3, #40]	; 0x28
    7054:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    7058:	6298      	str	r0, [r3, #40]	; 0x28
    705a:	4770      	bx	lr
		ASSERT(false);
    705c:	2246      	movs	r2, #70	; 0x46
    705e:	4902      	ldr	r1, [pc, #8]	; (7068 <gpio_set_pin_direction+0x74>)
    7060:	4b02      	ldr	r3, [pc, #8]	; (706c <gpio_set_pin_direction+0x78>)
    7062:	2000      	movs	r0, #0
    7064:	4718      	bx	r3
    7066:	bf00      	nop
    7068:	000085c5 	.word	0x000085c5
    706c:	0000653d 	.word	0x0000653d

00007070 <_gpio_set_pin_pull_mode.constprop.1>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7070:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    7074:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7078:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    707c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    7080:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    7084:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    7088:	4770      	bx	lr
	...

0000708c <EXTERNAL_IRQ_0_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    708c:	4b05      	ldr	r3, [pc, #20]	; (70a4 <EXTERNAL_IRQ_0_init+0x18>)
    708e:	2240      	movs	r2, #64	; 0x40
    7090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    7094:	4a04      	ldr	r2, [pc, #16]	; (70a8 <EXTERNAL_IRQ_0_init+0x1c>)
    7096:	6953      	ldr	r3, [r2, #20]
    7098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    709c:	6153      	str	r3, [r2, #20]
void EXTERNAL_IRQ_0_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    709e:	4b03      	ldr	r3, [pc, #12]	; (70ac <EXTERNAL_IRQ_0_init+0x20>)
    70a0:	4718      	bx	r3
    70a2:	bf00      	nop
    70a4:	40001c00 	.word	0x40001c00
    70a8:	40000800 	.word	0x40000800
    70ac:	00007425 	.word	0x00007425

000070b0 <EVENT_SYSTEM_0_init>:
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    70b0:	4a03      	ldr	r2, [pc, #12]	; (70c0 <EVENT_SYSTEM_0_init+0x10>)
    70b2:	6993      	ldr	r3, [r2, #24]
    70b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    70b8:	6193      	str	r3, [r2, #24]
void EVENT_SYSTEM_0_init(void)
{

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    70ba:	4b02      	ldr	r3, [pc, #8]	; (70c4 <EVENT_SYSTEM_0_init+0x14>)
    70bc:	4718      	bx	r3
    70be:	bf00      	nop
    70c0:	40000800 	.word	0x40000800
    70c4:	000074d5 	.word	0x000074d5

000070c8 <SPI_0_PORT_init>:
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void SPI_0_PORT_init(void)
{
    70c8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70ca:	4e10      	ldr	r6, [pc, #64]	; (710c <SPI_0_PORT_init+0x44>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
    70cc:	4d10      	ldr	r5, [pc, #64]	; (7110 <SPI_0_PORT_init+0x48>)
	_gpio_set_pin_function(pin, function);
    70ce:	4c11      	ldr	r4, [pc, #68]	; (7114 <SPI_0_PORT_init+0x4c>)
    70d0:	2310      	movs	r3, #16
    70d2:	6173      	str	r3, [r6, #20]
    70d4:	2102      	movs	r1, #2
    70d6:	2004      	movs	r0, #4
    70d8:	47a8      	blx	r5
    70da:	490f      	ldr	r1, [pc, #60]	; (7118 <SPI_0_PORT_init+0x50>)
    70dc:	2004      	movs	r0, #4
    70de:	47a0      	blx	r4
    70e0:	2320      	movs	r3, #32
    70e2:	6173      	str	r3, [r6, #20]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
    70e4:	2102      	movs	r1, #2
    70e6:	2005      	movs	r0, #5
    70e8:	47a8      	blx	r5
    70ea:	490c      	ldr	r1, [pc, #48]	; (711c <SPI_0_PORT_init+0x54>)
    70ec:	2005      	movs	r0, #5
    70ee:	47a0      	blx	r4

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    70f0:	2101      	movs	r1, #1
    70f2:	2006      	movs	r0, #6
    70f4:	47a8      	blx	r5
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    70f6:	2106      	movs	r1, #6
    70f8:	2000      	movs	r0, #0
    70fa:	4b09      	ldr	r3, [pc, #36]	; (7120 <SPI_0_PORT_init+0x58>)
    70fc:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
    70fe:	4623      	mov	r3, r4
    7100:	4908      	ldr	r1, [pc, #32]	; (7124 <SPI_0_PORT_init+0x5c>)
    7102:	2006      	movs	r0, #6
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
}
    7104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7108:	4718      	bx	r3
    710a:	bf00      	nop
    710c:	41008000 	.word	0x41008000
    7110:	00006ff5 	.word	0x00006ff5
    7114:	00006f85 	.word	0x00006f85
    7118:	00040003 	.word	0x00040003
    711c:	00050003 	.word	0x00050003
    7120:	00007071 	.word	0x00007071
    7124:	00060003 	.word	0x00060003

00007128 <SPI_0_CLOCK_init>:
    7128:	4b06      	ldr	r3, [pc, #24]	; (7144 <SPI_0_CLOCK_init+0x1c>)
    712a:	2240      	movs	r2, #64	; 0x40
    712c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    7130:	2243      	movs	r2, #67	; 0x43
    7132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    7136:	4a04      	ldr	r2, [pc, #16]	; (7148 <SPI_0_CLOCK_init+0x20>)
    7138:	6953      	ldr	r3, [r2, #20]
    713a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    713e:	6153      	str	r3, [r2, #20]
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	40001c00 	.word	0x40001c00
    7148:	40000800 	.word	0x40000800

0000714c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
    714c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
    714e:	4b05      	ldr	r3, [pc, #20]	; (7164 <SPI_0_init+0x18>)
    7150:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
    7152:	4b05      	ldr	r3, [pc, #20]	; (7168 <SPI_0_init+0x1c>)
    7154:	4905      	ldr	r1, [pc, #20]	; (716c <SPI_0_init+0x20>)
    7156:	4806      	ldr	r0, [pc, #24]	; (7170 <SPI_0_init+0x24>)
    7158:	4798      	blx	r3
	SPI_0_PORT_init();
    715a:	4b06      	ldr	r3, [pc, #24]	; (7174 <SPI_0_init+0x28>)
}
    715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI_0_PORT_init();
    7160:	4718      	bx	r3
    7162:	bf00      	nop
    7164:	00007129 	.word	0x00007129
    7168:	00004f7d 	.word	0x00004f7d
    716c:	40003000 	.word	0x40003000
    7170:	20000e10 	.word	0x20000e10
    7174:	000070c9 	.word	0x000070c9

00007178 <IO_BUS_PORT_init>:

void IO_BUS_PORT_init(void)
{
    7178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    717c:	4e27      	ldr	r6, [pc, #156]	; (721c <IO_BUS_PORT_init+0xa4>)

	gpio_set_pin_direction(PB11,
    717e:	4f28      	ldr	r7, [pc, #160]	; (7220 <IO_BUS_PORT_init+0xa8>)
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    7180:	4d28      	ldr	r5, [pc, #160]	; (7224 <IO_BUS_PORT_init+0xac>)
	_gpio_set_pin_function(pin, function);
    7182:	4c29      	ldr	r4, [pc, #164]	; (7228 <IO_BUS_PORT_init+0xb0>)
    7184:	f44f 6900 	mov.w	r9, #2048	; 0x800
    7188:	2102      	movs	r1, #2
    718a:	202b      	movs	r0, #43	; 0x2b
    718c:	47b8      	blx	r7
    718e:	f8c6 9094 	str.w	r9, [r6, #148]	; 0x94
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    7192:	210b      	movs	r1, #11
    7194:	2001      	movs	r0, #1
    7196:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    7198:	4924      	ldr	r1, [pc, #144]	; (722c <IO_BUS_PORT_init+0xb4>)
    719a:	202b      	movs	r0, #43	; 0x2b
    719c:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB11I_SDHC0_SDCK);

	gpio_set_pin_direction(PA08,
    719e:	2102      	movs	r1, #2
    71a0:	2008      	movs	r0, #8
    71a2:	47b8      	blx	r7
    71a4:	f44f 7380 	mov.w	r3, #256	; 0x100
    71a8:	6173      	str	r3, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    71aa:	2108      	movs	r1, #8
    71ac:	2000      	movs	r0, #0
    71ae:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    71b0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
    71b4:	2008      	movs	r0, #8
    71b6:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08I_SDHC0_SDCMD);

	gpio_set_pin_direction(PA09,
    71b8:	2102      	movs	r1, #2
    71ba:	2009      	movs	r0, #9
    71bc:	47b8      	blx	r7
    71be:	f44f 7300 	mov.w	r3, #512	; 0x200
    71c2:	6173      	str	r3, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    71c4:	2109      	movs	r1, #9
    71c6:	2000      	movs	r0, #0
    71c8:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    71ca:	4919      	ldr	r1, [pc, #100]	; (7230 <IO_BUS_PORT_init+0xb8>)
    71cc:	2009      	movs	r0, #9
    71ce:	47a0      	blx	r4
    71d0:	f44f 6880 	mov.w	r8, #1024	; 0x400
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09I_SDHC0_SDDAT0);

	gpio_set_pin_direction(PA10,
    71d4:	2102      	movs	r1, #2
    71d6:	200a      	movs	r0, #10
    71d8:	47b8      	blx	r7
    71da:	f8c6 8014 	str.w	r8, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    71de:	210a      	movs	r1, #10
    71e0:	2000      	movs	r0, #0
    71e2:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    71e4:	4913      	ldr	r1, [pc, #76]	; (7234 <IO_BUS_PORT_init+0xbc>)
    71e6:	200a      	movs	r0, #10
    71e8:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10I_SDHC0_SDDAT1);

	gpio_set_pin_direction(PA11,
    71ea:	2102      	movs	r1, #2
    71ec:	200b      	movs	r0, #11
    71ee:	47b8      	blx	r7
    71f0:	f8c6 9014 	str.w	r9, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    71f4:	210b      	movs	r1, #11
    71f6:	2000      	movs	r0, #0
    71f8:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    71fa:	490f      	ldr	r1, [pc, #60]	; (7238 <IO_BUS_PORT_init+0xc0>)
    71fc:	200b      	movs	r0, #11
    71fe:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11I_SDHC0_SDDAT2);

	gpio_set_pin_direction(PB10,
    7200:	2102      	movs	r1, #2
    7202:	202a      	movs	r0, #42	; 0x2a
    7204:	47b8      	blx	r7
    7206:	f8c6 8094 	str.w	r8, [r6, #148]	; 0x94
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    720a:	210a      	movs	r1, #10
    720c:	2001      	movs	r0, #1
    720e:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    7210:	4623      	mov	r3, r4
    7212:	490a      	ldr	r1, [pc, #40]	; (723c <IO_BUS_PORT_init+0xc4>)
    7214:	202a      	movs	r0, #42	; 0x2a
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB10I_SDHC0_SDDAT3);
}
    7216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    721a:	4718      	bx	r3
    721c:	41008000 	.word	0x41008000
    7220:	00006ff5 	.word	0x00006ff5
    7224:	00007071 	.word	0x00007071
    7228:	00006f85 	.word	0x00006f85
    722c:	002b0008 	.word	0x002b0008
    7230:	00090008 	.word	0x00090008
    7234:	000a0008 	.word	0x000a0008
    7238:	000b0008 	.word	0x000b0008
    723c:	002a0008 	.word	0x002a0008

00007240 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
    7240:	4a05      	ldr	r2, [pc, #20]	; (7258 <IO_BUS_CLOCK_init+0x18>)
    7242:	6913      	ldr	r3, [r2, #16]
    7244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7248:	6113      	str	r3, [r2, #16]
    724a:	4b04      	ldr	r3, [pc, #16]	; (725c <IO_BUS_CLOCK_init+0x1c>)
    724c:	2240      	movs	r2, #64	; 0x40
    724e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    7252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    7256:	4770      	bx	lr
    7258:	40000800 	.word	0x40000800
    725c:	40001c00 	.word	0x40001c00

00007260 <IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC0_GCLK_ID, CONF_GCLK_SDHC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC0_GCLK_ID_SLOW, CONF_GCLK_SDHC0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void IO_BUS_init(void)
{
    7260:	b510      	push	{r4, lr}
	IO_BUS_CLOCK_init();
    7262:	4b05      	ldr	r3, [pc, #20]	; (7278 <IO_BUS_init+0x18>)
    7264:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
    7266:	4b05      	ldr	r3, [pc, #20]	; (727c <IO_BUS_init+0x1c>)
    7268:	4805      	ldr	r0, [pc, #20]	; (7280 <IO_BUS_init+0x20>)
    726a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
    726e:	4798      	blx	r3
	IO_BUS_PORT_init();
    7270:	4b04      	ldr	r3, [pc, #16]	; (7284 <IO_BUS_init+0x24>)
}
    7272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IO_BUS_PORT_init();
    7276:	4718      	bx	r3
    7278:	00007241 	.word	0x00007241
    727c:	00005195 	.word	0x00005195
    7280:	20000e28 	.word	0x20000e28
    7284:	00007179 	.word	0x00007179

00007288 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
    7288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	gpio_set_pin_direction(PA24,
    728c:	2102      	movs	r1, #2
    728e:	4f0f      	ldr	r7, [pc, #60]	; (72cc <USB_0_PORT_init+0x44>)
    7290:	4e0f      	ldr	r6, [pc, #60]	; (72d0 <USB_0_PORT_init+0x48>)
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    7292:	4d10      	ldr	r5, [pc, #64]	; (72d4 <USB_0_PORT_init+0x4c>)
	_gpio_set_pin_function(pin, function);
    7294:	4c10      	ldr	r4, [pc, #64]	; (72d8 <USB_0_PORT_init+0x50>)
    7296:	2018      	movs	r0, #24
    7298:	47b8      	blx	r7
    729a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    729e:	6173      	str	r3, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    72a0:	2118      	movs	r1, #24
    72a2:	2000      	movs	r0, #0
    72a4:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    72a6:	490d      	ldr	r1, [pc, #52]	; (72dc <USB_0_PORT_init+0x54>)
    72a8:	2018      	movs	r0, #24
    72aa:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    72ac:	2102      	movs	r1, #2
    72ae:	2019      	movs	r0, #25
    72b0:	47b8      	blx	r7
    72b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    72b6:	6173      	str	r3, [r6, #20]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    72b8:	2119      	movs	r1, #25
    72ba:	2000      	movs	r0, #0
    72bc:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
    72be:	4623      	mov	r3, r4
    72c0:	4907      	ldr	r1, [pc, #28]	; (72e0 <USB_0_PORT_init+0x58>)
    72c2:	2019      	movs	r0, #25
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    72c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72c8:	4718      	bx	r3
    72ca:	bf00      	nop
    72cc:	00006ff5 	.word	0x00006ff5
    72d0:	41008000 	.word	0x41008000
    72d4:	00007071 	.word	0x00007071
    72d8:	00006f85 	.word	0x00006f85
    72dc:	00180007 	.word	0x00180007
    72e0:	00190007 	.word	0x00190007

000072e4 <USB_0_CLOCK_init>:
    72e4:	4b07      	ldr	r3, [pc, #28]	; (7304 <USB_0_CLOCK_init+0x20>)
    72e6:	2240      	movs	r2, #64	; 0x40
    72e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    72ec:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    72f0:	691a      	ldr	r2, [r3, #16]
    72f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    72f6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    72f8:	699a      	ldr	r2, [r3, #24]
    72fa:	f042 0201 	orr.w	r2, r2, #1
    72fe:	619a      	str	r2, [r3, #24]
    7300:	4770      	bx	lr
    7302:	bf00      	nop
    7304:	40001c00 	.word	0x40001c00

00007308 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
    7308:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
    730a:	4b04      	ldr	r3, [pc, #16]	; (731c <USB_0_init+0x14>)
    730c:	4798      	blx	r3
	usb_d_init();
    730e:	4b04      	ldr	r3, [pc, #16]	; (7320 <USB_0_init+0x18>)
    7310:	4798      	blx	r3
	USB_0_PORT_init();
    7312:	4b04      	ldr	r3, [pc, #16]	; (7324 <USB_0_init+0x1c>)
}
    7314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_0_PORT_init();
    7318:	4718      	bx	r3
    731a:	bf00      	nop
    731c:	000072e5 	.word	0x000072e5
    7320:	00006bdd 	.word	0x00006bdd
    7324:	00007289 	.word	0x00007289

00007328 <system_init>:

void system_init(void)
{
    7328:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    732a:	4b26      	ldr	r3, [pc, #152]	; (73c4 <system_init+0x9c>)
    732c:	4c26      	ldr	r4, [pc, #152]	; (73c8 <system_init+0xa0>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(D12, GPIO_DIRECTION_OUT);
    732e:	4d27      	ldr	r5, [pc, #156]	; (73cc <system_init+0xa4>)
    7330:	4798      	blx	r3
    7332:	2301      	movs	r3, #1
    7334:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    7338:	2102      	movs	r1, #2
    733a:	2020      	movs	r0, #32
    733c:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    733e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7342:	2602      	movs	r6, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    7344:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7348:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(D13, GPIO_DIRECTION_OUT);
    734c:	4631      	mov	r1, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    734e:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
    7352:	2021      	movs	r0, #33	; 0x21
    7354:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7356:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
    735a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    735e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7362:	2304      	movs	r3, #4
    7364:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(D9, GPIO_DIRECTION_OUT);
    7368:	4631      	mov	r1, r6
    736a:	2022      	movs	r0, #34	; 0x22
    736c:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    736e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    7372:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7376:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    737a:	2308      	movs	r3, #8
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(A2, GPIO_DIRECTION_OUT);
    737c:	4631      	mov	r1, r6
    737e:	2023      	movs	r0, #35	; 0x23
    7380:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    7384:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7386:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    738a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    738e:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3

	gpio_set_pin_function(A2, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    7392:	4b0f      	ldr	r3, [pc, #60]	; (73d0 <system_init+0xa8>)
    7394:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    7396:	4b0f      	ldr	r3, [pc, #60]	; (73d4 <system_init+0xac>)
    7398:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    739a:	4a0f      	ldr	r2, [pc, #60]	; (73d8 <system_init+0xb0>)
    739c:	6953      	ldr	r3, [r2, #20]
    739e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    73a2:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    73a4:	4b0d      	ldr	r3, [pc, #52]	; (73dc <system_init+0xb4>)
    73a6:	4798      	blx	r3
    73a8:	490d      	ldr	r1, [pc, #52]	; (73e0 <system_init+0xb8>)
    73aa:	4b0e      	ldr	r3, [pc, #56]	; (73e4 <system_init+0xbc>)
    73ac:	4602      	mov	r2, r0
    73ae:	480e      	ldr	r0, [pc, #56]	; (73e8 <system_init+0xc0>)
    73b0:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
    73b2:	4b0e      	ldr	r3, [pc, #56]	; (73ec <system_init+0xc4>)
    73b4:	4798      	blx	r3

	IO_BUS_init();
    73b6:	4b0e      	ldr	r3, [pc, #56]	; (73f0 <system_init+0xc8>)
    73b8:	4798      	blx	r3

	USB_0_init();
    73ba:	4b0e      	ldr	r3, [pc, #56]	; (73f4 <system_init+0xcc>)
}
    73bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	USB_0_init();
    73c0:	4718      	bx	r3
    73c2:	bf00      	nop
    73c4:	00006471 	.word	0x00006471
    73c8:	41008000 	.word	0x41008000
    73cc:	00006ff5 	.word	0x00006ff5
    73d0:	0000708d 	.word	0x0000708d
    73d4:	000070b1 	.word	0x000070b1
    73d8:	40000800 	.word	0x40000800
    73dc:	00006f5d 	.word	0x00006f5d
    73e0:	40002400 	.word	0x40002400
    73e4:	00005155 	.word	0x00005155
    73e8:	20000e40 	.word	0x20000e40
    73ec:	0000714d 	.word	0x0000714d
    73f0:	00007261 	.word	0x00007261
    73f4:	00007309 	.word	0x00007309

000073f8 <process_ext_irq>:
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    73f8:	4b09      	ldr	r3, [pc, #36]	; (7420 <process_ext_irq+0x28>)
{
    73fa:	b430      	push	{r4, r5}
		if (ext_irqs[middle].pin == pin) {
    73fc:	685d      	ldr	r5, [r3, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    73fe:	2101      	movs	r1, #1
    7400:	2200      	movs	r2, #0
		if (middle >= EXT_IRQ_AMOUNT) {
    7402:	188c      	adds	r4, r1, r2
    7404:	0864      	lsrs	r4, r4, #1
    7406:	d109      	bne.n	741c <process_ext_irq+0x24>
		if (ext_irqs[middle].pin == pin) {
    7408:	4285      	cmp	r5, r0
    740a:	d103      	bne.n	7414 <process_ext_irq+0x1c>
			if (ext_irqs[middle].cb) {
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	b12b      	cbz	r3, 741c <process_ext_irq+0x24>
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    7410:	bc30      	pop	{r4, r5}
				ext_irqs[middle].cb();
    7412:	4718      	bx	r3
			upper = middle - 1;
    7414:	bf2c      	ite	cs
    7416:	21ff      	movcs	r1, #255	; 0xff
			lower = middle + 1;
    7418:	2201      	movcc	r2, #1
    741a:	e7f2      	b.n	7402 <process_ext_irq+0xa>
}
    741c:	bc30      	pop	{r4, r5}
    741e:	4770      	bx	lr
    7420:	20000cac 	.word	0x20000cac

00007424 <ext_irq_init>:
		ext_irqs[i].pin = 0xFFFFFFFF;
    7424:	4b04      	ldr	r3, [pc, #16]	; (7438 <ext_irq_init+0x14>)
	return _ext_irq_init(process_ext_irq);
    7426:	4805      	ldr	r0, [pc, #20]	; (743c <ext_irq_init+0x18>)
		ext_irqs[i].cb  = NULL;
    7428:	2100      	movs	r1, #0
    742a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    742e:	e883 0006 	stmia.w	r3, {r1, r2}
	return _ext_irq_init(process_ext_irq);
    7432:	4b03      	ldr	r3, [pc, #12]	; (7440 <ext_irq_init+0x1c>)
    7434:	4718      	bx	r3
    7436:	bf00      	nop
    7438:	20000cac 	.word	0x20000cac
    743c:	000073f9 	.word	0x000073f9
    7440:	00004795 	.word	0x00004795

00007444 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    7444:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    7448:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    744a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    744c:	f3bf 8f5f 	dmb	sy
    7450:	4770      	bx	lr

00007452 <atomic_leave_critical>:
    7452:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    7456:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7458:	f383 8810 	msr	PRIMASK, r3
    745c:	4770      	bx	lr
	...

00007460 <blinkTask>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7460:	2602      	movs	r6, #2
    7462:	4d08      	ldr	r5, [pc, #32]	; (7484 <blinkTask+0x24>)
    }
    io_write(ipixel_io, frame, 12);

}

void blinkTask(void *pvParameters) {
    7464:	b580      	push	{r7, lr}
    7466:	4637      	mov	r7, r6
    // spi_m_dma_enable(&SPI_SERCOM0);
    // spi_m_sync_enable(&SPI_SERCOM5);
    while (1) {
        gpio_set_pin_level(D13, false);
        // pixel(true);
        if (cdcdf_acm_is_enabled()) {
    7468:	4b07      	ldr	r3, [pc, #28]	; (7488 <blinkTask+0x28>)
    746a:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
    746e:	4798      	blx	r3
            // ret = cdcdf_acm_write(buf, 7);
        }
        delay_ms(1000);
    7470:	4c06      	ldr	r4, [pc, #24]	; (748c <blinkTask+0x2c>)
    7472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7476:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7478:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98

        gpio_set_pin_level(D13, true);
        // pixel(false);
        // io_write(io, buf, 7);
        delay_ms(1000);
    747c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7480:	47a0      	blx	r4
    7482:	e7f1      	b.n	7468 <blinkTask+0x8>
    7484:	41008000 	.word	0x41008000
    7488:	00004879 	.word	0x00004879
    748c:	000063cd 	.word	0x000063cd

00007490 <main>:
    }
}

int main(void)
{
    7490:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char good_str[] = "GOOD";
    // unsigned char err_str[] = "ERR";
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    7492:	4b0a      	ldr	r3, [pc, #40]	; (74bc <main+0x2c>)

    //composite_device_start();

    xTaskCreate(blinkTask, "BlinkTask", 200,
    7494:	4d0a      	ldr	r5, [pc, #40]	; (74c0 <main+0x30>)
    atmel_start_init();
    7496:	4798      	blx	r3
    xTaskCreate(blinkTask, "BlinkTask", 200,
    7498:	2400      	movs	r4, #0
    749a:	2301      	movs	r3, #1
    749c:	e88d 0018 	stmia.w	sp, {r3, r4}
    74a0:	4908      	ldr	r1, [pc, #32]	; (74c4 <main+0x34>)
    74a2:	4809      	ldr	r0, [pc, #36]	; (74c8 <main+0x38>)
    74a4:	4623      	mov	r3, r4
    74a6:	22c8      	movs	r2, #200	; 0xc8
    74a8:	47a8      	blx	r5
    74aa:	4b08      	ldr	r3, [pc, #32]	; (74cc <main+0x3c>)
    74ac:	2202      	movs	r2, #2
    74ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    //cdcdf_acm_write(good_str, 4);

    //spi_m_dma_register_callback(&SPI_SERCOM0, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_SPI_SERCOM0);

    gpio_set_pin_level(D13, true);
    vTaskStartScheduler();
    74b2:	4b07      	ldr	r3, [pc, #28]	; (74d0 <main+0x40>)
    74b4:	4798      	blx	r3
}
    74b6:	4620      	mov	r0, r4
    74b8:	b003      	add	sp, #12
    74ba:	bd30      	pop	{r4, r5, pc}
    74bc:	000074f5 	.word	0x000074f5
    74c0:	00007a95 	.word	0x00007a95
    74c4:	000085e1 	.word	0x000085e1
    74c8:	00007461 	.word	0x00007461
    74cc:	41008000 	.word	0x41008000
    74d0:	00007c35 	.word	0x00007c35

000074d4 <event_system_init>:
/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
	return _event_system_init();
    74d4:	4b00      	ldr	r3, [pc, #0]	; (74d8 <event_system_init+0x4>)
    74d6:	4718      	bx	r3
    74d8:	00004801 	.word	0x00004801

000074dc <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    74dc:	b510      	push	{r4, lr}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    74de:	4b04      	ldr	r3, [pc, #16]	; (74f0 <sd_mmc_init+0x14>)
    74e0:	2404      	movs	r4, #4
    74e2:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    74e4:	24ff      	movs	r4, #255	; 0xff
    74e6:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    74e8:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    74ea:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    74ec:	635a      	str	r2, [r3, #52]	; 0x34
    74ee:	bd10      	pop	{r4, pc}
    74f0:	20000cb4 	.word	0x20000cb4

000074f4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    74f4:	b510      	push	{r4, lr}
	system_init();
    74f6:	4b04      	ldr	r3, [pc, #16]	; (7508 <atmel_start_init+0x14>)
    74f8:	4798      	blx	r3
	usb_init();
    74fa:	4b04      	ldr	r3, [pc, #16]	; (750c <atmel_start_init+0x18>)
    74fc:	4798      	blx	r3
	sd_mmc_stack_init();
    74fe:	4b04      	ldr	r3, [pc, #16]	; (7510 <atmel_start_init+0x1c>)
}
    7500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sd_mmc_stack_init();
    7504:	4718      	bx	r3
    7506:	bf00      	nop
    7508:	00007329 	.word	0x00007329
    750c:	00005095 	.word	0x00005095
    7510:	0000476d 	.word	0x0000476d

00007514 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7514:	4b05      	ldr	r3, [pc, #20]	; (752c <usbdc_unconfig+0x18>)
{
    7516:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7518:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    751a:	b134      	cbz	r4, 752a <usbdc_unconfig+0x16>
		func->ctrl(func, USBDF_DISABLE, NULL);
    751c:	6863      	ldr	r3, [r4, #4]
    751e:	4620      	mov	r0, r4
    7520:	2200      	movs	r2, #0
    7522:	2101      	movs	r1, #1
    7524:	4798      	blx	r3
		func = func->next;
    7526:	6824      	ldr	r4, [r4, #0]
    7528:	e7f7      	b.n	751a <usbdc_unconfig+0x6>
	}
}
    752a:	bd10      	pop	{r4, pc}
    752c:	20000cf0 	.word	0x20000cf0

00007530 <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    7530:	4b06      	ldr	r3, [pc, #24]	; (754c <usbdc_change_notify+0x1c>)
{
    7532:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    7534:	68dc      	ldr	r4, [r3, #12]
{
    7536:	4605      	mov	r5, r0
    7538:	460e      	mov	r6, r1

	while (cg != NULL) {
    753a:	b134      	cbz	r4, 754a <usbdc_change_notify+0x1a>
		if (NULL != cg->cb) {
    753c:	6863      	ldr	r3, [r4, #4]
    753e:	b113      	cbz	r3, 7546 <usbdc_change_notify+0x16>
			cg->cb(change, value);
    7540:	4631      	mov	r1, r6
    7542:	4628      	mov	r0, r5
    7544:	4798      	blx	r3
		}
		cg = cg->next;
    7546:	6824      	ldr	r4, [r4, #0]
    7548:	e7f7      	b.n	753a <usbdc_change_notify+0xa>
	}
}
    754a:	bd70      	pop	{r4, r5, r6, pc}
    754c:	20000cf0 	.word	0x20000cf0

00007550 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    7552:	4b0c      	ldr	r3, [pc, #48]	; (7584 <usbdc_request_handler+0x34>)
    7554:	689c      	ldr	r4, [r3, #8]
{
    7556:	4605      	mov	r5, r0
    7558:	460e      	mov	r6, r1
    755a:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
    755c:	b16c      	cbz	r4, 757a <usbdc_request_handler+0x2a>
		if (NULL != h->cb) {
    755e:	6863      	ldr	r3, [r4, #4]
    7560:	b90b      	cbnz	r3, 7566 <usbdc_request_handler+0x16>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    7562:	6824      	ldr	r4, [r4, #0]
    7564:	e7fa      	b.n	755c <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    7566:	463a      	mov	r2, r7
    7568:	4631      	mov	r1, r6
    756a:	4628      	mov	r0, r5
    756c:	4798      	blx	r3
			if (0 == rc) {
    756e:	b130      	cbz	r0, 757e <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
    7570:	300a      	adds	r0, #10
    7572:	d0f6      	beq.n	7562 <usbdc_request_handler+0x12>
				return -1;
    7574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
	return false;
}
    7578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    757a:	4620      	mov	r0, r4
    757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    757e:	2001      	movs	r0, #1
    7580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7582:	bf00      	nop
    7584:	20000cf0 	.word	0x20000cf0

00007588 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    7588:	4b04      	ldr	r3, [pc, #16]	; (759c <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    758a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    758c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    758e:	b124      	cbz	r4, 759a <usbd_sof_cb+0x12>
		if (NULL != sof->cb) {
    7590:	6863      	ldr	r3, [r4, #4]
    7592:	b103      	cbz	r3, 7596 <usbd_sof_cb+0xe>
			sof->cb();
    7594:	4798      	blx	r3
		sof = sof->next;
    7596:	6824      	ldr	r4, [r4, #0]
    7598:	e7f9      	b.n	758e <usbd_sof_cb+0x6>
	usbdc_sof_notify();
}
    759a:	bd10      	pop	{r4, pc}
    759c:	20000cf0 	.word	0x20000cf0

000075a0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    75a0:	b510      	push	{r4, lr}
    75a2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    75a4:	460a      	mov	r2, r1
    75a6:	b131      	cbz	r1, 75b6 <usbdc_cb_ctl_done+0x16>
    75a8:	2901      	cmp	r1, #1
    75aa:	d122      	bne.n	75f2 <usbdc_cb_ctl_done+0x52>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    75ac:	4621      	mov	r1, r4
    75ae:	4b12      	ldr	r3, [pc, #72]	; (75f8 <usbdc_cb_ctl_done+0x58>)
    75b0:	2000      	movs	r0, #0
    75b2:	4798      	blx	r3
	case USB_XFER_DONE:
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
    75b4:	e01d      	b.n	75f2 <usbdc_cb_ctl_done+0x52>
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    75b6:	7823      	ldrb	r3, [r4, #0]
    75b8:	b9db      	cbnz	r3, 75f2 <usbdc_cb_ctl_done+0x52>
	switch (req->bRequest) {
    75ba:	7863      	ldrb	r3, [r4, #1]
    75bc:	2b05      	cmp	r3, #5
    75be:	d00a      	beq.n	75d6 <usbdc_cb_ctl_done+0x36>
    75c0:	2b09      	cmp	r3, #9
    75c2:	d116      	bne.n	75f2 <usbdc_cb_ctl_done+0x52>
		usbdc.cfg_value = req->wValue;
    75c4:	4b0d      	ldr	r3, [pc, #52]	; (75fc <usbdc_cb_ctl_done+0x5c>)
    75c6:	8862      	ldrh	r2, [r4, #2]
    75c8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    75ca:	8862      	ldrh	r2, [r4, #2]
    75cc:	2a00      	cmp	r2, #0
    75ce:	bf14      	ite	ne
    75d0:	2104      	movne	r1, #4
    75d2:	2103      	moveq	r1, #3
    75d4:	e009      	b.n	75ea <usbdc_cb_ctl_done+0x4a>
		usbdc_set_address(req->wValue);
    75d6:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
    75d8:	4b09      	ldr	r3, [pc, #36]	; (7600 <usbdc_cb_ctl_done+0x60>)
    75da:	b2c0      	uxtb	r0, r0
    75dc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    75de:	8863      	ldrh	r3, [r4, #2]
    75e0:	2b00      	cmp	r3, #0
    75e2:	4b06      	ldr	r3, [pc, #24]	; (75fc <usbdc_cb_ctl_done+0x5c>)
    75e4:	bf14      	ite	ne
    75e6:	2103      	movne	r1, #3
    75e8:	2102      	moveq	r1, #2
    75ea:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    75ec:	2001      	movs	r0, #1
    75ee:	4b05      	ldr	r3, [pc, #20]	; (7604 <usbdc_cb_ctl_done+0x64>)
    75f0:	4798      	blx	r3
	default:
		break;
	}
	return false;
}
    75f2:	2000      	movs	r0, #0
    75f4:	bd10      	pop	{r4, pc}
    75f6:	bf00      	nop
    75f8:	00007551 	.word	0x00007551
    75fc:	20000cf0 	.word	0x20000cf0
    7600:	00006c49 	.word	0x00006c49
    7604:	00007531 	.word	0x00007531

00007608 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    7608:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    760a:	4b0e      	ldr	r3, [pc, #56]	; (7644 <usbdc_reset+0x3c>)

	usbdc.state       = USBD_S_DEFAULT;
    760c:	4d0e      	ldr	r5, [pc, #56]	; (7648 <usbdc_reset+0x40>)
	usbdc.cfg_value   = 0;
    760e:	2400      	movs	r4, #0
	usbdc_unconfig();
    7610:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    7612:	2602      	movs	r6, #2
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    7614:	4620      	mov	r0, r4
    7616:	4b0d      	ldr	r3, [pc, #52]	; (764c <usbdc_reset+0x44>)
	usbdc.state       = USBD_S_DEFAULT;
    7618:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    761a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    761c:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    761e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    7620:	4b0b      	ldr	r3, [pc, #44]	; (7650 <usbdc_reset+0x48>)
    7622:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    7624:	4d0b      	ldr	r5, [pc, #44]	; (7654 <usbdc_reset+0x4c>)
	usb_d_ep0_init(usbdc.ctrl_size);
    7626:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    7628:	4621      	mov	r1, r4
    762a:	4620      	mov	r0, r4
    762c:	4a0a      	ldr	r2, [pc, #40]	; (7658 <usbdc_reset+0x50>)
    762e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    7630:	4620      	mov	r0, r4
    7632:	4631      	mov	r1, r6
    7634:	4a09      	ldr	r2, [pc, #36]	; (765c <usbdc_reset+0x54>)
    7636:	47a8      	blx	r5
	usb_d_ep_enable(0);
    7638:	4620      	mov	r0, r4
    763a:	4b09      	ldr	r3, [pc, #36]	; (7660 <usbdc_reset+0x58>)
}
    763c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    7640:	4718      	bx	r3
    7642:	bf00      	nop
    7644:	00007515 	.word	0x00007515
    7648:	20000cf0 	.word	0x20000cf0
    764c:	00006cb1 	.word	0x00006cb1
    7650:	00006ca1 	.word	0x00006ca1
    7654:	00006e85 	.word	0x00006e85
    7658:	0000769d 	.word	0x0000769d
    765c:	000075a1 	.word	0x000075a1
    7660:	00006cdd 	.word	0x00006cdd

00007664 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
    7664:	b110      	cbz	r0, 766c <usbd_event_cb+0x8>
    7666:	2801      	cmp	r0, #1
    7668:	d002      	beq.n	7670 <usbd_event_cb+0xc>
    766a:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    766c:	4b01      	ldr	r3, [pc, #4]	; (7674 <usbd_event_cb+0x10>)
    766e:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
    7670:	4b01      	ldr	r3, [pc, #4]	; (7678 <usbd_event_cb+0x14>)
    7672:	4718      	bx	r3
    7674:	00007531 	.word	0x00007531
    7678:	00007609 	.word	0x00007609

0000767c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    767c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    767e:	f88d 000c 	strb.w	r0, [sp, #12]
    7682:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    7686:	a801      	add	r0, sp, #4
    7688:	4b03      	ldr	r3, [pc, #12]	; (7698 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    768a:	9101      	str	r1, [sp, #4]
    768c:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    768e:	4798      	blx	r3
}
    7690:	b005      	add	sp, #20
    7692:	f85d fb04 	ldr.w	pc, [sp], #4
    7696:	bf00      	nop
    7698:	00006d1d 	.word	0x00006d1d

0000769c <usbdc_cb_ctl_req>:
{
    769c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    76a0:	4b9d      	ldr	r3, [pc, #628]	; (7918 <usbdc_cb_ctl_req+0x27c>)
    76a2:	2200      	movs	r2, #0
{
    76a4:	4605      	mov	r5, r0
    76a6:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    76a8:	4798      	blx	r3
    76aa:	1c43      	adds	r3, r0, #1
    76ac:	f000 8166 	beq.w	797c <usbdc_cb_ctl_req+0x2e0>
    76b0:	2801      	cmp	r0, #1
    76b2:	f000 8164 	beq.w	797e <usbdc_cb_ctl_req+0x2e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    76b6:	7821      	ldrb	r1, [r4, #0]
    76b8:	f011 03e0 	ands.w	r3, r1, #224	; 0xe0
    76bc:	d003      	beq.n	76c6 <usbdc_cb_ctl_req+0x2a>
    76be:	2b80      	cmp	r3, #128	; 0x80
    76c0:	f000 80b3 	beq.w	782a <usbdc_cb_ctl_req+0x18e>
    76c4:	e15a      	b.n	797c <usbdc_cb_ctl_req+0x2e0>
	switch (req->bRequest) {
    76c6:	7863      	ldrb	r3, [r4, #1]
    76c8:	3b01      	subs	r3, #1
    76ca:	2b0a      	cmp	r3, #10
    76cc:	f200 8156 	bhi.w	797c <usbdc_cb_ctl_req+0x2e0>
    76d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    76d4:	01540048 	.word	0x01540048
    76d8:	01540052 	.word	0x01540052
    76dc:	01540044 	.word	0x01540044
    76e0:	01540154 	.word	0x01540154
    76e4:	0154000b 	.word	0x0154000b
    76e8:	0062      	.short	0x0062
		if (!usbdc_set_config(req->wValue)) {
    76ea:	8862      	ldrh	r2, [r4, #2]
    76ec:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    76ee:	b912      	cbnz	r2, 76f6 <usbdc_cb_ctl_req+0x5a>
		usbdc_unconfig();
    76f0:	4b8a      	ldr	r3, [pc, #552]	; (791c <usbdc_cb_ctl_req+0x280>)
    76f2:	4798      	blx	r3
    76f4:	e032      	b.n	775c <usbdc_cb_ctl_req+0xc0>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    76f6:	4e8a      	ldr	r6, [pc, #552]	; (7920 <usbdc_cb_ctl_req+0x284>)
    76f8:	6833      	ldr	r3, [r6, #0]
    76fa:	e893 0003 	ldmia.w	r3, {r0, r1}
    76fe:	4b89      	ldr	r3, [pc, #548]	; (7924 <usbdc_cb_ctl_req+0x288>)
    7700:	4798      	blx	r3
	if (NULL == cfg_desc) {
    7702:	2800      	cmp	r0, #0
    7704:	f000 813a 	beq.w	797c <usbdc_cb_ctl_req+0x2e0>
	desc.eod  = cfg_desc + total_len;
    7708:	7883      	ldrb	r3, [r0, #2]
    770a:	78c1      	ldrb	r1, [r0, #3]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    770c:	4f86      	ldr	r7, [pc, #536]	; (7928 <usbdc_cb_ctl_req+0x28c>)
	desc.eod  = cfg_desc + total_len;
    770e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    7712:	fa10 f181 	uxtah	r1, r0, r1
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    7716:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    7718:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    771a:	47b8      	blx	r7
    771c:	f10d 0808 	add.w	r8, sp, #8
	uint8_t                 last_iface = 0xFF;
    7720:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    7722:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != desc.sod) {
    7726:	9a00      	ldr	r2, [sp, #0]
    7728:	b1c2      	cbz	r2, 775c <usbdc_cb_ctl_req+0xc0>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    772a:	f892 9002 	ldrb.w	r9, [r2, #2]
    772e:	4599      	cmp	r9, r3
    7730:	d009      	beq.n	7746 <usbdc_cb_ctl_req+0xaa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    7732:	6934      	ldr	r4, [r6, #16]
			while (NULL != func) {
    7734:	b144      	cbz	r4, 7748 <usbdc_cb_ctl_req+0xac>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    7736:	6863      	ldr	r3, [r4, #4]
    7738:	4642      	mov	r2, r8
    773a:	2100      	movs	r1, #0
    773c:	4620      	mov	r0, r4
    773e:	4798      	blx	r3
    7740:	b110      	cbz	r0, 7748 <usbdc_cb_ctl_req+0xac>
					func = func->next;
    7742:	6824      	ldr	r4, [r4, #0]
    7744:	e7f6      	b.n	7734 <usbdc_cb_ctl_req+0x98>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    7746:	4699      	mov	r9, r3
		desc.sod = usb_desc_next(desc.sod);
    7748:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    774a:	9901      	ldr	r1, [sp, #4]
    774c:	7803      	ldrb	r3, [r0, #0]
    774e:	2204      	movs	r2, #4
    7750:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    7752:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    7754:	47b8      	blx	r7
    7756:	464b      	mov	r3, r9
    7758:	9000      	str	r0, [sp, #0]
    775a:	e7e4      	b.n	7726 <usbdc_cb_ctl_req+0x8a>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    775c:	2200      	movs	r2, #0
    775e:	2301      	movs	r3, #1
    7760:	4611      	mov	r1, r2
    7762:	e0ae      	b.n	78c2 <usbdc_cb_ctl_req+0x226>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7764:	2902      	cmp	r1, #2
    7766:	f040 8109 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
		if (req->wLength != 0) {
    776a:	88e6      	ldrh	r6, [r4, #6]
    776c:	2e00      	cmp	r6, #0
    776e:	f040 8105 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    7772:	88a0      	ldrh	r0, [r4, #4]
    7774:	4631      	mov	r1, r6
    7776:	e008      	b.n	778a <usbdc_cb_ctl_req+0xee>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7778:	2902      	cmp	r1, #2
    777a:	f040 80ff 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
		if (req->wLength != 0) {
    777e:	88e6      	ldrh	r6, [r4, #6]
    7780:	2e00      	cmp	r6, #0
    7782:	f040 80fb 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    7786:	88a0      	ldrh	r0, [r4, #4]
    7788:	2101      	movs	r1, #1
    778a:	4b68      	ldr	r3, [pc, #416]	; (792c <usbdc_cb_ctl_req+0x290>)
    778c:	b2c0      	uxtb	r0, r0
    778e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7790:	2301      	movs	r3, #1
    7792:	4632      	mov	r2, r6
    7794:	4631      	mov	r1, r6
    7796:	e0bd      	b.n	7914 <usbdc_cb_ctl_req+0x278>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    7798:	4d61      	ldr	r5, [pc, #388]	; (7920 <usbdc_cb_ctl_req+0x284>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    779a:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    779c:	682b      	ldr	r3, [r5, #0]
    779e:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    77a0:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    77a2:	e893 0003 	ldmia.w	r3, {r0, r1}
    77a6:	4b5f      	ldr	r3, [pc, #380]	; (7924 <usbdc_cb_ctl_req+0x288>)
    77a8:	4798      	blx	r3
	if (NULL == ifc) {
    77aa:	2800      	cmp	r0, #0
    77ac:	f000 80e6 	beq.w	797c <usbdc_cb_ctl_req+0x2e0>
	desc.sod = ifc;
    77b0:	9000      	str	r0, [sp, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    77b2:	78c1      	ldrb	r1, [r0, #3]
    77b4:	7883      	ldrb	r3, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    77b6:	4c5c      	ldr	r4, [pc, #368]	; (7928 <usbdc_cb_ctl_req+0x28c>)
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    77b8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    77bc:	fa10 f181 	uxtah	r1, r0, r1
    77c0:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    77c2:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    77c4:	47a0      	blx	r4
		if (NULL == ifc) {
    77c6:	2800      	cmp	r0, #0
    77c8:	f000 80d8 	beq.w	797c <usbdc_cb_ctl_req+0x2e0>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    77cc:	7883      	ldrb	r3, [r0, #2]
    77ce:	42bb      	cmp	r3, r7
    77d0:	d006      	beq.n	77e0 <usbdc_cb_ctl_req+0x144>
		desc.sod = usb_desc_next(desc.sod);
    77d2:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    77d4:	9901      	ldr	r1, [sp, #4]
    77d6:	7803      	ldrb	r3, [r0, #0]
    77d8:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    77da:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    77dc:	2204      	movs	r2, #4
    77de:	e7f1      	b.n	77c4 <usbdc_cb_ctl_req+0x128>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    77e0:	78c3      	ldrb	r3, [r0, #3]
    77e2:	42b3      	cmp	r3, r6
    77e4:	d1f5      	bne.n	77d2 <usbdc_cb_ctl_req+0x136>
	desc.sod = ifc;
    77e6:	f10d 0808 	add.w	r8, sp, #8
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    77ea:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
    77ec:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != func) {
    77f0:	2c00      	cmp	r4, #0
    77f2:	f000 80c3 	beq.w	797c <usbdc_cb_ctl_req+0x2e0>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    77f6:	2101      	movs	r1, #1
    77f8:	6863      	ldr	r3, [r4, #4]
    77fa:	4642      	mov	r2, r8
    77fc:	4620      	mov	r0, r4
    77fe:	4798      	blx	r3
    7800:	4601      	mov	r1, r0
    7802:	b108      	cbz	r0, 7808 <usbdc_cb_ctl_req+0x16c>
			func = func->next;
    7804:	6824      	ldr	r4, [r4, #0]
    7806:	e7f3      	b.n	77f0 <usbdc_cb_ctl_req+0x154>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    7808:	6863      	ldr	r3, [r4, #4]
    780a:	4642      	mov	r2, r8
    780c:	4620      	mov	r0, r4
    780e:	4798      	blx	r3
    7810:	2800      	cmp	r0, #0
    7812:	f040 80b3 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
			if (alt_set) {
    7816:	b126      	cbz	r6, 7822 <usbdc_cb_ctl_req+0x186>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    7818:	7f6a      	ldrb	r2, [r5, #29]
    781a:	2301      	movs	r3, #1
    781c:	40bb      	lsls	r3, r7
    781e:	4313      	orrs	r3, r2
    7820:	776b      	strb	r3, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
    7822:	2300      	movs	r3, #0
    7824:	461a      	mov	r2, r3
    7826:	4619      	mov	r1, r3
    7828:	e098      	b.n	795c <usbdc_cb_ctl_req+0x2c0>
	switch (req->bRequest) {
    782a:	7863      	ldrb	r3, [r4, #1]
    782c:	2b0a      	cmp	r3, #10
    782e:	f200 80a5 	bhi.w	797c <usbdc_cb_ctl_req+0x2e0>
    7832:	e8df f003 	tbb	[pc, r3]
    7836:	a354      	.short	0xa354
    7838:	a3a3a3a3 	.word	0xa3a3a3a3
    783c:	a34da306 	.word	0xa34da306
    7840:	81          	.byte	0x81
    7841:	00          	.byte	0x00
	uint8_t type = (uint8_t)(req->wValue >> 8);
    7842:	8863      	ldrh	r3, [r4, #2]
	switch (type) {
    7844:	0a1a      	lsrs	r2, r3, #8
    7846:	2a02      	cmp	r2, #2
    7848:	d012      	beq.n	7870 <usbdc_cb_ctl_req+0x1d4>
    784a:	2a03      	cmp	r2, #3
    784c:	d022      	beq.n	7894 <usbdc_cb_ctl_req+0x1f8>
    784e:	2a01      	cmp	r2, #1
    7850:	f040 8094 	bne.w	797c <usbdc_cb_ctl_req+0x2e0>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7854:	4b32      	ldr	r3, [pc, #200]	; (7920 <usbdc_cb_ctl_req+0x284>)
	uint16_t length   = req->wLength;
    7856:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7858:	681b      	ldr	r3, [r3, #0]
    785a:	2c12      	cmp	r4, #18
    785c:	e893 0003 	ldmia.w	r3, {r0, r1}
    7860:	4b31      	ldr	r3, [pc, #196]	; (7928 <usbdc_cb_ctl_req+0x28c>)
    7862:	bf28      	it	cs
    7864:	2412      	movcs	r4, #18
    7866:	4798      	blx	r3
	if (!dev_desc) {
    7868:	4601      	mov	r1, r0
    786a:	2800      	cmp	r0, #0
    786c:	d127      	bne.n	78be <usbdc_cb_ctl_req+0x222>
    786e:	e085      	b.n	797c <usbdc_cb_ctl_req+0x2e0>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7870:	4a2b      	ldr	r2, [pc, #172]	; (7920 <usbdc_cb_ctl_req+0x284>)
	uint16_t length   = req->wLength;
    7872:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7874:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7876:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7878:	1c5a      	adds	r2, r3, #1
    787a:	c803      	ldmia	r0, {r0, r1}
    787c:	b2d2      	uxtb	r2, r2
    787e:	4b29      	ldr	r3, [pc, #164]	; (7924 <usbdc_cb_ctl_req+0x288>)
    7880:	4798      	blx	r3
	if (NULL == cfg_desc) {
    7882:	4601      	mov	r1, r0
    7884:	2800      	cmp	r0, #0
    7886:	d079      	beq.n	797c <usbdc_cb_ctl_req+0x2e0>
	return (ptr[0] + (ptr[1] << 8));
    7888:	78c2      	ldrb	r2, [r0, #3]
    788a:	7883      	ldrb	r3, [r0, #2]
    788c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
    7890:	b292      	uxth	r2, r2
    7892:	e00b      	b.n	78ac <usbdc_cb_ctl_req+0x210>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7894:	4a22      	ldr	r2, [pc, #136]	; (7920 <usbdc_cb_ctl_req+0x284>)
	uint16_t length   = req->wLength;
    7896:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7898:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    789a:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    789c:	c803      	ldmia	r0, {r0, r1}
    789e:	b2da      	uxtb	r2, r3
    78a0:	4b23      	ldr	r3, [pc, #140]	; (7930 <usbdc_cb_ctl_req+0x294>)
    78a2:	4798      	blx	r3
	if (NULL == str_desc) {
    78a4:	4601      	mov	r1, r0
    78a6:	2800      	cmp	r0, #0
    78a8:	d068      	beq.n	797c <usbdc_cb_ctl_req+0x2e0>
	if (length <= str_desc[0]) {
    78aa:	7802      	ldrb	r2, [r0, #0]
    78ac:	4294      	cmp	r4, r2
    78ae:	d906      	bls.n	78be <usbdc_cb_ctl_req+0x222>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    78b0:	3e01      	subs	r6, #1
    78b2:	4226      	tst	r6, r4
    78b4:	bf0c      	ite	eq
    78b6:	2301      	moveq	r3, #1
    78b8:	2300      	movne	r3, #0
    78ba:	4614      	mov	r4, r2
    78bc:	e000      	b.n	78c0 <usbdc_cb_ctl_req+0x224>
		need_zlp = false;
    78be:	2300      	movs	r3, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    78c0:	4622      	mov	r2, r4
    78c2:	4628      	mov	r0, r5
    78c4:	4c1b      	ldr	r4, [pc, #108]	; (7934 <usbdc_cb_ctl_req+0x298>)
    78c6:	47a0      	blx	r4
    78c8:	fab0 f080 	clz	r0, r0
    78cc:	0940      	lsrs	r0, r0, #5
    78ce:	e056      	b.n	797e <usbdc_cb_ctl_req+0x2e2>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    78d0:	4913      	ldr	r1, [pc, #76]	; (7920 <usbdc_cb_ctl_req+0x284>)
    78d2:	694b      	ldr	r3, [r1, #20]
    78d4:	7eca      	ldrb	r2, [r1, #27]
    78d6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    78d8:	2300      	movs	r3, #0
    78da:	2201      	movs	r2, #1
    78dc:	e019      	b.n	7912 <usbdc_cb_ctl_req+0x276>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    78de:	f001 011f 	and.w	r1, r1, #31
    78e2:	2901      	cmp	r1, #1
    78e4:	d902      	bls.n	78ec <usbdc_cb_ctl_req+0x250>
    78e6:	2902      	cmp	r1, #2
    78e8:	d003      	beq.n	78f2 <usbdc_cb_ctl_req+0x256>
    78ea:	e047      	b.n	797c <usbdc_cb_ctl_req+0x2e0>
		st = 0;
    78ec:	2300      	movs	r3, #0
    78ee:	9300      	str	r3, [sp, #0]
    78f0:	e008      	b.n	7904 <usbdc_cb_ctl_req+0x268>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    78f2:	88a0      	ldrh	r0, [r4, #4]
    78f4:	4b0d      	ldr	r3, [pc, #52]	; (792c <usbdc_cb_ctl_req+0x290>)
    78f6:	b2c0      	uxtb	r0, r0
    78f8:	4798      	blx	r3
		if (st < 0) {
    78fa:	2800      	cmp	r0, #0
    78fc:	db3e      	blt.n	797c <usbdc_cb_ctl_req+0x2e0>
		st = st & 0x1;
    78fe:	f000 0001 	and.w	r0, r0, #1
    7902:	9000      	str	r0, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    7904:	4906      	ldr	r1, [pc, #24]	; (7920 <usbdc_cb_ctl_req+0x284>)
    7906:	f8bd 2000 	ldrh.w	r2, [sp]
    790a:	694b      	ldr	r3, [r1, #20]
    790c:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    790e:	2300      	movs	r3, #0
    7910:	2202      	movs	r2, #2
    7912:	6949      	ldr	r1, [r1, #20]
    7914:	4628      	mov	r0, r5
    7916:	e022      	b.n	795e <usbdc_cb_ctl_req+0x2c2>
    7918:	00007551 	.word	0x00007551
    791c:	00007515 	.word	0x00007515
    7920:	20000cf0 	.word	0x20000cf0
    7924:	00006989 	.word	0x00006989
    7928:	0000696d 	.word	0x0000696d
    792c:	00006e21 	.word	0x00006e21
    7930:	000069c5 	.word	0x000069c5
    7934:	0000767d 	.word	0x0000767d
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    7938:	4912      	ldr	r1, [pc, #72]	; (7984 <usbdc_cb_ctl_req+0x2e8>)
    793a:	88a2      	ldrh	r2, [r4, #4]
    793c:	7f4b      	ldrb	r3, [r1, #29]
    793e:	4113      	asrs	r3, r2
    7940:	f013 0301 	ands.w	r3, r3, #1
    7944:	460e      	mov	r6, r1
    7946:	d10e      	bne.n	7966 <usbdc_cb_ctl_req+0x2ca>
		usbdc.ctrl_buf[0] = 0;
    7948:	694a      	ldr	r2, [r1, #20]
    794a:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    794c:	6949      	ldr	r1, [r1, #20]
    794e:	2201      	movs	r2, #1
    7950:	e004      	b.n	795c <usbdc_cb_ctl_req+0x2c0>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7952:	6973      	ldr	r3, [r6, #20]
    7954:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7956:	6971      	ldr	r1, [r6, #20]
    7958:	2300      	movs	r3, #0
    795a:	2201      	movs	r2, #1
    795c:	4618      	mov	r0, r3
    795e:	4c0a      	ldr	r4, [pc, #40]	; (7988 <usbdc_cb_ctl_req+0x2ec>)
    7960:	47a0      	blx	r4
			return true;
    7962:	2001      	movs	r0, #1
    7964:	e00b      	b.n	797e <usbdc_cb_ctl_req+0x2e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7966:	690d      	ldr	r5, [r1, #16]
	while (NULL != func) {
    7968:	b145      	cbz	r5, 797c <usbdc_cb_ctl_req+0x2e0>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    796a:	686b      	ldr	r3, [r5, #4]
    796c:	4622      	mov	r2, r4
    796e:	2102      	movs	r1, #2
    7970:	4628      	mov	r0, r5
    7972:	4798      	blx	r3
    7974:	2800      	cmp	r0, #0
    7976:	daec      	bge.n	7952 <usbdc_cb_ctl_req+0x2b6>
			func = func->next;
    7978:	682d      	ldr	r5, [r5, #0]
    797a:	e7f5      	b.n	7968 <usbdc_cb_ctl_req+0x2cc>
	return false;
    797c:	2000      	movs	r0, #0
}
    797e:	b003      	add	sp, #12
    7980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7984:	20000cf0 	.word	0x20000cf0
    7988:	0000767d 	.word	0x0000767d

0000798c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    798c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    798e:	4605      	mov	r5, r0
    7990:	3000      	adds	r0, #0
    7992:	bf18      	it	ne
    7994:	2001      	movne	r0, #1
    7996:	f240 3255 	movw	r2, #853	; 0x355
    799a:	490b      	ldr	r1, [pc, #44]	; (79c8 <usbdc_init+0x3c>)
    799c:	4b0b      	ldr	r3, [pc, #44]	; (79cc <usbdc_init+0x40>)
    799e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    79a0:	4b0b      	ldr	r3, [pc, #44]	; (79d0 <usbdc_init+0x44>)
    79a2:	4798      	blx	r3
	if (rc < 0) {
    79a4:	2800      	cmp	r0, #0
    79a6:	db0e      	blt.n	79c6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    79a8:	4c0a      	ldr	r4, [pc, #40]	; (79d4 <usbdc_init+0x48>)
    79aa:	4b0b      	ldr	r3, [pc, #44]	; (79d8 <usbdc_init+0x4c>)
    79ac:	2220      	movs	r2, #32
    79ae:	2100      	movs	r1, #0
    79b0:	4620      	mov	r0, r4
    79b2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    79b4:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    79b6:	4909      	ldr	r1, [pc, #36]	; (79dc <usbdc_init+0x50>)
    79b8:	4c09      	ldr	r4, [pc, #36]	; (79e0 <usbdc_init+0x54>)
    79ba:	2000      	movs	r0, #0
    79bc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    79be:	2001      	movs	r0, #1
    79c0:	4908      	ldr	r1, [pc, #32]	; (79e4 <usbdc_init+0x58>)
    79c2:	47a0      	blx	r4

	return 0;
    79c4:	2000      	movs	r0, #0
}
    79c6:	bd38      	pop	{r3, r4, r5, pc}
    79c8:	000085eb 	.word	0x000085eb
    79cc:	0000653d 	.word	0x0000653d
    79d0:	00006bdd 	.word	0x00006bdd
    79d4:	20000cf0 	.word	0x20000cf0
    79d8:	000082f5 	.word	0x000082f5
    79dc:	00007589 	.word	0x00007589
    79e0:	00006c41 	.word	0x00006c41
    79e4:	00007665 	.word	0x00007665

000079e8 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    79e8:	4906      	ldr	r1, [pc, #24]	; (7a04 <prvIdleTask+0x1c>)
				taskYIELD();
    79ea:	4b07      	ldr	r3, [pc, #28]	; (7a08 <prvIdleTask+0x20>)
    79ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    79f0:	6808      	ldr	r0, [r1, #0]
    79f2:	2801      	cmp	r0, #1
    79f4:	d9fc      	bls.n	79f0 <prvIdleTask+0x8>
				taskYIELD();
    79f6:	601a      	str	r2, [r3, #0]
    79f8:	f3bf 8f4f 	dsb	sy
    79fc:	f3bf 8f6f 	isb	sy
    7a00:	e7f6      	b.n	79f0 <prvIdleTask+0x8>
    7a02:	bf00      	nop
    7a04:	20000d10 	.word	0x20000d10
    7a08:	e000ed04 	.word	0xe000ed04

00007a0c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7a0c:	4b06      	ldr	r3, [pc, #24]	; (7a28 <prvResetNextTaskUnblockTime+0x1c>)
    7a0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    7a10:	6812      	ldr	r2, [r2, #0]
    7a12:	b912      	cbnz	r2, 7a1a <prvResetNextTaskUnblockTime+0xe>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    7a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a18:	e003      	b.n	7a22 <prvResetNextTaskUnblockTime+0x16>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    7a1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    7a1c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    7a1e:	68d2      	ldr	r2, [r2, #12]
    7a20:	6852      	ldr	r2, [r2, #4]
    7a22:	669a      	str	r2, [r3, #104]	; 0x68
    7a24:	4770      	bx	lr
    7a26:	bf00      	nop
    7a28:	20000d10 	.word	0x20000d10

00007a2c <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    7a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    7a30:	4d14      	ldr	r5, [pc, #80]	; (7a84 <prvAddCurrentTaskToDelayedList+0x58>)
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    7a32:	4b15      	ldr	r3, [pc, #84]	; (7a88 <prvAddCurrentTaskToDelayedList+0x5c>)
	const TickType_t xConstTickCount = xTickCount;
    7a34:	6eee      	ldr	r6, [r5, #108]	; 0x6c
{
    7a36:	4604      	mov	r4, r0
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    7a38:	6f28      	ldr	r0, [r5, #112]	; 0x70
    7a3a:	3004      	adds	r0, #4
{
    7a3c:	460f      	mov	r7, r1
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    7a3e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    7a40:	1c63      	adds	r3, r4, #1
    7a42:	462b      	mov	r3, r5
    7a44:	d106      	bne.n	7a54 <prvAddCurrentTaskToDelayedList+0x28>
    7a46:	b12f      	cbz	r7, 7a54 <prvAddCurrentTaskToDelayedList+0x28>
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    7a48:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7a4a:	4b10      	ldr	r3, [pc, #64]	; (7a8c <prvAddCurrentTaskToDelayedList+0x60>)
    7a4c:	3104      	adds	r1, #4
    7a4e:	f105 0074 	add.w	r0, r5, #116	; 0x74
    7a52:	e00a      	b.n	7a6a <prvAddCurrentTaskToDelayedList+0x3e>
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    7a54:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    7a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7a58:	4d0a      	ldr	r5, [pc, #40]	; (7a84 <prvAddCurrentTaskToDelayedList+0x58>)
    7a5a:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    7a5c:	42a6      	cmp	r6, r4
    7a5e:	4b0c      	ldr	r3, [pc, #48]	; (7a90 <prvAddCurrentTaskToDelayedList+0x64>)
    7a60:	d906      	bls.n	7a70 <prvAddCurrentTaskToDelayedList+0x44>
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    7a62:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
    7a66:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7a68:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    7a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    7a6e:	4718      	bx	r3
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    7a70:	6e68      	ldr	r0, [r5, #100]	; 0x64
    7a72:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7a74:	3104      	adds	r1, #4
    7a76:	4798      	blx	r3
				if (xTimeToWake < xNextTaskUnblockTime) {
    7a78:	6eab      	ldr	r3, [r5, #104]	; 0x68
    7a7a:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    7a7c:	bf38      	it	cc
    7a7e:	66ac      	strcc	r4, [r5, #104]	; 0x68
    7a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a84:	20000d10 	.word	0x20000d10
    7a88:	0000436d 	.word	0x0000436d
    7a8c:	00004325 	.word	0x00004325
    7a90:	0000433d 	.word	0x0000433d

00007a94 <xTaskCreate>:
{
    7a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		pxStack = (StackType_t *)pvPortMalloc(
    7a98:	0095      	lsls	r5, r2, #2
{
    7a9a:	4680      	mov	r8, r0
		pxStack = (StackType_t *)pvPortMalloc(
    7a9c:	4c5a      	ldr	r4, [pc, #360]	; (7c08 <xTaskCreate+0x174>)
    7a9e:	4628      	mov	r0, r5
{
    7aa0:	460f      	mov	r7, r1
    7aa2:	4699      	mov	r9, r3
		pxStack = (StackType_t *)pvPortMalloc(
    7aa4:	47a0      	blx	r4
		if (pxStack != NULL) {
    7aa6:	4606      	mov	r6, r0
    7aa8:	2800      	cmp	r0, #0
    7aaa:	f000 80a9 	beq.w	7c00 <xTaskCreate+0x16c>
			pxNewTCB = (TCB_t *)pvPortMalloc(
    7aae:	2054      	movs	r0, #84	; 0x54
    7ab0:	47a0      	blx	r4
			if (pxNewTCB != NULL) {
    7ab2:	4604      	mov	r4, r0
    7ab4:	b180      	cbz	r0, 7ad8 <xTaskCreate+0x44>
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    7ab6:	462a      	mov	r2, r5
				pxNewTCB->pxStack = pxStack;
    7ab8:	6306      	str	r6, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    7aba:	4b54      	ldr	r3, [pc, #336]	; (7c0c <xTaskCreate+0x178>)
    7abc:	21a5      	movs	r1, #165	; 0xa5
    7abe:	4630      	mov	r0, r6
    7ac0:	4798      	blx	r3
		                      & (~(
    7ac2:	f1a5 0a04 	sub.w	sl, r5, #4
    7ac6:	6b25      	ldr	r5, [r4, #48]	; 0x30
    7ac8:	44aa      	add	sl, r5
    7aca:	1e7b      	subs	r3, r7, #1
    7acc:	f02a 0a07 	bic.w	sl, sl, #7
    7ad0:	f104 0233 	add.w	r2, r4, #51	; 0x33
    7ad4:	3707      	adds	r7, #7
    7ad6:	e005      	b.n	7ae4 <xTaskCreate+0x50>
				vPortFree(pxStack);
    7ad8:	4630      	mov	r0, r6
    7ada:	4b4d      	ldr	r3, [pc, #308]	; (7c10 <xTaskCreate+0x17c>)
    7adc:	4798      	blx	r3
    7ade:	e08f      	b.n	7c00 <xTaskCreate+0x16c>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    7ae0:	429f      	cmp	r7, r3
    7ae2:	d006      	beq.n	7af2 <xTaskCreate+0x5e>
		pxNewTCB->pcTaskName[x] = pcName[x];
    7ae4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    7ae8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (pcName[x] == 0x00) {
    7aec:	7819      	ldrb	r1, [r3, #0]
    7aee:	2900      	cmp	r1, #0
    7af0:	d1f6      	bne.n	7ae0 <xTaskCreate+0x4c>
    7af2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    7af4:	4e47      	ldr	r6, [pc, #284]	; (7c14 <xTaskCreate+0x180>)
    7af6:	2d04      	cmp	r5, #4
    7af8:	bf28      	it	cs
    7afa:	2504      	movcs	r5, #4
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    7afc:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    7b00:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
    7b02:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    7b04:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    7b06:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    7b08:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
		pxNewTCB->uxMutexesHeld  = 0;
    7b0c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    7b10:	47b0      	blx	r6
	listSET_LIST_ITEM_VALUE(
    7b12:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    7b16:	f104 0018 	add.w	r0, r4, #24
    7b1a:	47b0      	blx	r6
		pxNewTCB->ulNotifiedValue = 0;
    7b1c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    7b20:	4b3d      	ldr	r3, [pc, #244]	; (7c18 <xTaskCreate+0x184>)
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    7b22:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    7b24:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    7b26:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    7b28:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    7b2c:	464a      	mov	r2, r9
    7b2e:	4641      	mov	r1, r8
    7b30:	4650      	mov	r0, sl
    7b32:	4798      	blx	r3
	if ((void *)pxCreatedTask != NULL) {
    7b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    7b36:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    7b38:	b103      	cbz	r3, 7b3c <xTaskCreate+0xa8>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    7b3a:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
    7b3c:	4d37      	ldr	r5, [pc, #220]	; (7c1c <xTaskCreate+0x188>)
	taskENTER_CRITICAL();
    7b3e:	4b38      	ldr	r3, [pc, #224]	; (7c20 <xTaskCreate+0x18c>)
    7b40:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    7b42:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    7b46:	3301      	adds	r3, #1
    7b48:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    7b4c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
    7b4e:	bb16      	cbnz	r6, 7b96 <xTaskCreate+0x102>
			pxCurrentTCB = pxNewTCB;
    7b50:	672c      	str	r4, [r5, #112]	; 0x70
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    7b52:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    7b56:	2b01      	cmp	r3, #1
    7b58:	d126      	bne.n	7ba8 <xTaskCreate+0x114>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    7b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 7c30 <xTaskCreate+0x19c>
    7b5e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 7c1c <xTaskCreate+0x188>
    7b62:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 7c30 <xTaskCreate+0x19c>
    7b66:	19a8      	adds	r0, r5, r6
    7b68:	3614      	adds	r6, #20
    7b6a:	47d0      	blx	sl
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    7b6c:	2e64      	cmp	r6, #100	; 0x64
    7b6e:	d1f6      	bne.n	7b5e <xTaskCreate+0xca>
	vListInitialise(&xDelayedTaskList1);
    7b70:	f108 0aa4 	add.w	sl, r8, #164	; 0xa4
    7b74:	4650      	mov	r0, sl
	vListInitialise(&xDelayedTaskList2);
    7b76:	f108 06b8 	add.w	r6, r8, #184	; 0xb8
	vListInitialise(&xDelayedTaskList1);
    7b7a:	47c8      	blx	r9
	vListInitialise(&xDelayedTaskList2);
    7b7c:	4630      	mov	r0, r6
    7b7e:	47c8      	blx	r9
	vListInitialise(&xPendingReadyList);
    7b80:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    7b84:	47c8      	blx	r9
		vListInitialise(&xSuspendedTaskList);
    7b86:	f108 0074 	add.w	r0, r8, #116	; 0x74
    7b8a:	47c8      	blx	r9
	pxDelayedTaskList         = &xDelayedTaskList1;
    7b8c:	f8c8 a064 	str.w	sl, [r8, #100]	; 0x64
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    7b90:	f8c8 6088 	str.w	r6, [r8, #136]	; 0x88
    7b94:	e008      	b.n	7ba8 <xTaskCreate+0x114>
			if (xSchedulerRunning == pdFALSE) {
    7b96:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    7b9a:	b92b      	cbnz	r3, 7ba8 <xTaskCreate+0x114>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    7b9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    7b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7ba2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    7ba4:	bf98      	it	ls
    7ba6:	672c      	strls	r4, [r5, #112]	; 0x70
		uxTaskNumber++;
    7ba8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
		prvAddTaskToReadyList(pxNewTCB);
    7bac:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
		uxTaskNumber++;
    7bb0:	3301      	adds	r3, #1
    7bb2:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    7bb6:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    7bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7bba:	4293      	cmp	r3, r2
    7bbc:	bf88      	it	hi
    7bbe:	4a17      	ldrhi	r2, [pc, #92]	; (7c1c <xTaskCreate+0x188>)
    7bc0:	f04f 0014 	mov.w	r0, #20
    7bc4:	bf88      	it	hi
    7bc6:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    7bca:	fb00 5003 	mla	r0, r0, r3, r5
    7bce:	4639      	mov	r1, r7
    7bd0:	4b14      	ldr	r3, [pc, #80]	; (7c24 <xTaskCreate+0x190>)
    7bd2:	4798      	blx	r3
	taskEXIT_CRITICAL();
    7bd4:	4b14      	ldr	r3, [pc, #80]	; (7c28 <xTaskCreate+0x194>)
    7bd6:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    7bd8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    7bdc:	b16b      	cbz	r3, 7bfa <xTaskCreate+0x166>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    7bde:	4b0f      	ldr	r3, [pc, #60]	; (7c1c <xTaskCreate+0x188>)
    7be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7be6:	429a      	cmp	r2, r3
    7be8:	d207      	bcs.n	7bfa <xTaskCreate+0x166>
			taskYIELD_IF_USING_PREEMPTION();
    7bea:	4b10      	ldr	r3, [pc, #64]	; (7c2c <xTaskCreate+0x198>)
    7bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7bf0:	601a      	str	r2, [r3, #0]
    7bf2:	f3bf 8f4f 	dsb	sy
    7bf6:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    7bfa:	2001      	movs	r0, #1
    7bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c08:	00004391 	.word	0x00004391
    7c0c:	000082f5 	.word	0x000082f5
    7c10:	000043e9 	.word	0x000043e9
    7c14:	0000431f 	.word	0x0000431f
    7c18:	0000447d 	.word	0x0000447d
    7c1c:	20000d10 	.word	0x20000d10
    7c20:	000044d5 	.word	0x000044d5
    7c24:	00004325 	.word	0x00004325
    7c28:	00004519 	.word	0x00004519
    7c2c:	e000ed04 	.word	0xe000ed04
    7c30:	00004309 	.word	0x00004309

00007c34 <vTaskStartScheduler>:
{
    7c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
		xReturn = xTaskCreate(prvIdleTask,
    7c36:	4c19      	ldr	r4, [pc, #100]	; (7c9c <vTaskStartScheduler+0x68>)
    7c38:	4919      	ldr	r1, [pc, #100]	; (7ca0 <vTaskStartScheduler+0x6c>)
    7c3a:	481a      	ldr	r0, [pc, #104]	; (7ca4 <vTaskStartScheduler+0x70>)
    7c3c:	4e1a      	ldr	r6, [pc, #104]	; (7ca8 <vTaskStartScheduler+0x74>)
    7c3e:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
    7c42:	2500      	movs	r5, #0
    7c44:	9301      	str	r3, [sp, #4]
    7c46:	9500      	str	r5, [sp, #0]
    7c48:	462b      	mov	r3, r5
    7c4a:	2240      	movs	r2, #64	; 0x40
    7c4c:	47b0      	blx	r6
		if (xReturn == pdPASS) {
    7c4e:	2801      	cmp	r0, #1
    7c50:	d116      	bne.n	7c80 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
    7c52:	4b16      	ldr	r3, [pc, #88]	; (7cac <vTaskStartScheduler+0x78>)
    7c54:	4798      	blx	r3
	if (xReturn == pdPASS) {
    7c56:	2801      	cmp	r0, #1
    7c58:	d112      	bne.n	7c80 <vTaskStartScheduler+0x4c>
    7c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    7c5e:	f383 8811 	msr	BASEPRI, r3
    7c62:	f3bf 8f6f 	isb	sy
    7c66:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    7c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c6e:	66a3      	str	r3, [r4, #104]	; 0x68
		if (xPortStartScheduler() != pdFALSE) {
    7c70:	4b0f      	ldr	r3, [pc, #60]	; (7cb0 <vTaskStartScheduler+0x7c>)
		xSchedulerRunning    = pdTRUE;
    7c72:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    7c76:	66e5      	str	r5, [r4, #108]	; 0x6c
}
    7c78:	b002      	add	sp, #8
    7c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (xPortStartScheduler() != pdFALSE) {
    7c7e:	4718      	bx	r3
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    7c80:	3001      	adds	r0, #1
    7c82:	d108      	bne.n	7c96 <vTaskStartScheduler+0x62>
    7c84:	f04f 0380 	mov.w	r3, #128	; 0x80
    7c88:	f383 8811 	msr	BASEPRI, r3
    7c8c:	f3bf 8f6f 	isb	sy
    7c90:	f3bf 8f4f 	dsb	sy
    7c94:	e7fe      	b.n	7c94 <vTaskStartScheduler+0x60>
}
    7c96:	b002      	add	sp, #8
    7c98:	bd70      	pop	{r4, r5, r6, pc}
    7c9a:	bf00      	nop
    7c9c:	20000d10 	.word	0x20000d10
    7ca0:	00008601 	.word	0x00008601
    7ca4:	000079e9 	.word	0x000079e9
    7ca8:	00007a95 	.word	0x00007a95
    7cac:	000060c5 	.word	0x000060c5
    7cb0:	000045fd 	.word	0x000045fd

00007cb4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    7cb4:	4a03      	ldr	r2, [pc, #12]	; (7cc4 <vTaskSuspendAll+0x10>)
    7cb6:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    7cba:	3301      	adds	r3, #1
    7cbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    7cc0:	4770      	bx	lr
    7cc2:	bf00      	nop
    7cc4:	20000d10 	.word	0x20000d10

00007cc8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    7cc8:	4b01      	ldr	r3, [pc, #4]	; (7cd0 <xTaskGetTickCount+0x8>)
    7cca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
    7ccc:	4770      	bx	lr
    7cce:	bf00      	nop
    7cd0:	20000d10 	.word	0x20000d10

00007cd4 <xTaskIncrementTick>:
{
    7cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7cd8:	4b38      	ldr	r3, [pc, #224]	; (7dbc <xTaskIncrementTick+0xe8>)
    7cda:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    7cde:	461c      	mov	r4, r3
    7ce0:	2a00      	cmp	r2, #0
    7ce2:	d13f      	bne.n	7d64 <xTaskIncrementTick+0x90>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    7ce4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
    7ce6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    7ce8:	66de      	str	r6, [r3, #108]	; 0x6c
		if (xConstTickCount
    7cea:	b9c6      	cbnz	r6, 7d1e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
    7cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7cee:	681b      	ldr	r3, [r3, #0]
    7cf0:	b143      	cbz	r3, 7d04 <xTaskIncrementTick+0x30>
    7cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
    7cf6:	f383 8811 	msr	BASEPRI, r3
    7cfa:	f3bf 8f6f 	isb	sy
    7cfe:	f3bf 8f4f 	dsb	sy
    7d02:	e7fe      	b.n	7d02 <xTaskIncrementTick+0x2e>
    7d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7d06:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    7d0a:	6662      	str	r2, [r4, #100]	; 0x64
    7d0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    7d10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    7d14:	3301      	adds	r3, #1
    7d16:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    7d1a:	4b29      	ldr	r3, [pc, #164]	; (7dc0 <xTaskIncrementTick+0xec>)
    7d1c:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    7d1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7d20:	429e      	cmp	r6, r3
    7d22:	f04f 0500 	mov.w	r5, #0
    7d26:	d314      	bcc.n	7d52 <xTaskIncrementTick+0x7e>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7d28:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7dbc <xTaskIncrementTick+0xe8>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7d2c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 7dc4 <xTaskIncrementTick+0xf0>
					prvAddTaskToReadyList(pxTCB);
    7d30:	f8df b094 	ldr.w	fp, [pc, #148]	; 7dc8 <xTaskIncrementTick+0xf4>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7d36:	4a21      	ldr	r2, [pc, #132]	; (7dbc <xTaskIncrementTick+0xe8>)
    7d38:	681b      	ldr	r3, [r3, #0]
    7d3a:	b913      	cbnz	r3, 7d42 <xTaskIncrementTick+0x6e>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d40:	e006      	b.n	7d50 <xTaskIncrementTick+0x7c>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    7d42:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
    7d46:	68db      	ldr	r3, [r3, #12]
    7d48:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    7d4a:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    7d4c:	429e      	cmp	r6, r3
    7d4e:	d210      	bcs.n	7d72 <xTaskIncrementTick+0x9e>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7d50:	6693      	str	r3, [r2, #104]	; 0x68
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    7d52:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d56:	2314      	movs	r3, #20
    7d58:	4353      	muls	r3, r2
    7d5a:	58e3      	ldr	r3, [r4, r3]
				xSwitchRequired = pdTRUE;
    7d5c:	2b02      	cmp	r3, #2
    7d5e:	bf28      	it	cs
    7d60:	2501      	movcs	r5, #1
    7d62:	e022      	b.n	7daa <xTaskIncrementTick+0xd6>
		++uxPendedTicks;
    7d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    7d68:	3301      	adds	r3, #1
    7d6a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    7d6e:	2500      	movs	r5, #0
    7d70:	e01b      	b.n	7daa <xTaskIncrementTick+0xd6>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7d72:	f107 0a04 	add.w	sl, r7, #4
    7d76:	4650      	mov	r0, sl
    7d78:	47c8      	blx	r9
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    7d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d7c:	b113      	cbz	r3, 7d84 <xTaskIncrementTick+0xb0>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    7d7e:	f107 0018 	add.w	r0, r7, #24
    7d82:	47c8      	blx	r9
					prvAddTaskToReadyList(pxTCB);
    7d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d86:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
    7d8a:	2014      	movs	r0, #20
    7d8c:	4293      	cmp	r3, r2
    7d8e:	fb00 4003 	mla	r0, r0, r3, r4
    7d92:	4651      	mov	r1, sl
    7d94:	bf88      	it	hi
    7d96:	f8c8 30d4 	strhi.w	r3, [r8, #212]	; 0xd4
    7d9a:	47d8      	blx	fp
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    7d9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    7da2:	429a      	cmp	r2, r3
    7da4:	bf28      	it	cs
    7da6:	2501      	movcs	r5, #1
    7da8:	e7c4      	b.n	7d34 <xTaskIncrementTick+0x60>
		if (xYieldPending != pdFALSE) {
    7daa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    7dae:	2b00      	cmp	r3, #0
    7db0:	bf18      	it	ne
    7db2:	2501      	movne	r5, #1
}
    7db4:	4628      	mov	r0, r5
    7db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dba:	bf00      	nop
    7dbc:	20000d10 	.word	0x20000d10
    7dc0:	00007a0d 	.word	0x00007a0d
    7dc4:	0000436d 	.word	0x0000436d
    7dc8:	00004325 	.word	0x00004325

00007dcc <xTaskResumeAll>:
{
    7dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(uxSchedulerSuspended);
    7dd0:	4c32      	ldr	r4, [pc, #200]	; (7e9c <xTaskResumeAll+0xd0>)
    7dd2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    7dd6:	b943      	cbnz	r3, 7dea <xTaskResumeAll+0x1e>
    7dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
    7ddc:	f383 8811 	msr	BASEPRI, r3
    7de0:	f3bf 8f6f 	isb	sy
    7de4:	f3bf 8f4f 	dsb	sy
    7de8:	e7fe      	b.n	7de8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
    7dea:	4b2d      	ldr	r3, [pc, #180]	; (7ea0 <xTaskResumeAll+0xd4>)
    7dec:	4798      	blx	r3
		--uxSchedulerSuspended;
    7dee:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    7df2:	3b01      	subs	r3, #1
    7df4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7df8:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
    7dfc:	b10d      	cbz	r5, 7e02 <xTaskResumeAll+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
    7dfe:	2400      	movs	r4, #0
    7e00:	e046      	b.n	7e90 <xTaskResumeAll+0xc4>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    7e02:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7e06:	2b00      	cmp	r3, #0
    7e08:	d0f9      	beq.n	7dfe <xTaskResumeAll+0x32>
					(void)uxListRemove(&(pxTCB->xEventListItem));
    7e0a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7eb4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList(pxTCB);
    7e0e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 7eb8 <xTaskResumeAll+0xec>
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    7e12:	4627      	mov	r7, r4
    7e14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    7e18:	b1eb      	cbz	r3, 7e56 <xTaskResumeAll+0x8a>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    7e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    7e1e:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7e20:	1d2e      	adds	r6, r5, #4
					(void)uxListRemove(&(pxTCB->xEventListItem));
    7e22:	f105 0018 	add.w	r0, r5, #24
    7e26:	47c0      	blx	r8
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7e28:	4630      	mov	r0, r6
    7e2a:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    7e2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7e2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    7e32:	2014      	movs	r0, #20
    7e34:	4293      	cmp	r3, r2
    7e36:	fb00 4003 	mla	r0, r0, r3, r4
    7e3a:	4631      	mov	r1, r6
    7e3c:	bf88      	it	hi
    7e3e:	f8c7 30d4 	strhi.w	r3, [r7, #212]	; 0xd4
    7e42:	47c8      	blx	r9
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    7e44:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7e46:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    7e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e4a:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
    7e4c:	bf24      	itt	cs
    7e4e:	2301      	movcs	r3, #1
    7e50:	f8c7 30e8 	strcs.w	r3, [r7, #232]	; 0xe8
    7e54:	e7de      	b.n	7e14 <xTaskResumeAll+0x48>
				if (pxTCB != NULL) {
    7e56:	b10d      	cbz	r5, 7e5c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
    7e58:	4b12      	ldr	r3, [pc, #72]	; (7ea4 <xTaskResumeAll+0xd8>)
    7e5a:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7e5c:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    7e60:	b14d      	cbz	r5, 7e76 <xTaskResumeAll+0xaa>
							if (xTaskIncrementTick() != pdFALSE) {
    7e62:	4e11      	ldr	r6, [pc, #68]	; (7ea8 <xTaskResumeAll+0xdc>)
								xYieldPending = pdTRUE;
    7e64:	2701      	movs	r7, #1
							if (xTaskIncrementTick() != pdFALSE) {
    7e66:	47b0      	blx	r6
    7e68:	b108      	cbz	r0, 7e6e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
    7e6a:	f8c4 70e8 	str.w	r7, [r4, #232]	; 0xe8
						} while (uxPendedCounts > (UBaseType_t)0U);
    7e6e:	3d01      	subs	r5, #1
    7e70:	d1f9      	bne.n	7e66 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    7e72:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    7e76:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d0bf      	beq.n	7dfe <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
    7e7e:	4b0b      	ldr	r3, [pc, #44]	; (7eac <xTaskResumeAll+0xe0>)
    7e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e84:	601a      	str	r2, [r3, #0]
    7e86:	f3bf 8f4f 	dsb	sy
    7e8a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    7e8e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    7e90:	4b07      	ldr	r3, [pc, #28]	; (7eb0 <xTaskResumeAll+0xe4>)
    7e92:	4798      	blx	r3
}
    7e94:	4620      	mov	r0, r4
    7e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e9a:	bf00      	nop
    7e9c:	20000d10 	.word	0x20000d10
    7ea0:	000044d5 	.word	0x000044d5
    7ea4:	00007a0d 	.word	0x00007a0d
    7ea8:	00007cd5 	.word	0x00007cd5
    7eac:	e000ed04 	.word	0xe000ed04
    7eb0:	00004519 	.word	0x00004519
    7eb4:	0000436d 	.word	0x0000436d
    7eb8:	00004325 	.word	0x00004325

00007ebc <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    7ebc:	4a19      	ldr	r2, [pc, #100]	; (7f24 <vTaskSwitchContext+0x68>)
    7ebe:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
{
    7ec2:	b530      	push	{r4, r5, lr}
    7ec4:	4613      	mov	r3, r2
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    7ec6:	b119      	cbz	r1, 7ed0 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
    7ec8:	2301      	movs	r3, #1
    7eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    7ece:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
    7ed0:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7ed4:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
    7ed8:	2514      	movs	r5, #20
    7eda:	fb05 f201 	mul.w	r2, r5, r1
    7ede:	1898      	adds	r0, r3, r2
    7ee0:	589c      	ldr	r4, [r3, r2]
    7ee2:	b95c      	cbnz	r4, 7efc <vTaskSwitchContext+0x40>
    7ee4:	b941      	cbnz	r1, 7ef8 <vTaskSwitchContext+0x3c>
    7ee6:	f04f 0380 	mov.w	r3, #128	; 0x80
    7eea:	f383 8811 	msr	BASEPRI, r3
    7eee:	f3bf 8f6f 	isb	sy
    7ef2:	f3bf 8f4f 	dsb	sy
    7ef6:	e7fe      	b.n	7ef6 <vTaskSwitchContext+0x3a>
    7ef8:	3901      	subs	r1, #1
    7efa:	e7ee      	b.n	7eda <vTaskSwitchContext+0x1e>
    7efc:	6844      	ldr	r4, [r0, #4]
    7efe:	4d09      	ldr	r5, [pc, #36]	; (7f24 <vTaskSwitchContext+0x68>)
    7f00:	6864      	ldr	r4, [r4, #4]
    7f02:	6044      	str	r4, [r0, #4]
    7f04:	3208      	adds	r2, #8
    7f06:	442a      	add	r2, r5
    7f08:	4294      	cmp	r4, r2
    7f0a:	bf04      	itt	eq
    7f0c:	6862      	ldreq	r2, [r4, #4]
    7f0e:	6042      	streq	r2, [r0, #4]
    7f10:	2214      	movs	r2, #20
    7f12:	fb02 3201 	mla	r2, r2, r1, r3
    7f16:	6852      	ldr	r2, [r2, #4]
    7f18:	68d2      	ldr	r2, [r2, #12]
    7f1a:	671a      	str	r2, [r3, #112]	; 0x70
    7f1c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
    7f20:	bd30      	pop	{r4, r5, pc}
    7f22:	bf00      	nop
    7f24:	20000d10 	.word	0x20000d10

00007f28 <vTaskPlaceOnEventList>:
{
    7f28:	b510      	push	{r4, lr}
    7f2a:	460c      	mov	r4, r1
	configASSERT(pxEventList);
    7f2c:	b940      	cbnz	r0, 7f40 <vTaskPlaceOnEventList+0x18>
    7f2e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7f32:	f383 8811 	msr	BASEPRI, r3
    7f36:	f3bf 8f6f 	isb	sy
    7f3a:	f3bf 8f4f 	dsb	sy
    7f3e:	e7fe      	b.n	7f3e <vTaskPlaceOnEventList+0x16>
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    7f40:	4b05      	ldr	r3, [pc, #20]	; (7f58 <vTaskPlaceOnEventList+0x30>)
    7f42:	6f19      	ldr	r1, [r3, #112]	; 0x70
    7f44:	4b05      	ldr	r3, [pc, #20]	; (7f5c <vTaskPlaceOnEventList+0x34>)
    7f46:	3118      	adds	r1, #24
    7f48:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    7f4a:	4620      	mov	r0, r4
    7f4c:	2101      	movs	r1, #1
    7f4e:	4b04      	ldr	r3, [pc, #16]	; (7f60 <vTaskPlaceOnEventList+0x38>)
}
    7f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    7f54:	4718      	bx	r3
    7f56:	bf00      	nop
    7f58:	20000d10 	.word	0x20000d10
    7f5c:	0000433d 	.word	0x0000433d
    7f60:	00007a2d 	.word	0x00007a2d

00007f64 <vTaskPlaceOnEventListRestricted>:
{
    7f64:	b570      	push	{r4, r5, r6, lr}
    7f66:	460d      	mov	r5, r1
    7f68:	4614      	mov	r4, r2
	configASSERT(pxEventList);
    7f6a:	b940      	cbnz	r0, 7f7e <vTaskPlaceOnEventListRestricted+0x1a>
    7f6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    7f70:	f383 8811 	msr	BASEPRI, r3
    7f74:	f3bf 8f6f 	isb	sy
    7f78:	f3bf 8f4f 	dsb	sy
    7f7c:	e7fe      	b.n	7f7c <vTaskPlaceOnEventListRestricted+0x18>
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    7f7e:	4b07      	ldr	r3, [pc, #28]	; (7f9c <vTaskPlaceOnEventListRestricted+0x38>)
    7f80:	6f19      	ldr	r1, [r3, #112]	; 0x70
    7f82:	4b07      	ldr	r3, [pc, #28]	; (7fa0 <vTaskPlaceOnEventListRestricted+0x3c>)
    7f84:	3118      	adds	r1, #24
    7f86:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    7f88:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    7f8a:	4621      	mov	r1, r4
    7f8c:	bf0c      	ite	eq
    7f8e:	4628      	moveq	r0, r5
    7f90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7f94:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <vTaskPlaceOnEventListRestricted+0x40>)
}
    7f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    7f9a:	4718      	bx	r3
    7f9c:	20000d10 	.word	0x20000d10
    7fa0:	00004325 	.word	0x00004325
    7fa4:	00007a2d 	.word	0x00007a2d

00007fa8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    7fa8:	68c3      	ldr	r3, [r0, #12]
{
    7faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    7fae:	68dd      	ldr	r5, [r3, #12]
	configASSERT(pxUnblockedTCB);
    7fb0:	b945      	cbnz	r5, 7fc4 <xTaskRemoveFromEventList+0x1c>
    7fb2:	f04f 0380 	mov.w	r3, #128	; 0x80
    7fb6:	f383 8811 	msr	BASEPRI, r3
    7fba:	f3bf 8f6f 	isb	sy
    7fbe:	f3bf 8f4f 	dsb	sy
    7fc2:	e7fe      	b.n	7fc2 <xTaskRemoveFromEventList+0x1a>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    7fc4:	f105 0718 	add.w	r7, r5, #24
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7fc8:	4c13      	ldr	r4, [pc, #76]	; (8018 <xTaskRemoveFromEventList+0x70>)
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    7fca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8020 <xTaskRemoveFromEventList+0x78>
    7fce:	4e13      	ldr	r6, [pc, #76]	; (801c <xTaskRemoveFromEventList+0x74>)
    7fd0:	4638      	mov	r0, r7
    7fd2:	47c0      	blx	r8
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7fd4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    7fd8:	b973      	cbnz	r3, 7ff8 <xTaskRemoveFromEventList+0x50>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    7fda:	1d2f      	adds	r7, r5, #4
    7fdc:	4638      	mov	r0, r7
    7fde:	47c0      	blx	r8
		prvAddTaskToReadyList(pxUnblockedTCB);
    7fe0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7fe2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
    7fe6:	2014      	movs	r0, #20
    7fe8:	4293      	cmp	r3, r2
    7fea:	bf88      	it	hi
    7fec:	f8c4 30d4 	strhi.w	r3, [r4, #212]	; 0xd4
    7ff0:	4639      	mov	r1, r7
    7ff2:	fb00 4003 	mla	r0, r0, r3, r4
    7ff6:	e002      	b.n	7ffe <xTaskRemoveFromEventList+0x56>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    7ff8:	4639      	mov	r1, r7
    7ffa:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    7ffe:	47b0      	blx	r6
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    8000:	6f23      	ldr	r3, [r4, #112]	; 0x70
    8002:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    8004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8006:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    8008:	bf83      	ittte	hi
    800a:	4b03      	ldrhi	r3, [pc, #12]	; (8018 <xTaskRemoveFromEventList+0x70>)
    800c:	2001      	movhi	r0, #1
    800e:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    8012:	2000      	movls	r0, #0
}
    8014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8018:	20000d10 	.word	0x20000d10
    801c:	00004325 	.word	0x00004325
    8020:	0000436d 	.word	0x0000436d

00008024 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    8024:	4b03      	ldr	r3, [pc, #12]	; (8034 <vTaskInternalSetTimeOutState+0x10>)
    8026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	pxTimeOut->xTimeOnEntering = xTickCount;
    802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    802c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    802e:	6043      	str	r3, [r0, #4]
    8030:	4770      	bx	lr
    8032:	bf00      	nop
    8034:	20000d10 	.word	0x20000d10

00008038 <xTaskCheckForTimeOut>:
{
    8038:	b570      	push	{r4, r5, r6, lr}
    803a:	460c      	mov	r4, r1
	configASSERT(pxTimeOut);
    803c:	4605      	mov	r5, r0
    803e:	b940      	cbnz	r0, 8052 <xTaskCheckForTimeOut+0x1a>
    8040:	f04f 0380 	mov.w	r3, #128	; 0x80
    8044:	f383 8811 	msr	BASEPRI, r3
    8048:	f3bf 8f6f 	isb	sy
    804c:	f3bf 8f4f 	dsb	sy
    8050:	e7fe      	b.n	8050 <xTaskCheckForTimeOut+0x18>
	configASSERT(pxTicksToWait);
    8052:	b941      	cbnz	r1, 8066 <xTaskCheckForTimeOut+0x2e>
    8054:	f04f 0380 	mov.w	r3, #128	; 0x80
    8058:	f383 8811 	msr	BASEPRI, r3
    805c:	f3bf 8f6f 	isb	sy
    8060:	f3bf 8f4f 	dsb	sy
    8064:	e7fe      	b.n	8064 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
    8066:	4b11      	ldr	r3, [pc, #68]	; (80ac <xTaskCheckForTimeOut+0x74>)
    8068:	4798      	blx	r3
		    if (*pxTicksToWait == portMAX_DELAY) {
    806a:	6823      	ldr	r3, [r4, #0]
		const TickType_t xConstTickCount = xTickCount;
    806c:	4810      	ldr	r0, [pc, #64]	; (80b0 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    806e:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
    8070:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
		    if (*pxTicksToWait == portMAX_DELAY) {
    8072:	1c5e      	adds	r6, r3, #1
    8074:	d012      	beq.n	809c <xTaskCheckForTimeOut+0x64>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    8076:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    807a:	682e      	ldr	r6, [r5, #0]
    807c:	4286      	cmp	r6, r0
    807e:	d001      	beq.n	8084 <xTaskCheckForTimeOut+0x4c>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    8080:	428a      	cmp	r2, r1
    8082:	d20d      	bcs.n	80a0 <xTaskCheckForTimeOut+0x68>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    8084:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    8086:	429a      	cmp	r2, r3
    8088:	d205      	bcs.n	8096 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
    808a:	1a9b      	subs	r3, r3, r2
    808c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    808e:	4628      	mov	r0, r5
    8090:	4b08      	ldr	r3, [pc, #32]	; (80b4 <xTaskCheckForTimeOut+0x7c>)
    8092:	4798      	blx	r3
    8094:	e002      	b.n	809c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
    8096:	2300      	movs	r3, #0
    8098:	6023      	str	r3, [r4, #0]
    809a:	e001      	b.n	80a0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdFALSE;
    809c:	2400      	movs	r4, #0
    809e:	e000      	b.n	80a2 <xTaskCheckForTimeOut+0x6a>
			xReturn = pdTRUE;
    80a0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    80a2:	4b05      	ldr	r3, [pc, #20]	; (80b8 <xTaskCheckForTimeOut+0x80>)
    80a4:	4798      	blx	r3
}
    80a6:	4620      	mov	r0, r4
    80a8:	bd70      	pop	{r4, r5, r6, pc}
    80aa:	bf00      	nop
    80ac:	000044d5 	.word	0x000044d5
    80b0:	20000d10 	.word	0x20000d10
    80b4:	00008025 	.word	0x00008025
    80b8:	00004519 	.word	0x00004519

000080bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    80bc:	4b02      	ldr	r3, [pc, #8]	; (80c8 <vTaskMissedYield+0xc>)
    80be:	2201      	movs	r2, #1
    80c0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    80c4:	4770      	bx	lr
    80c6:	bf00      	nop
    80c8:	20000d10 	.word	0x20000d10

000080cc <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    80cc:	4b06      	ldr	r3, [pc, #24]	; (80e8 <xTaskGetSchedulerState+0x1c>)
    80ce:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    80d2:	b132      	cbz	r2, 80e2 <xTaskGetSchedulerState+0x16>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    80d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    80d8:	2b00      	cmp	r3, #0
			xReturn = taskSCHEDULER_SUSPENDED;
    80da:	bf0c      	ite	eq
    80dc:	2002      	moveq	r0, #2
    80de:	2000      	movne	r0, #0
    80e0:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    80e2:	2001      	movs	r0, #1
}
    80e4:	4770      	bx	lr
    80e6:	bf00      	nop
    80e8:	20000d10 	.word	0x20000d10

000080ec <xTaskPriorityDisinherit>:
{
    80ec:	b570      	push	{r4, r5, r6, lr}
	if (pxMutexHolder != NULL) {
    80ee:	4604      	mov	r4, r0
    80f0:	b908      	cbnz	r0, 80f6 <xTaskPriorityDisinherit+0xa>
	BaseType_t   xReturn = pdFALSE;
    80f2:	2000      	movs	r0, #0
    80f4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT(pxTCB == pxCurrentTCB);
    80f6:	4d1b      	ldr	r5, [pc, #108]	; (8164 <xTaskPriorityDisinherit+0x78>)
    80f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    80fa:	4298      	cmp	r0, r3
    80fc:	d008      	beq.n	8110 <xTaskPriorityDisinherit+0x24>
    80fe:	f04f 0380 	mov.w	r3, #128	; 0x80
    8102:	f383 8811 	msr	BASEPRI, r3
    8106:	f3bf 8f6f 	isb	sy
    810a:	f3bf 8f4f 	dsb	sy
    810e:	e7fe      	b.n	810e <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    8110:	6c83      	ldr	r3, [r0, #72]	; 0x48
    8112:	b943      	cbnz	r3, 8126 <xTaskPriorityDisinherit+0x3a>
    8114:	f04f 0380 	mov.w	r3, #128	; 0x80
    8118:	f383 8811 	msr	BASEPRI, r3
    811c:	f3bf 8f6f 	isb	sy
    8120:	f3bf 8f4f 	dsb	sy
    8124:	e7fe      	b.n	8124 <xTaskPriorityDisinherit+0x38>
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    8126:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8128:	6c42      	ldr	r2, [r0, #68]	; 0x44
		(pxTCB->uxMutexesHeld)--;
    812a:	3b01      	subs	r3, #1
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    812c:	4291      	cmp	r1, r2
		(pxTCB->uxMutexesHeld)--;
    812e:	6483      	str	r3, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    8130:	d0df      	beq.n	80f2 <xTaskPriorityDisinherit+0x6>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    8132:	2b00      	cmp	r3, #0
    8134:	d1dd      	bne.n	80f2 <xTaskPriorityDisinherit+0x6>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    8136:	1d06      	adds	r6, r0, #4
    8138:	4630      	mov	r0, r6
    813a:	4b0b      	ldr	r3, [pc, #44]	; (8168 <xTaskPriorityDisinherit+0x7c>)
    813c:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    813e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8140:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    8142:	f1c3 0205 	rsb	r2, r3, #5
    8146:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    8148:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
    814c:	2014      	movs	r0, #20
    814e:	4293      	cmp	r3, r2
    8150:	fb00 5003 	mla	r0, r0, r3, r5
    8154:	bf88      	it	hi
    8156:	f8c5 30d4 	strhi.w	r3, [r5, #212]	; 0xd4
    815a:	4631      	mov	r1, r6
    815c:	4b03      	ldr	r3, [pc, #12]	; (816c <xTaskPriorityDisinherit+0x80>)
    815e:	4798      	blx	r3
				xReturn = pdTRUE;
    8160:	2001      	movs	r0, #1
}
    8162:	bd70      	pop	{r4, r5, r6, pc}
    8164:	20000d10 	.word	0x20000d10
    8168:	0000436d 	.word	0x0000436d
    816c:	00004325 	.word	0x00004325

00008170 <__libc_init_array>:
    8170:	b570      	push	{r4, r5, r6, lr}
    8172:	4e0f      	ldr	r6, [pc, #60]	; (81b0 <__libc_init_array+0x40>)
    8174:	4d0f      	ldr	r5, [pc, #60]	; (81b4 <__libc_init_array+0x44>)
    8176:	1b76      	subs	r6, r6, r5
    8178:	10b6      	asrs	r6, r6, #2
    817a:	bf18      	it	ne
    817c:	2400      	movne	r4, #0
    817e:	d005      	beq.n	818c <__libc_init_array+0x1c>
    8180:	3401      	adds	r4, #1
    8182:	f855 3b04 	ldr.w	r3, [r5], #4
    8186:	4798      	blx	r3
    8188:	42a6      	cmp	r6, r4
    818a:	d1f9      	bne.n	8180 <__libc_init_array+0x10>
    818c:	4e0a      	ldr	r6, [pc, #40]	; (81b8 <__libc_init_array+0x48>)
    818e:	4d0b      	ldr	r5, [pc, #44]	; (81bc <__libc_init_array+0x4c>)
    8190:	1b76      	subs	r6, r6, r5
    8192:	f000 fa41 	bl	8618 <_init>
    8196:	10b6      	asrs	r6, r6, #2
    8198:	bf18      	it	ne
    819a:	2400      	movne	r4, #0
    819c:	d006      	beq.n	81ac <__libc_init_array+0x3c>
    819e:	3401      	adds	r4, #1
    81a0:	f855 3b04 	ldr.w	r3, [r5], #4
    81a4:	4798      	blx	r3
    81a6:	42a6      	cmp	r6, r4
    81a8:	d1f9      	bne.n	819e <__libc_init_array+0x2e>
    81aa:	bd70      	pop	{r4, r5, r6, pc}
    81ac:	bd70      	pop	{r4, r5, r6, pc}
    81ae:	bf00      	nop
    81b0:	00008624 	.word	0x00008624
    81b4:	00008624 	.word	0x00008624
    81b8:	00008628 	.word	0x00008628
    81bc:	00008624 	.word	0x00008624

000081c0 <memcpy>:
    81c0:	4684      	mov	ip, r0
    81c2:	ea41 0300 	orr.w	r3, r1, r0
    81c6:	f013 0303 	ands.w	r3, r3, #3
    81ca:	d16d      	bne.n	82a8 <memcpy+0xe8>
    81cc:	3a40      	subs	r2, #64	; 0x40
    81ce:	d341      	bcc.n	8254 <memcpy+0x94>
    81d0:	f851 3b04 	ldr.w	r3, [r1], #4
    81d4:	f840 3b04 	str.w	r3, [r0], #4
    81d8:	f851 3b04 	ldr.w	r3, [r1], #4
    81dc:	f840 3b04 	str.w	r3, [r0], #4
    81e0:	f851 3b04 	ldr.w	r3, [r1], #4
    81e4:	f840 3b04 	str.w	r3, [r0], #4
    81e8:	f851 3b04 	ldr.w	r3, [r1], #4
    81ec:	f840 3b04 	str.w	r3, [r0], #4
    81f0:	f851 3b04 	ldr.w	r3, [r1], #4
    81f4:	f840 3b04 	str.w	r3, [r0], #4
    81f8:	f851 3b04 	ldr.w	r3, [r1], #4
    81fc:	f840 3b04 	str.w	r3, [r0], #4
    8200:	f851 3b04 	ldr.w	r3, [r1], #4
    8204:	f840 3b04 	str.w	r3, [r0], #4
    8208:	f851 3b04 	ldr.w	r3, [r1], #4
    820c:	f840 3b04 	str.w	r3, [r0], #4
    8210:	f851 3b04 	ldr.w	r3, [r1], #4
    8214:	f840 3b04 	str.w	r3, [r0], #4
    8218:	f851 3b04 	ldr.w	r3, [r1], #4
    821c:	f840 3b04 	str.w	r3, [r0], #4
    8220:	f851 3b04 	ldr.w	r3, [r1], #4
    8224:	f840 3b04 	str.w	r3, [r0], #4
    8228:	f851 3b04 	ldr.w	r3, [r1], #4
    822c:	f840 3b04 	str.w	r3, [r0], #4
    8230:	f851 3b04 	ldr.w	r3, [r1], #4
    8234:	f840 3b04 	str.w	r3, [r0], #4
    8238:	f851 3b04 	ldr.w	r3, [r1], #4
    823c:	f840 3b04 	str.w	r3, [r0], #4
    8240:	f851 3b04 	ldr.w	r3, [r1], #4
    8244:	f840 3b04 	str.w	r3, [r0], #4
    8248:	f851 3b04 	ldr.w	r3, [r1], #4
    824c:	f840 3b04 	str.w	r3, [r0], #4
    8250:	3a40      	subs	r2, #64	; 0x40
    8252:	d2bd      	bcs.n	81d0 <memcpy+0x10>
    8254:	3230      	adds	r2, #48	; 0x30
    8256:	d311      	bcc.n	827c <memcpy+0xbc>
    8258:	f851 3b04 	ldr.w	r3, [r1], #4
    825c:	f840 3b04 	str.w	r3, [r0], #4
    8260:	f851 3b04 	ldr.w	r3, [r1], #4
    8264:	f840 3b04 	str.w	r3, [r0], #4
    8268:	f851 3b04 	ldr.w	r3, [r1], #4
    826c:	f840 3b04 	str.w	r3, [r0], #4
    8270:	f851 3b04 	ldr.w	r3, [r1], #4
    8274:	f840 3b04 	str.w	r3, [r0], #4
    8278:	3a10      	subs	r2, #16
    827a:	d2ed      	bcs.n	8258 <memcpy+0x98>
    827c:	320c      	adds	r2, #12
    827e:	d305      	bcc.n	828c <memcpy+0xcc>
    8280:	f851 3b04 	ldr.w	r3, [r1], #4
    8284:	f840 3b04 	str.w	r3, [r0], #4
    8288:	3a04      	subs	r2, #4
    828a:	d2f9      	bcs.n	8280 <memcpy+0xc0>
    828c:	3204      	adds	r2, #4
    828e:	d008      	beq.n	82a2 <memcpy+0xe2>
    8290:	07d2      	lsls	r2, r2, #31
    8292:	bf1c      	itt	ne
    8294:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8298:	f800 3b01 	strbne.w	r3, [r0], #1
    829c:	d301      	bcc.n	82a2 <memcpy+0xe2>
    829e:	880b      	ldrh	r3, [r1, #0]
    82a0:	8003      	strh	r3, [r0, #0]
    82a2:	4660      	mov	r0, ip
    82a4:	4770      	bx	lr
    82a6:	bf00      	nop
    82a8:	2a08      	cmp	r2, #8
    82aa:	d313      	bcc.n	82d4 <memcpy+0x114>
    82ac:	078b      	lsls	r3, r1, #30
    82ae:	d08d      	beq.n	81cc <memcpy+0xc>
    82b0:	f010 0303 	ands.w	r3, r0, #3
    82b4:	d08a      	beq.n	81cc <memcpy+0xc>
    82b6:	f1c3 0304 	rsb	r3, r3, #4
    82ba:	1ad2      	subs	r2, r2, r3
    82bc:	07db      	lsls	r3, r3, #31
    82be:	bf1c      	itt	ne
    82c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    82c4:	f800 3b01 	strbne.w	r3, [r0], #1
    82c8:	d380      	bcc.n	81cc <memcpy+0xc>
    82ca:	f831 3b02 	ldrh.w	r3, [r1], #2
    82ce:	f820 3b02 	strh.w	r3, [r0], #2
    82d2:	e77b      	b.n	81cc <memcpy+0xc>
    82d4:	3a04      	subs	r2, #4
    82d6:	d3d9      	bcc.n	828c <memcpy+0xcc>
    82d8:	3a01      	subs	r2, #1
    82da:	f811 3b01 	ldrb.w	r3, [r1], #1
    82de:	f800 3b01 	strb.w	r3, [r0], #1
    82e2:	d2f9      	bcs.n	82d8 <memcpy+0x118>
    82e4:	780b      	ldrb	r3, [r1, #0]
    82e6:	7003      	strb	r3, [r0, #0]
    82e8:	784b      	ldrb	r3, [r1, #1]
    82ea:	7043      	strb	r3, [r0, #1]
    82ec:	788b      	ldrb	r3, [r1, #2]
    82ee:	7083      	strb	r3, [r0, #2]
    82f0:	4660      	mov	r0, ip
    82f2:	4770      	bx	lr

000082f4 <memset>:
    82f4:	b470      	push	{r4, r5, r6}
    82f6:	0784      	lsls	r4, r0, #30
    82f8:	d046      	beq.n	8388 <memset+0x94>
    82fa:	1e54      	subs	r4, r2, #1
    82fc:	2a00      	cmp	r2, #0
    82fe:	d041      	beq.n	8384 <memset+0x90>
    8300:	b2cd      	uxtb	r5, r1
    8302:	4603      	mov	r3, r0
    8304:	e002      	b.n	830c <memset+0x18>
    8306:	1e62      	subs	r2, r4, #1
    8308:	b3e4      	cbz	r4, 8384 <memset+0x90>
    830a:	4614      	mov	r4, r2
    830c:	f803 5b01 	strb.w	r5, [r3], #1
    8310:	079a      	lsls	r2, r3, #30
    8312:	d1f8      	bne.n	8306 <memset+0x12>
    8314:	2c03      	cmp	r4, #3
    8316:	d92e      	bls.n	8376 <memset+0x82>
    8318:	b2cd      	uxtb	r5, r1
    831a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    831e:	2c0f      	cmp	r4, #15
    8320:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    8324:	d919      	bls.n	835a <memset+0x66>
    8326:	f103 0210 	add.w	r2, r3, #16
    832a:	4626      	mov	r6, r4
    832c:	3e10      	subs	r6, #16
    832e:	2e0f      	cmp	r6, #15
    8330:	f842 5c10 	str.w	r5, [r2, #-16]
    8334:	f842 5c0c 	str.w	r5, [r2, #-12]
    8338:	f842 5c08 	str.w	r5, [r2, #-8]
    833c:	f842 5c04 	str.w	r5, [r2, #-4]
    8340:	f102 0210 	add.w	r2, r2, #16
    8344:	d8f2      	bhi.n	832c <memset+0x38>
    8346:	f1a4 0210 	sub.w	r2, r4, #16
    834a:	f022 020f 	bic.w	r2, r2, #15
    834e:	f004 040f 	and.w	r4, r4, #15
    8352:	3210      	adds	r2, #16
    8354:	2c03      	cmp	r4, #3
    8356:	4413      	add	r3, r2
    8358:	d90d      	bls.n	8376 <memset+0x82>
    835a:	461e      	mov	r6, r3
    835c:	4622      	mov	r2, r4
    835e:	3a04      	subs	r2, #4
    8360:	2a03      	cmp	r2, #3
    8362:	f846 5b04 	str.w	r5, [r6], #4
    8366:	d8fa      	bhi.n	835e <memset+0x6a>
    8368:	1f22      	subs	r2, r4, #4
    836a:	f022 0203 	bic.w	r2, r2, #3
    836e:	3204      	adds	r2, #4
    8370:	4413      	add	r3, r2
    8372:	f004 0403 	and.w	r4, r4, #3
    8376:	b12c      	cbz	r4, 8384 <memset+0x90>
    8378:	b2c9      	uxtb	r1, r1
    837a:	441c      	add	r4, r3
    837c:	f803 1b01 	strb.w	r1, [r3], #1
    8380:	42a3      	cmp	r3, r4
    8382:	d1fb      	bne.n	837c <memset+0x88>
    8384:	bc70      	pop	{r4, r5, r6}
    8386:	4770      	bx	lr
    8388:	4614      	mov	r4, r2
    838a:	4603      	mov	r3, r0
    838c:	e7c2      	b.n	8314 <memset+0x20>
    838e:	bf00      	nop

00008390 <user_mux_confs>:
	...

000083d4 <channel_confs>:
	...

00008414 <interrupt_cfg>:
	...
    8494:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    84a4:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    84b4:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    84c4:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    84d4:	5f6c 636d 5f69 7973 636e 632e 0000 0000     l_mci_sync.c....
    84e4:	4a25 0804                                   %J..

000084e8 <_usb_ep_cfgs>:
    84e8:	0ba8 2000 0000 0000 0040 0000 0b68 2000     ... ....@...h.. 
    84f8:	0000 0000 0040 0000 0b28 2000 0000 0000     ....@...(.. ....
    8508:	0040 0000 6d54 2072 7653 0063 2e2e 682f     @...Tmr Svc.../h
    8518:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    8528:	736c 6c5f 7369 2e74 0063 2e2e 682f 6c70     ls_list.c.../hpl
    8538:	732f 6864 2f63 7068 5f6c 6473 6368 632e     /sdhc/hpl_sdhc.c
    8548:	0000 0000 3000 4000 3400 4000 2000 4101     .....0.@.4.@. .A
    8558:	4000 4101 0000 4300 0400 4300 0800 4300     .@.A...C...C...C
    8568:	0c00 4300                                   ...C

0000856c <_i2cms>:
	...

00008584 <sercomspi_regs>:
    8584:	000c 0020 0000 0002 0000 0000 00fe 01ff     .. .............
    8594:	2e00 2f2e 7068 2f6c 6573 6372 6d6f 682f     .../hpl/sercom/h
    85a4:	6c70 735f 7265 6f63 2e6d 0063 2e2e 682f     pl_sercom.c.../h
    85b4:	6c70 722f 6374 682f 6c70 725f 6374 632e     pl/rtc/hpl_rtc.c
    85c4:	2e00 2f2e 7068 2f6c 6f70 7472 682f 6c70     .../hpl/port/hpl
    85d4:	675f 6970 5f6f 6162 6573 682e 4200 696c     _gpio_base.h.Bli
    85e4:	6b6e 6154 6b73 2e00 2f2e 7375 2f62 6564     nkTask.../usb/de
    85f4:	6976 6563 752f 6273 6364 632e 4900 4c44     vice/usbdc.c.IDL
    8604:	0045 2509 0963 7525 2509 0975 7525 0a0d     E..%c.%u.%u.%u..
    8614:	0000 0000                                   ....

00008618 <_init>:
    8618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    861a:	bf00      	nop
    861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    861e:	bc08      	pop	{r3}
    8620:	469e      	mov	lr, r3
    8622:	4770      	bx	lr

00008624 <__init_array_start>:
    8624:	000042d1 	.word	0x000042d1

00008628 <_fini>:
    8628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    862a:	bf00      	nop
    862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    862e:	bc08      	pop	{r3}
    8630:	469e      	mov	lr, r3
    8632:	4770      	bx	lr

00008634 <__fini_array_start>:
    8634:	000042a9 	.word	0x000042a9
